{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@fx-lib/components/lib/fx-boundary-selector/services/boundary-selector-data.service.ts","ng://@fx-lib/components/lib/fx-boundary-selector/fx-boundary-selector.component.ts","ng://@fx-lib/components/lib/fx-translation/components/fx-translation/fx-translation.component.ts","ng://@fx-lib/components/lib/fx-translation/components/fx-language-selector/fx-language-selector.component.ts","ng://@fx-lib/components/lib/fx-translation/fx-translation.module.ts","ng://@fx-lib/components/lib/fx-boundary-selector/services/boundary-selector-resolver.service.ts","ng://@fx-lib/components/lib/fx-security/domain/security-config.ts","ng://@fx-lib/components/lib/fx-security/services/login.service.ts","ng://@fx-lib/components/lib/fx-security/services/redirector.service.ts","ng://@fx-lib/components/lib/fx-security/services/authentication.service.ts","ng://@fx-lib/components/lib/shared/helper/base64.helper.ts","ng://@fx-lib/components/lib/fx-security/services/authorization.service.ts","ng://@fx-lib/components/lib/fx-boundary-selector/services/boundary-data.service.ts","ng://@fx-lib/components/lib/shared/test/mocks/pipes/translate.pipe.mock.ts","ng://@fx-lib/components/lib/shared/test/mocks/pipes/translate-with-pluralization.pipe.mock.ts","ng://@fx-lib/components/lib/shared/pipes/translate-with-pluralization.pipe.ts","ng://@fx-lib/components/lib/shared/shared.module.ts","ng://@fx-lib/components/lib/fx-search-input/fx-search-input.component.ts","ng://@fx-lib/components/lib/fx-search-input/fx-search-input.module.ts","ng://@fx-lib/components/lib/fx-boundary-selector/fx-boundary-selector.module.ts","ng://@fx-lib/components/lib/fx-dropdown/fx-dropdown.component.ts","ng://@fx-lib/components/lib/fx-dropdown/fx-dropdown.module.ts","ng://@fx-lib/components/lib/fx-notification/fx-notification.component.ts","ng://@fx-lib/components/lib/fx-notification/fx-notification.service.ts","ng://@fx-lib/components/lib/fx-notification/fx-notification.module.ts","ng://@fx-lib/components/lib/fx-security/services/user.service.ts","ng://@fx-lib/components/lib/fx-security/components/fx-user-selector/fx-user-selector.component.ts","ng://@fx-lib/components/lib/fx-security/components/idp-login/idp-login.component.ts","ng://@fx-lib/components/lib/fx-security/components/login-error/login-error.component.ts","ng://@fx-lib/components/lib/fx-security/components/logged-out/logged-out.component.ts","ng://@fx-lib/components/lib/fx-security/directives/is-logged-in.directive.ts","ng://@fx-lib/components/lib/fx-security/directives/has-role.directive.ts","ng://@fx-lib/components/lib/fx-security/directives/logout.directive.ts","ng://@fx-lib/components/lib/fx-security/guards/auth-guard.service.ts","ng://@fx-lib/components/lib/fx-security/guards/not-logged-in-auth-guard.service.ts","ng://@fx-lib/components/lib/fx-security/services/authenticating-interceptor.service.ts","ng://@fx-lib/components/lib/fx-security/components/fx-login/fx-login.component.ts","ng://@fx-lib/components/lib/fx-security/components/no-permissions/no-permissions.component.ts","ng://@fx-lib/components/lib/fx-security/fx-security.module.ts","ng://@fx-lib/components/lib/fx-confidentiality-logo/fx-confidentiality-logo.component.ts","ng://@fx-lib/components/lib/fx-confidentiality-logo/fx-confidentiality-logo.module.ts","ng://@fx-lib/components/lib/fx-wiki/domain/routing-path-resource.ts","ng://@fx-lib/components/lib/fx-wiki/fx-wiki.component.ts","ng://@fx-lib/components/lib/fx-wiki/fx-wiki.module.ts","ng://@fx-lib/components/lib/fx-week-selector/domain/week-resource.ts","ng://@fx-lib/components/lib/fx-week-selector/fx-week-selector.component.ts","ng://@fx-lib/components/lib/fx-week-selector/fx-week-selector-i18n.ts","ng://@fx-lib/components/lib/fx-week-selector/fx-week-selector.module.ts","ng://@fx-lib/components/lib/fx-header/services/fx-header-config-validator.service.ts","ng://@fx-lib/components/lib/fx-header/services/fx-header-config.service.ts","ng://@fx-lib/components/lib/fx-header/components/fx-header-app-specific-text.component.ts","ng://@fx-lib/components/lib/fx-header/fx-header.component.ts","ng://@fx-lib/components/lib/fx-header/fx-header.module.ts","ng://@fx-lib/components/lib/fx-header/models/config/fx-header-config.model.ts","ng://@fx-lib/components/lib/shared/helper/loading.helper.ts","ng://@fx-lib/components/lib/shared/helper/tooltip.helper.ts","ng://@fx-lib/components/lib/fx-custom-table/fx-custom-table.component.ts","ng://@fx-lib/components/lib/shared/helper/color-range.helper.ts","ng://@fx-lib/components/lib/fx-custom-table/templates/color-indicators-cell-template/fx-color-indicators-cell-template.component.ts","ng://@fx-lib/components/lib/fx-custom-table/fx-custom-table.module.ts","ng://@fx-lib/components/lib/fx-footer/fx-footer.component.ts","ng://@fx-lib/components/lib/fx-footer/fx-footer.module.ts","ng://@fx-lib/components/lib/shared/constants/local-storage.constants.ts","ng://@fx-lib/components/lib/shared/helper/local-storage.helper.ts","ng://@fx-lib/components/lib/fx-user-notification/domain/fx-notification-config.ts","ng://@fx-lib/components/lib/fx-user-notification/services/fx-user-notification.service.ts","ng://@fx-lib/components/lib/fx-user-notification/domain/fx-user-notification.ts","ng://@fx-lib/components/lib/fx-user-notification/components/fx-user-notification/fx-user-notification.component.ts","ng://@fx-lib/components/lib/fx-user-notification/services/fx-user-notification-local-development.service.ts","ng://@fx-lib/components/lib/fx-user-notification/components/fx-user-single-notification-area/fx-user-single-notification-area.component.ts","ng://@fx-lib/components/lib/fx-user-notification/fx-user-notification.module.ts","ng://@fx-lib/components/lib/shared/test/creators/test.creators.ts","ng://@fx-lib/components/lib/shared/test/mocks/activated-route-mock.ts","ng://@fx-lib/components/lib/shared/test/mocks/auth-service-mock.ts","ng://@fx-lib/components/lib/shared/test/mocks/router-mock.ts","ng://@fx-lib/components/lib/shared/test/mocks/translate-service-mock.ts","ng://@fx-lib/components/lib/shared/api-client/interceptors/debug-data-interceptor.ts","ng://@fx-lib/components/lib/shared/api-client/interceptors/http-token-interceptor.ts","ng://@fx-lib/components/lib/shared/helper/array.helper.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","BoundarySelectorDataService","boundaryResourceList$","BehaviorSubject","selectedBoundary$","setBoundaryResourceList","boundaryResourceList","getValue","cachedBoundary","setSelectedBoundaryByKey","setSelectedBoundaryToDefault","boundaryKey","foundBoundary","getBoundaryByKey","cacheBoundaryKey","setSelectedBoundary","boundary","boundaryValueKey","find","x","Injectable","FxBoundarySelectorComponent","boundarySelectorDataService","btnStyle","dropDownStyling","icon","fasIndustry","faIndustry","fasBox","faBox","fasCar","faCar","farCopyright","faCopyright","filterable","subscriptions","Subscription","ngOnInit","subscribeToBoundaryResourceList","subscribeToSelectedBoundary","ngOnDestroy","unsubscribe","isAnyBoundaryAvailable","boundarySelectorResourceList","setIcon","selectedIcon","filterList","entries","_this","filterInput","filter","boundaryValueName","toLowerCase","includes","enterFilterText","searchString","add","subscribe","boundaryList","selectedBoundary","Component","args","selector","template","Input","FxTranslationComponent","translateService","config","dropUpStyling","btnSize","languages","locale","name","placement","container","defineProperty","langFromLocalStorage","localStorage","getItem","selectedLanguage","lang","select","language","use","setItem","providers","NgbDropdownConfig","TranslateService","FxLanguageSelectorComponent","radioGroupStyling","isSelected","FX_LANGUAGE","HttpLoaderFactory","http","TranslateHttpLoader","CurrentLanguageFactory","translate","currentLang","registerLocaleData","localeDe","FxTranslationModule","setDefaultLang","browserLanguage","isLanguageSupported","getBrowserLang","indexOf","NgModule","declarations","exports","TranslateModule","imports","BrowserModule","CommonModule","NgbModule","forRoot","loader","provide","TranslateLoader","useFactory","deps","HttpClient","LOCALE_ID","bootstrap","BoundarySelectorResolver","router","resolve","route","state","paramMap","get","data","boundaryParamName","console","warn","Router","SECURITY_CONFIG","InjectionToken","LoginService","securityConfig","ursUrl","login","idToken","url","authorization_service_url","post","observe","responseType","pipe","map","response","body","catchError","handleError","errorMessage","message","toString","throwError","Inject","RedirectorService","redirectToUrl","window","open","AuthenticationService","loginService","redirectorService","isLoggedIn","loginEvents","initTokenFromStorage","_token","token","identityToken","tap","initLogin","removeLoginInformation","navigateByUrl","logout","buildIdpLogoutUrl","getAuthTokenHeaderString","storedToken","parts","split","payload","JSON","parse","atob","until","Date","exp","ex","loginFromUrlToken","extractTokenFromUrl","getPayload","roles","username","loginWithRedirectUrl","redirectToIdpLogin","login_redirect_url","targetUrl","buildIdpLoginUrl","undefined","removeItem","idp_base_url","generateNonce","encodeURIComponent","client_id","btoa","replace","getBase64EncodeUrlSafe","mathFloorRandom","Math","floor","random","substring","nonce","hashPart","extractHashPart","hashParams","extractParameters","decodeURIComponent","id_token","app","app_name","hashPosition","slice","paramString","reduce","params","keyValueText","keyValue","key","decodedValue","encodedBase64Url","decodedUrl","getBase64DecodeUrlSafe","logout_redirect_url","AuthorizationService","authenticationService","hasViewRole","checkMultipleRoles","view","hasViewRoleForBoundary","boundaryValue","checkMultipleRolesForBoundary","hasEditRole","edit","hasEditRoleForBoundary","hasDevopsRole","devops","hasRole","roleToCheck","some","role","hasRoleForBoundary","foundRole","boundaries","boundary_name","BoundaryDataService","authorizationService","getBoundariesForUserScope","getApiUrl","boundarySelectorResources","filterBoundariesForUserScope","filteredBoundarySelectorResources","forEach","scope","boundaryFound","app_domain","TranslatePipeMock","transform","_i","Pipe","TranslateWithPluralizationPipeMock","tslib_1.__extends","TranslateWithPluralizationPipe","query","count","_super","TranslatePipe","NGX_UI_LOADER_FX_CONFIG","fgsColor","fgsSize","fgsType","fgsPosition","overlayColor","hasProgressBar","textColor","SharedModule","NgxUiLoaderModule","FxSearchInputComponent","searchFieldMinLength","required","clearSearchInputWithEscape","placeholder","requiredAlert","minLengthAlert","autocomplete","id","title","debounceTimeInMilliseconds","trimSearchInput","style","searchInputChangedEvent","EventEmitter","searchInputChanged","Subject","subscription","search","searchValue","trim","debounceTime","Output","FxSearchInputModule","ContextMenuModule","FormsModule","library","FxBoundarySelectorModule","HttpClientModule","RouterModule","FontAwesomeModule","FxDropdownComponent","cssClass","currentItemChange","options","currentItem","clickItem","item","disabled","onSelectAction","emit","getComputedLabel","label","isCurrentItem","isItemHighlighted","highlightActive","getSelectedItem","setSelectedItem","setFilterText","getFilteredList","FxDropdownModule","FxNotificationComponent","notificationOptions","position","timeOut","clickToClose","showProgressBar","pauseOnHover","preventDuplicates","changeDetection","ChangeDetectionStrategy","OnPush","configurations","info","success","FxNotificationService","notifications","errorNotifications","events","event","NavigationEnd","notification","remove","messageType","NotificationType","Error","Warn","Info","Success","httpError","statusCode","statusCodeDescriptionsType","titleObservable","translateMessage","errorMessageObservable","generateNotification","type","messageObservable","Observable","observer","forkJoin","result","complete","i18nMessage","NotificationsService","FxNotificationModule","ngModule","BrowserAnimationsModule","SimpleNotificationsModule","UserService","getUsername","toUpperCase","FxUserSelectorComponent","userService","changeDetector","fasUser","faUser","markForCheck","isNotLoggedIn","loginSubscription","ChangeDetectorRef","IdpLoginComponent","notificationService","location","href","NEVER","LoginErrorComponent","farAngry","faAngry","LoggedOutComponent","fasSignOutAlt","faSignOutAlt","IsLoggedInDirective","authService","_viewContainer","templateRef","_context","IsLoggedInContext","_thenTemplateRef","_elseTemplateRef","_thenViewRef","_elseViewRef","loginEventsSubscription","_updateView","condition","$implicit","clear","createEmbeddedView","Directive","ViewContainerRef","TemplateRef","HasRoleDirective","HasRoleContext","factory","LogoutDirective","HostListener","AuthGuard","canActivate","checkLogin","checkRoles","checkBoundaryValue","hasPermission","requiredRoleName","NotLoggedInAuthGuard","redirectTo","AuthenticatingInterceptorService","injector","intercept","request","newRequest","clone","setHeaders","Authorization","handle","Injector","FxLoginComponent","languageSelectorRadioGroupStyling","NoPermissionsComponent","ursLink","authorization_ui_url","fasBan","fasExclamation","FxSecurityModule","useValue","HTTP_INTERCEPTORS","useClass","multi","NgbDropdownModule","FxConfidentialityLogoComponent","confidentialityLogo","path","logoType","logoHeight","getPath","logo","FxConfidentialityLogoModule","RoutingPathResource","regex","FxWikiComponent","activatedRoute","fasQuestion","faQuestion","fasQuestionCircle","farQuestionCircle","color","size","defaultRoutingPath","RegExp","wikiUrl","getRouteFromRegex","setIconColor","urlArray","join","routingPathArray","_b","tslib_1.__values","_c","routingPath","match","ActivatedRoute","FxWikiModule","WeekResource","year","week","moment","moment_","FxWeekSelectorComponent","calendar","fasCalendarWeek","faCalendarWeek","fasCalendarAlt","farCalendarAlt","fasCalendar","farCalendar","colorIcon","sizeIcon","selectorStyling","displayMonth","visible","disable","showNavigation","isDisabled","date","isDayDisabled","selectionEvent","onLangChange","delay","closeDatePicker","initDate","displayString","selectedDate","ngOnChanges","selectedWeekNr","returnWeekNr","isInsideWeekSelection","weekNr","selectedWeekOfYear","isInsideWeekHovered","hoveredWeekNr","onHover","hoverDate","onDateSelection","returnWeekYear","month","day","isoWeekday","weekYear","before","minDate","after","maxDate","isToday","calendarWeekNr","getToday","NgbCalendar","I18N_VALUES","de","weekdays","months_long","months_short","en","I18n","langChangeEvent","FxWeekSelectorI18n","i18n","getDayAriaLabel","getMonthFullName","getMonthShortName","getWeekdayShortName","weekday","NgbDatepickerI18n","FxWeekSelectorModule","NgbDatepickerModule","ClickOutsideModule","NgbTooltipModule","FxHeaderConfigValidatorService","validate","components","checkForUniqueEventNames","isUnique","eventNames","component","outputEvents","outputEvent","FxHeaderConfigService","fxheaderConfigValidatorService","appTitleShort","appTitle","routes","staticComponents","setConfig","FxHeaderAppSpecificTextComponent","text","FxHeaderComponent","fxHeaderConfigService","componentFactoryResolver","cdRef","eRef","navbarStyling","componentEvents","logoPath","appSpecificComponentsConfigs","staticComponentConfigs","componentConfigs","isCollapsed","ngAfterViewInit","appSpecificComponents","componentConfig","addAppSpecificComponentToContainer","addComponentToContainer","staticComponentsContainer","componentsContainer","detectChanges","clickout","nativeElement","contains","target","componentConfigModel","appSpecificComponentsContainer","creatTextComponentConfig","componentClass","inputs","of","componentContainer","componentFactory","resolveComponentFactory","createComponent","configEntry","instance","eventName","ComponentFactoryResolver","ElementRef","ViewChild","read","static","FxHeaderModule","entryComponents","FX_HEADER_CONFIG","showOrHideLoader","loading","ngxUiLoaderService","loadingId","showLoader","getLoaders","startLoader","stopLoader","getTooltip","tooltip","row","tipObj","isArray","tipArray","tripFromArray","tip","showCondition","instant","column","FxCustomTableComponent","clipboardService","elRef","columnMode","foregroundColor","loadingType","loadingPosition","loaderSize","columns","messagesEmptyMessage","messagesTotalMessage","messagesSelectedMessage","offset","limit","headerHeight","rowHeight","rowHeightCallback","index","rowDetail","rows","externalPaging","externalSorting","sortType","SortType","single","scrollbarH","scrollbarV","preloadNextPage","preloadPrevPage","loadingPageDebounceTimeInMilliseconds","pageCallback","sortCallback","scrollCallback","selectRowCallback","pageInfo","pageSize","fetchDataDebouncer","loadingPages","Map","changes","handleLoading","tableRows","goToFirstPage","start","_a","splice","isDebugContextMenuVisible","loadedEntries","handleInitialColumnFolding","getNextPage","newPageInfoPrev","maxOffset","max","ceil","isFirstPage","isLastPage","currentAllDataIsFilled","isAllDataFilled","prevAllDataIsFilled","newPageInfoNext","nextAllDataIsFilled","pageInfoCurrent","pageInfoPrev","pageInfoNext","getNewData","getFilteredColumns","originalColumns","expectedFoldState","c","isFolded","selectRow","getStaticTooltip","getRowTooltip","noTextOverflow","dataColumn","isTooltipDisabled","divElement","offsetWidth","scrollWidth","getBorderClass","border","borderClasses","bottom","left","right","top","getCellStyleClasses","baseClass","additionalClass","getCellClasses","cellClasses","cellAlign","cellBorder","cellClass","getHeaderClasses","headerClasses","headerAlign","headerBorder","headerClass","foldColumns","trimString","String","firstTabButton","querySelector","click","emitScrollCallback","scrollInfo","page","emitPageCallback","indexes","copyLoadedValuesToClipboard","columnData","prop","values","copyValueToClipboard","copyFromContent","evaluateFormat","format","formatDate","handleColumnFolding","datatableColumn","setFoldStateForColumns","newFoldState","columnNames","columnName","col","delete","set","direction","min","first","last","dataRows","ClipboardService","NgxUiLoaderService","getColorByValue","colorRanges","colorRange","end","FxColorIndicatorsCellTemplateComponent","DataTableBodyComponent","updateRows","rowIndex","idx","temp","rowIndexes","groupedRows","group","rowCount","FxCustomTableModule","NgxDatatableModule","FxFooterComponent","backgroundColor","FxFooterModule","FACILITY","DEBUG","deleteItem","isDebugMode","NOTIFICATION_CONFIG","FxUserNotificationService","notificationConfig","baseUrl","notification_service_url","getNotifications","postUserReadLog","priorityMap","FxUserNotificationComponent","userNotificationService","opened","faBell","refreshInterval","charsOfShortText","userNotificationList","userNotificationUnreadList","userNotificationReadList","getNotificationIconColor","intervalTimeSubscription","timer","receiveNotifications","userNotificationSubscription","res","sortNotificationsAndRemember","toggleNotificationArea","postReadNotificationLogAndRefreshNotifications","notificationData","sortNotification","notificationCount","sort","notification1","notification2","severity","compareUpdateTime","updateTimestamp","toPromise","then","ts1","ts2","getTime","FxUserNotificationLocalDevelopmentService","idCounterForMessages","startTimer","generateNewMessage","getRandomSeverity","messageText","messageHeadline","updatedByUser","audience","rnd","FxUserSingleNotificationAreaComponent","isMessageShorted","visibleMessage","show","completeNotification","updateVisibleMessageText","getSeverityStyle","showToggle","getSeverityIcon","FxUserNotificationModule","forLocalDevelopment","getAllFunctionNames","clazz","foundedFunctionNames","Reflect","ownKeys","parentClass","getPrototypeOf","createSpyObjWithFunctionArray","originalFunctions","spyObject","originalFunctions_1","originalFunctions_1_1","originalFunction","originalFnName","jestFunction","mockFunction","jest","fn","ActivatedRouteMock","fragment","testFragment","testParams","queryParams","testQueryParams","_testParams","_fragment","_queryParams","AuthServiceMock","_isLoggedIn","RouterMock","navigate","navigateRelative","navigateBack","TranslateServiceMockImpl","_config","getBrowserCultureLang","substr","param","keyMap_1","k","switchLanguage","getTranslation","translateServiceMock","DebugDataInterceptor","snapshot","debug","apiName","newUrl","method","HttpTokenInterceptor","bearerToken","replaceHttpOrPrefixUrlWithHttps","originalUrl","startsWith","functionNames","functions","functionName","original","originalArray","array","j","arrayFirst","propertyKey","final","facility"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { BehaviorSubject } from 'rxjs'\r\nimport { BoundarySelectorResource } from '../domain/boundary-selector-resource'\r\n\r\n@Injectable()\r\nexport class BoundarySelectorDataService {\r\n\r\n    public boundaryResourceList$ = new BehaviorSubject<BoundarySelectorResource[]>([])\r\n    public selectedBoundary$ = new BehaviorSubject<BoundarySelectorResource>(null)\r\n    private cachedBoundary\r\n\r\n    constructor() {\r\n    }\r\n\r\n    public setBoundaryResourceList(boundaryResourceList: BoundarySelectorResource[]): void {\r\n        if (this.boundaryResourceList$.getValue() === boundaryResourceList) {\r\n            return\r\n        }\r\n\r\n        this.boundaryResourceList$.next(boundaryResourceList)\r\n\r\n        if (this.cachedBoundary != null) {\r\n            this.setSelectedBoundaryByKey(this.cachedBoundary)\r\n            this.cachedBoundary = null\r\n        }\r\n\r\n        if (this.selectedBoundary$.getValue() == null) {\r\n            this.setSelectedBoundaryToDefault()\r\n        }\r\n    }\r\n\r\n    public setSelectedBoundaryByKey(boundaryKey: string): void {\r\n        const foundBoundary: BoundarySelectorResource = this.getBoundaryByKey(boundaryKey)\r\n        if (this.boundaryResourceList$.getValue().length < 1) {\r\n            this.setSelectedBoundaryToDefault()\r\n            this.cacheBoundaryKey(boundaryKey)\r\n            return\r\n        }\r\n\r\n        if (!foundBoundary) {\r\n            this.setSelectedBoundaryToDefault()\r\n            return\r\n        }\r\n\r\n        if (this.selectedBoundary$.getValue() === foundBoundary) {\r\n            return\r\n        }\r\n\r\n        this.selectedBoundary$.next(foundBoundary)\r\n    }\r\n\r\n    public setSelectedBoundary(boundary: BoundarySelectorResource): void {\r\n        this.setSelectedBoundaryByKey(boundary.boundaryValueKey)\r\n    }\r\n\r\n    private getBoundaryByKey(boundaryKey: string): BoundarySelectorResource {\r\n        return this.boundaryResourceList$.getValue().find(x => x.boundaryValueKey === boundaryKey)\r\n    }\r\n\r\n    private setSelectedBoundaryToDefault(): void {\r\n        if (this.boundaryResourceList$.getValue() == null || this.boundaryResourceList$.getValue().length < 1) {\r\n            this.selectedBoundary$.next(null)\r\n            return\r\n        }\r\n\r\n        this.selectedBoundary$.next(this.boundaryResourceList$.getValue()[0])\r\n    }\r\n\r\n    private cacheBoundaryKey(boundaryKey: string): void {\r\n        if (this.cachedBoundary === boundaryKey) {\r\n            return\r\n        }\r\n\r\n        this.cachedBoundary = boundaryKey\r\n    }\r\n}\r\n","import { Component, Input, OnInit, OnDestroy } from '@angular/core'\r\nimport { BoundarySelectorResource } from './domain/boundary-selector-resource'\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faIndustry } from '@fortawesome/free-solid-svg-icons/faIndustry'\r\nimport { faBox } from '@fortawesome/free-solid-svg-icons/faBox'\r\nimport { faCar } from '@fortawesome/free-solid-svg-icons/faCar'\r\nimport { faCopyright } from '@fortawesome/free-regular-svg-icons/faCopyright'\r\nimport { BoundarySelectorDataService } from './services/boundary-selector-data.service'\r\nimport { Subscription } from 'rxjs'\r\n\r\n@Component({\r\n  selector: 'app-fx-boundary-selector',\r\n  templateUrl: './fx-boundary-selector.component.html',\r\n  styleUrls: ['./fx-boundary-selector.component.scss']\r\n})\r\n\r\nexport class FxBoundarySelectorComponent implements OnInit, OnDestroy {\r\n\r\n  public boundarySelectorResourceList: BoundarySelectorResource[]\r\n  public selectedBoundary: BoundarySelectorResource\r\n\r\n  @Input()\r\n  public btnStyle = ''\r\n\r\n  @Input()\r\n  public dropDownStyling = ''\r\n\r\n  @Input()\r\n  public icon = ''\r\n\r\n  public fasIndustry: IconProp = faIndustry\r\n  public fasBox: IconProp = faBox\r\n  public fasCar: IconProp = faCar\r\n  public farCopyright: IconProp = faCopyright\r\n\r\n  @Input()\r\n  public filterable = false\r\n\r\n  private filterInput: string\r\n\r\n  private subscriptions: Subscription = new Subscription()\r\n\r\n  constructor(private boundarySelectorDataService: BoundarySelectorDataService) { }\r\n\r\n  public ngOnInit(): void {\r\n    this.subscribeToBoundaryResourceList()\r\n    this.subscribeToSelectedBoundary()\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe()\r\n  }\r\n\r\n  public setSelectedBoundary(boundary: BoundarySelectorResource): void {\r\n    this.boundarySelectorDataService.setSelectedBoundary(boundary)\r\n  }\r\n\r\n  public isAnyBoundaryAvailable(): boolean {\r\n    return this.boundarySelectorResourceList != null && this.boundarySelectorResourceList.length > 0\r\n  }\r\n\r\n  public setIcon(selectedIcon?: string): IconProp {\r\n    switch (selectedIcon) {\r\n      case 'fasIndustry': {\r\n        return this.fasIndustry\r\n      }\r\n      case 'fasBox': {\r\n        return this.fasBox\r\n      }\r\n      case 'fasCar': {\r\n        return this.fasCar\r\n      }\r\n      case 'farCopyright': {\r\n        return this.farCopyright\r\n      }\r\n      default: {\r\n        return this.fasIndustry\r\n      }\r\n    }\r\n  }\r\n\r\n  public filterList(entries: BoundarySelectorResource[]): any {\r\n    if (this.filterable && this.filterInput && this.filterInput.length > 0) {\r\n      return entries.filter(e => e.boundaryValueKey.concat(e.boundaryValueName).toLowerCase().includes(this.filterInput.toLowerCase()))\r\n    } else {\r\n      return entries\r\n    }\r\n  }\r\n\r\n  public enterFilterText(searchString: string): void {\r\n    this.filterInput = searchString\r\n  }\r\n\r\n  private subscribeToBoundaryResourceList(): void {\r\n    this.subscriptions.add(this.boundarySelectorDataService.boundaryResourceList$.subscribe((boundaryList: BoundarySelectorResource[]) => {\r\n      this.boundarySelectorResourceList = boundaryList\r\n    }))\r\n  }\r\n\r\n  private subscribeToSelectedBoundary(): void {\r\n    this.subscriptions.add(this.boundarySelectorDataService.selectedBoundary$.subscribe((boundary: BoundarySelectorResource) => {\r\n      if (this.selectedBoundary === boundary) {\r\n        return\r\n      }\r\n\r\n      this.selectedBoundary = boundary\r\n    }))\r\n  }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core'\r\nimport { NgbDropdownConfig } from '@ng-bootstrap/ng-bootstrap'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { Language } from '../fx-language-selector/domain/language'\r\n\r\nexport const FX_LANGUAGE = 'FX_LANGUAGE'\r\n\r\n@Component({\r\n  selector: 'app-fx-translation',\r\n  templateUrl: './fx-translation.component.html',\r\n  styleUrls: ['./fx-translation.component.scss'],\r\n  providers: [NgbDropdownConfig]\r\n})\r\nexport class FxTranslationComponent {\r\n\r\n  @Input()\r\n  public dropUpStyling = ''\r\n\r\n  @Input()\r\n  public btnStyle = ''\r\n\r\n  @Input()\r\n  public btnSize = ''\r\n\r\n  public readonly languages: Language[] = [\r\n    { locale: 'de', name: 'Deutsch' },\r\n    { locale: 'en', name: 'English' }\r\n  ]\r\n\r\n  constructor(\r\n    private translateService: TranslateService,\r\n    config: NgbDropdownConfig) {\r\n    config.placement = 'top'\r\n    config.container = 'body'\r\n  }\r\n\r\n  get selectedLanguage(): Language {\r\n    const langFromLocalStorage = localStorage.getItem(FX_LANGUAGE)\r\n    const selectedLanguage = this.languages.find(lang => lang.locale === langFromLocalStorage)\r\n\r\n    if (!selectedLanguage) {\r\n      return this.languages[1]\r\n    }\r\n\r\n    return selectedLanguage\r\n  }\r\n\r\n  public select(language: Language): void {\r\n    const selectedLanguage = this.languages.find(lang => lang.locale === language.locale)\r\n    if (!selectedLanguage) {\r\n      return\r\n    }\r\n\r\n    this.translateService.use(language.locale)\r\n    localStorage.setItem(FX_LANGUAGE, language.locale)\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { Language } from './domain/language'\r\nimport { FX_LANGUAGE } from '../fx-translation/fx-translation.component'\r\n\r\n@Component({\r\n  selector: 'app-fx-language-selector',\r\n  templateUrl: './fx-language-selector.component.html',\r\n  styleUrls: ['./fx-language-selector.component.scss']\r\n})\r\nexport class FxLanguageSelectorComponent {\r\n\r\n  @Input()\r\n  public radioGroupStyling = ''\r\n\r\n  public readonly languages: Language[] = [\r\n    { locale: 'de', name: 'Deutsch' },\r\n    { locale: 'en', name: 'English' }\r\n  ]\r\n\r\n  constructor(private translateService: TranslateService) {\r\n  }\r\n\r\n  public isSelected(language: Language): boolean {\r\n    return language === this.selectedLanguage\r\n  }\r\n\r\n  get selectedLanguage(): Language {\r\n    const langFromLocalStorage = localStorage.getItem(FX_LANGUAGE)\r\n    const selectedLanguage = this.languages.find(lang => lang.locale === langFromLocalStorage)\r\n    return selectedLanguage\r\n  }\r\n\r\n  public select(language: Language): void {\r\n    const selectedLanguage = this.languages.find(lang => lang.locale === language.locale)\r\n    if (!selectedLanguage) {\r\n      return\r\n    }\r\n\r\n    this.translateService.use(language.locale)\r\n    localStorage.setItem(FX_LANGUAGE, language.locale)\r\n  }\r\n\r\n}\r\n","import { LOCALE_ID, NgModule } from '@angular/core'\r\nimport { CommonModule, registerLocaleData } from '@angular/common'\r\nimport { FxTranslationComponent } from './components/fx-translation/fx-translation.component'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader'\r\nimport localeDe from '@angular/common/locales/de'\r\nimport { FxLanguageSelectorComponent } from './components/fx-language-selector/fx-language-selector.component'\r\n\r\nexport const FX_LANGUAGE = 'FX_LANGUAGE'\r\n\r\nregisterLocaleData(localeDe)\r\n\r\nexport function HttpLoaderFactory(http: HttpClient): TranslateHttpLoader {\r\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json')\r\n}\r\n\r\nexport function CurrentLanguageFactory(translate: TranslateService): string {\r\n  return translate.currentLang\r\n}\r\n\r\n@NgModule({\r\n  declarations: [FxTranslationComponent,\r\n                FxLanguageSelectorComponent\r\n  ],\r\n  exports: [\r\n    TranslateModule,\r\n    FxTranslationComponent,\r\n    FxLanguageSelectorComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    CommonModule,\r\n    NgbModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    })],\r\n    providers: [{provide: LOCALE_ID, useFactory: CurrentLanguageFactory, deps: [TranslateService]}\r\n    ],\r\n    bootstrap: [FxTranslationComponent, FxLanguageSelectorComponent]\r\n})\r\n\r\nexport class FxTranslationModule {\r\n  public static isLanguageSupported(browserLanguage: string): boolean {\r\n    return ['en', 'de'].indexOf(browserLanguage) >= 0\r\n  }\r\n  constructor(translate: TranslateService) {\r\n    translate.setDefaultLang('de')\r\n    const langFromLocalStorage = localStorage.getItem(FX_LANGUAGE)\r\n    if (langFromLocalStorage) {\r\n      translate.use(langFromLocalStorage)\r\n    } else {\r\n      const browserLanguage = FxTranslationModule.isLanguageSupported(translate.getBrowserLang()) ? translate.getBrowserLang() : 'de'\r\n      translate.use(browserLanguage)\r\n      localStorage.setItem(FX_LANGUAGE, browserLanguage)\r\n    }\r\n  }\r\n}\r\n\r\n\r\n","import { Injectable } from '@angular/core'\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router, Resolve } from '@angular/router'\r\nimport { BoundarySelectorDataService } from './boundary-selector-data.service'\r\nimport { BoundarySelectorResource } from '../domain/boundary-selector-resource'\r\n\r\n@Injectable()\r\nexport class BoundarySelectorResolver implements Resolve<BoundarySelectorResource> {\r\n\r\n    constructor(private router: Router, private boundarySelectorDataService: BoundarySelectorDataService) {\r\n    }\r\n\r\n    public resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BoundarySelectorResource | import('rxjs').Observable<BoundarySelectorResource> | Promise<BoundarySelectorResource> {\r\n        const boundaryKey: string = route.paramMap.get(route.data.boundaryParamName)\r\n\r\n        if (!boundaryKey) {\r\n            console.warn('no boundary key param found')\r\n            return\r\n        }\r\n\r\n        this.boundarySelectorDataService.setSelectedBoundaryByKey(boundaryKey)\r\n\r\n        return this.boundarySelectorDataService.selectedBoundary$.getValue()\r\n    }\r\n\r\n}\r\n","import { InjectionToken } from '@angular/core'\r\nimport { SecurityConfig } from '../fx-security.module'\r\n\r\nexport const SECURITY_CONFIG = new InjectionToken<SecurityConfig>('SECURITY_CONFIG')\r\n","import { Inject, Injectable } from '@angular/core'\r\nimport { SecurityConfig } from '../fx-security.module'\r\nimport { HttpClient, HttpErrorResponse, HttpResponse } from '@angular/common/http'\r\nimport { IdpIdentityToken } from './authentication.service'\r\nimport { Observable, throwError } from 'rxjs'\r\nimport { catchError, map } from 'rxjs/operators'\r\nimport { SECURITY_CONFIG } from '../domain/security-config'\r\n\r\n@Injectable()\r\nexport class LoginService {\r\n  public securityConfig: SecurityConfig\r\n\r\n  private ursUrl = 'api/v1/auth'\r\n\r\n  constructor(private http: HttpClient,\r\n    @Inject(SECURITY_CONFIG) securityConfig: SecurityConfig) {\r\n\r\n    this.securityConfig = securityConfig\r\n  }\r\n\r\n  public login(idToken: IdpIdentityToken): Observable<string> {\r\n    const url: string = this.securityConfig.authorization_service_url + this.ursUrl\r\n\r\n    return this.http\r\n      .post(url, idToken, { observe: 'response', responseType: 'text' })\r\n      .pipe(\r\n        map((response: HttpResponse<any>) =>\r\n          response.body\r\n        ),\r\n        catchError((error: HttpErrorResponse) =>\r\n          this.handleError(error)\r\n        )\r\n      )\r\n  }\r\n\r\n  private handleError(error: HttpErrorResponse): Observable<never> {\r\n    const errorMessage: string = error.message ? error.message : error.toString()\r\n    console.error(errorMessage)\r\n\r\n    return throwError(errorMessage)\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core'\r\n\r\n@Injectable()\r\nexport class RedirectorService {\r\n\r\n  public redirectToUrl(url: string): void {\r\n    window.open(url, '_self')\r\n  }\r\n\r\n}\r\n","import { Inject, Injectable } from '@angular/core'\r\nimport { Router } from '@angular/router'\r\nimport { BehaviorSubject, Observable } from 'rxjs'\r\nimport { map, tap } from 'rxjs/operators'\r\nimport { getBase64DecodeUrlSafe, getBase64EncodeUrlSafe } from '../../shared/helper/base64.helper'\r\nimport { Payload } from '../domain/payload'\r\nimport { SECURITY_CONFIG } from '../domain/security-config'\r\nimport { SecurityConfig } from '../fx-security.module'\r\nimport { LoginService } from './login.service'\r\nimport { RedirectorService } from './redirector.service'\r\n\r\ninterface HashParams {\r\n  [key: string]: string\r\n}\r\n\r\nexport type LoginEvent = 'loggedin' | 'loggedout'\r\nexport const TOKEN_KEY = 'URS_TOKEN'\r\nexport const ID_TOKEN_KEY = 'URS_ID_TOKEN'\r\n\r\nexport interface IdpIdentityToken {\r\n  token: string\r\n  state: string\r\n  app: string\r\n}\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n\r\n  protected securityConfig: SecurityConfig\r\n\r\n  public isLoggedIn = false\r\n\r\n  protected _token?: string\r\n  get token(): string {\r\n    return this._token || ''\r\n  }\r\n\r\n  set token(token: string) {\r\n    this._token = token\r\n  }\r\n\r\n  public loginEvents: BehaviorSubject<LoginEvent>\r\n\r\n  constructor(private loginService: LoginService,\r\n              private router: Router,\r\n              private redirectorService: RedirectorService,\r\n              @Inject(SECURITY_CONFIG) securityConfig: SecurityConfig) {\r\n    this.loginEvents = new BehaviorSubject<LoginEvent>('loggedout')\r\n    this.initTokenFromStorage()\r\n    this.securityConfig = securityConfig\r\n  }\r\n\r\n  public login(identityToken: IdpIdentityToken): Observable<IdpIdentityToken> {\r\n    return this.loginService.login(identityToken)\r\n      .pipe(\r\n        tap((token: string) => {\r\n          this.initLogin(token, identityToken)\r\n          this.loginEvents.next('loggedin')\r\n        }, () => {\r\n          this.removeLoginInformation()\r\n          this.router.navigateByUrl('/login-error')\r\n        }),\r\n        map(() =>\r\n          identityToken,\r\n        ),\r\n      )\r\n  }\r\n\r\n  public logout(): void {\r\n    // Check for ID token\r\n    const idToken = localStorage.getItem(ID_TOKEN_KEY)\r\n    this.removeLoginInformation()\r\n    if (idToken) {\r\n      this.redirectorService.redirectToUrl(this.buildIdpLogoutUrl(idToken))\r\n    } else {\r\n      this.router.navigateByUrl('/')\r\n    }\r\n  }\r\n\r\n  public getAuthTokenHeaderString(): string {\r\n    return 'Bearer ' + this.token\r\n  }\r\n\r\n  public initTokenFromStorage(): void {\r\n    const storedToken: string = localStorage.getItem(TOKEN_KEY)\r\n    if (storedToken == null) {\r\n      return\r\n    }\r\n    try {\r\n      const parts: string[] = storedToken.split('.')\r\n      const payload = JSON.parse(atob(parts[1]))\r\n      const until = new Date(payload.exp * 1000)\r\n      const now = new Date()\r\n\r\n      if (now < until) {\r\n        this.token = storedToken\r\n        this.isLoggedIn = true\r\n        this.loginEvents.next('loggedin')\r\n      }\r\n    } catch (ex) {\r\n      this.removeLoginInformation()\r\n    }\r\n  }\r\n\r\n  public loginFromUrlToken(url: string): Observable<IdpIdentityToken> {\r\n    const identityToken: IdpIdentityToken = this.extractTokenFromUrl(url)\r\n    return this.login(identityToken)\r\n  }\r\n\r\n  public getPayload(): Payload {\r\n    if (this.isLoggedIn) {\r\n      const token = this.token\r\n      const parts: string[] = token.split('.')\r\n      if (parts.length >= 2) {\r\n        return JSON.parse(atob(parts[1]))\r\n      }\r\n    }\r\n    return {roles: [], username: ''}\r\n  }\r\n\r\n  public loginWithRedirectUrl(): void {\r\n    this.redirectToIdpLogin(this.securityConfig.login_redirect_url)\r\n  }\r\n\r\n  public redirectToIdpLogin(targetUrl: string): void {\r\n    this.redirectorService.redirectToUrl(this.buildIdpLoginUrl(targetUrl))\r\n  }\r\n\r\n  private initLogin(token: string, identityToken: IdpIdentityToken): void {\r\n    this.token = token\r\n    this.isLoggedIn = true\r\n    localStorage.setItem(TOKEN_KEY, token)\r\n    localStorage.setItem(ID_TOKEN_KEY, identityToken.token)\r\n  }\r\n\r\n  private removeLoginInformation(): void {\r\n    this.token = undefined\r\n    this.isLoggedIn = false\r\n    localStorage.removeItem(TOKEN_KEY)\r\n    localStorage.removeItem(ID_TOKEN_KEY)\r\n    this.loginEvents.next('loggedout')\r\n  }\r\n\r\n  private buildIdpLoginUrl(state: string): string {\r\n    return this.securityConfig.idp_base_url + 'auth'\r\n      + '?response_type=id_token'\r\n      + '&scope=openid'\r\n      + '&nonce=' + this.generateNonce()\r\n      + '&client_id=' + encodeURIComponent(this.securityConfig.client_id)\r\n      + '&redirect_uri=' + encodeURIComponent(this.securityConfig.login_redirect_url)\r\n      + '&state=' + encodeURIComponent(getBase64EncodeUrlSafe(state))\r\n  }\r\n\r\n  private mathFloorRandom(): string {\r\n    return Math.floor((1 + Math.random()) * 0x10000)\r\n      .toString(16)\r\n      .substring(1)\r\n  }\r\n\r\n  private generateNonce(): string {\r\n    let nonce = ''\r\n    for (let i = 0; i < 8; i++) {\r\n      nonce += this.mathFloorRandom()\r\n    }\r\n    return nonce\r\n  }\r\n\r\n  private extractTokenFromUrl(url: string): IdpIdentityToken {\r\n    const hashPart = this.extractHashPart(url)\r\n    const hashParams: HashParams = this.extractParameters(decodeURIComponent(hashPart))\r\n    if (hashParams && hashParams.state && hashParams.id_token) {\r\n      return {\r\n        state: hashParams.state,\r\n        token: hashParams.id_token,\r\n        app: this.securityConfig.app_name,\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  private extractHashPart(url: string): string {\r\n    const hashPosition = url.indexOf('#')\r\n    if (hashPosition >= 0 && url.length > hashPosition) {\r\n      return url.slice(hashPosition + 1)\r\n    } else {\r\n      return ''\r\n    }\r\n  }\r\n\r\n  private extractParameters(paramString: string): HashParams {\r\n    return paramString.split('&')\r\n      .reduce((params: HashParams, keyValueText: string) => {\r\n        if (keyValueText) {\r\n          const keyValue = keyValueText.split('=')\r\n          if (keyValue.length === 2) {\r\n            const key = keyValue[0]\r\n            const value = keyValue[1]\r\n            const decodedValue = key === 'state' ? getBase64DecodeUrlSafe(value) : value\r\n            params[key] = decodeURIComponent(decodedValue)\r\n          }\r\n        }\r\n        return params\r\n      }, {})\r\n  }\r\n\r\n  private buildIdpLogoutUrl(token: string): string {\r\n    return this.securityConfig.idp_base_url + 'logout'\r\n      + '?id_token=' + token\r\n      + '&post_logout_redirect_uri=' + encodeURIComponent(this.securityConfig.logout_redirect_url)\r\n  }\r\n}\r\n","export function getBase64EncodeUrlSafe(url: string): string | undefined {\r\n  if (!url) {\r\n    return undefined\r\n  }\r\n  const base64Url = btoa(url)\r\n  return base64Url\r\n    .replace(/\\+/g, '-')\r\n    .replace(/\\//g, '_')\r\n    .replace(/\\=/g, '_EQ_')\r\n}\r\n\r\nexport function getBase64DecodeUrlSafe(encodedBase64Url: string): string | undefined {\r\n  if (!encodedBase64Url) {\r\n    return undefined\r\n  }\r\n  const decodedUrl = encodedBase64Url\r\n    .replace(/_EQ_/g, '=')\r\n    .replace(/-/g, '+')\r\n    .replace(/_/g, '/')\r\n\r\n  return atob(decodedUrl)\r\n}\r\n","import { Injectable, Inject } from '@angular/core'\r\nimport { SecurityConfig } from '../fx-security.module'\r\nimport { AuthenticationService } from './authentication.service'\r\nimport { SECURITY_CONFIG } from '../domain/security-config'\r\nimport { Role } from '../domain/role'\r\n\r\n@Injectable()\r\nexport class AuthorizationService {\r\n\r\n  public securityConfig: SecurityConfig\r\n\r\n  constructor(private authenticationService: AuthenticationService, @Inject(SECURITY_CONFIG) securityConfig: SecurityConfig) {\r\n    this.securityConfig = securityConfig\r\n  }\r\n\r\n  public hasViewRole(): boolean {\r\n    return this.checkMultipleRoles(this.securityConfig.roles.view)\r\n  }\r\n\r\n  public hasViewRoleForBoundary(boundaryValue: string): boolean {\r\n    return this.checkMultipleRolesForBoundary(this.securityConfig.roles.view, boundaryValue)\r\n  }\r\n\r\n  public hasEditRole(): boolean {\r\n    return this.checkMultipleRoles(this.securityConfig.roles.edit)\r\n  }\r\n\r\n  public hasEditRoleForBoundary(boundaryValue: string): boolean {\r\n    return this.checkMultipleRolesForBoundary(this.securityConfig.roles.edit, boundaryValue)\r\n  }\r\n\r\n  public hasDevopsRole(): boolean {\r\n    return this.checkMultipleRoles(this.securityConfig.roles.devops)\r\n  }\r\n\r\n  public hasRole(roleToCheck: string): boolean {\r\n    const payload = this.authenticationService.getPayload()\r\n    return payload.roles.some((role: Role) =>\r\n      role.role === roleToCheck\r\n    )\r\n  }\r\n\r\n  public hasRoleForBoundary(roleToCheck: string, boundaryValue: string): boolean {\r\n    const payload = this.authenticationService.getPayload()\r\n    const foundRole = payload.roles.find(r => r.role === roleToCheck)\r\n\r\n    if (!foundRole) {\r\n      return false\r\n    }\r\n\r\n    const devopsRole = this.securityConfig.roles.devops.find(r => r === foundRole.role)\r\n    if (devopsRole) {\r\n      return true\r\n    }\r\n\r\n    const boundaries = foundRole.boundaries[this.securityConfig.boundary_name]\r\n    return boundaries.some((boundary: string) => boundary === boundaryValue)\r\n  }\r\n\r\n  private checkMultipleRoles(roles: any[]): boolean {\r\n    return roles.some(role => this.hasRole(role))\r\n  }\r\n\r\n  private checkMultipleRolesForBoundary(roles: any[], boundaryValue: string): boolean {\r\n    return roles.some(role => this.hasRoleForBoundary(role, boundaryValue))\r\n  }\r\n\r\n}\r\n","import { Injectable, Inject } from '@angular/core'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { AuthenticationService } from '../../fx-security/services/authentication.service'\r\nimport { Role } from '../../fx-security/domain/role'\r\nimport { SecurityConfig } from '../../fx-security/fx-security.module'\r\nimport { SECURITY_CONFIG } from '../../fx-security/domain/security-config'\r\nimport { AuthorizationService } from '../../fx-security/services/authorization.service'\r\nimport { BoundarySelectorResource } from '../domain/boundary-selector-resource'\r\nimport { map } from 'rxjs/operators'\r\nimport { Observable } from 'rxjs'\r\n\r\n@Injectable()\r\nexport class BoundaryDataService {\r\n\r\n    public securityConfig: SecurityConfig\r\n\r\n    constructor(\r\n        private http: HttpClient,\r\n        private authenticationService: AuthenticationService,\r\n        private authorizationService: AuthorizationService,\r\n        @Inject(SECURITY_CONFIG) securityConfig: SecurityConfig) {\r\n        this.securityConfig = securityConfig\r\n    }\r\n\r\n    public getBoundariesForUserScope(): Observable<BoundarySelectorResource[]> {\r\n        return this.http.get<BoundarySelectorResource[]>(this.getApiUrl()).pipe(map((boundarySelectorResources: BoundarySelectorResource[]) => {\r\n            return this.filterBoundariesForUserScope(boundarySelectorResources)\r\n        }))\r\n    }\r\n\r\n    public filterBoundariesForUserScope(boundarySelectorResources: BoundarySelectorResource[]): BoundarySelectorResource[] {\r\n        const filteredBoundarySelectorResources: BoundarySelectorResource[] = []\r\n\r\n        if (this.authorizationService.hasDevopsRole()) {\r\n            return boundarySelectorResources\r\n        }\r\n\r\n        this.authenticationService.getPayload().roles.forEach((role: Role) => {\r\n            if (role.boundaries[this.securityConfig.boundary_name]) {\r\n                role.boundaries[this.securityConfig.boundary_name].forEach((scope: string) => {\r\n                    const boundaryFound = boundarySelectorResources.find(boundary => boundary.boundaryValueKey === scope)\r\n                    if (boundaryFound) {\r\n                        filteredBoundarySelectorResources.push(boundaryFound)\r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n        return filteredBoundarySelectorResources\r\n    }\r\n\r\n    private getApiUrl(): string {\r\n        return `${this.securityConfig.authorization_service_url}/api/v1/domains/${this.securityConfig.app_domain}/apps/${this.securityConfig.app_name}/boundaryvaluesminified/`\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core'\r\n\r\n@Pipe({name: 'translate'})\r\nexport class TranslatePipeMock implements PipeTransform {\r\n  public transform(value: any, ...args: any): any {\r\n    return 'tr:' + value\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core'\r\nimport { TranslatePipeMock } from './translate.pipe.mock'\r\n\r\n@Pipe({name: 'translateWithPluralization'})\r\nexport class TranslateWithPluralizationPipeMock extends TranslatePipeMock implements PipeTransform {\r\n  public transform(value: any, ...args: any): any {\r\n    return 'tr:' + value\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core'\r\nimport { TranslatePipe } from '@ngx-translate/core'\r\n\r\n@Pipe({name: 'translateWithPluralization'})\r\nexport class TranslateWithPluralizationPipe extends TranslatePipe implements PipeTransform {\r\n\r\n  public transform(query: any, ...args: any[]): any {\r\n    const count = args[0]['count']\r\n    if (count !== null && count !== undefined) {\r\n      if (count.toString() === '1') {\r\n        query += '.singular'\r\n      } else {\r\n        query += '.plural'\r\n      }\r\n    }\r\n    return super.transform(query, args[0])\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { TranslatePipeMock } from './test/mocks/pipes/translate.pipe.mock'\r\nimport { TranslateWithPluralizationPipeMock } from './test/mocks/pipes/translate-with-pluralization.pipe.mock'\r\nimport { TranslateWithPluralizationPipe } from './pipes/translate-with-pluralization.pipe'\r\nimport { NgxUiLoaderConfig, NgxUiLoaderModule } from 'ngx-ui-loader'\r\n\r\nconst NGX_UI_LOADER_FX_CONFIG: NgxUiLoaderConfig = {\r\n  fgsColor: '#004666',\r\n  fgsSize: 70,\r\n  fgsType: 'circle',\r\n  fgsPosition: 'center-center',\r\n  overlayColor: 'rgba(255,255,255,0.9)',\r\n  hasProgressBar: false,\r\n  textColor: '#004666',\r\n}\r\n\r\n@NgModule({\r\n  imports: [\r\n    NgxUiLoaderModule.forRoot(NGX_UI_LOADER_FX_CONFIG),\r\n  ],\r\n  declarations: [\r\n    TranslatePipeMock,\r\n    TranslateWithPluralizationPipe,\r\n    TranslateWithPluralizationPipeMock,\r\n  ],\r\n  exports: [\r\n    TranslateWithPluralizationPipe,\r\n    NgxUiLoaderModule,\r\n  ]\r\n})\r\nexport class SharedModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnDestroy, OnInit, Output, TemplateRef } from '@angular/core'\r\nimport { Subject, Subscription } from 'rxjs'\r\nimport { debounceTime, map } from 'rxjs/operators'\r\n\r\n@Component({\r\n  selector: 'app-fx-search-input',\r\n  templateUrl: './fx-search-input.component.html',\r\n  styleUrls: ['./fx-search-input.component.scss']\r\n})\r\nexport class FxSearchInputComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  public searchInputValue: string\r\n\r\n  @Input()\r\n  public searchFieldMinLength = 3\r\n\r\n  @Input()\r\n  public required = false\r\n\r\n  @Input()\r\n  public clearSearchInputWithEscape = true\r\n\r\n  @Input()\r\n  public placeholder = 'i18n.search-input.placeholder'\r\n\r\n  @Input()\r\n  public requiredAlert = 'i18n.search-input.warnings.required'\r\n\r\n  @Input()\r\n  public minLengthAlert = 'i18n.search-input.warnings.minlength'\r\n\r\n  @Input()\r\n  public autocomplete: 'off' | 'on' = 'off'\r\n\r\n  @Input()\r\n  public id = 'searchInput'\r\n\r\n  @Input()\r\n  public name = 'searchInput'\r\n\r\n  @Input()\r\n  public title = ''\r\n\r\n  @Input()\r\n  public belowSearchInputTemplate: TemplateRef<any>\r\n\r\n  @Input()\r\n  public debounceTimeInMilliseconds = 700\r\n\r\n  @Input()\r\n  public trimSearchInput = true\r\n\r\n  @Input()\r\n  public style = ''\r\n\r\n  @Output()\r\n  public searchInputChangedEvent = new EventEmitter<string>()\r\n\r\n  public searchInputChanged = new Subject<string>()\r\n\r\n  private subscription = new Subscription()\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.subscription.add(this.searchInputChanged\r\n      .pipe(\r\n        map(search => {\r\n          if (!this.trimSearchInput) {\r\n            return ({searchValue: (search && search.length < this.searchFieldMinLength) ? null : search})\r\n          }\r\n          // at least three char have been typed into the search input (or value is empty, than clear filter)\r\n          return ({searchValue: (search && search.trim().length < this.searchFieldMinLength) ? null : search})\r\n        }),\r\n        // delaying the search by x.x seconds before triggering the search API call\r\n        debounceTime(this.debounceTimeInMilliseconds),\r\n      )\r\n      .subscribe(search => this.searchInputChangedEvent.next(search.searchValue))\r\n    )\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscription.unsubscribe()\r\n  }\r\n\r\n}\r\n","import { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { NgModule } from '@angular/core'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { ContextMenuModule } from 'ngx-contextmenu'\r\nimport { SharedModule } from '../shared/shared.module'\r\nimport { FxSearchInputComponent } from './fx-search-input.component'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FxSearchInputComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ContextMenuModule,\r\n    FormsModule,\r\n    FxTranslationModule,\r\n    NgbModule,\r\n    SharedModule,\r\n  ],\r\n  exports: [\r\n    FxSearchInputComponent,\r\n  ],\r\n\r\n})\r\nexport class FxSearchInputModule {\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxBoundarySelectorComponent } from './fx-boundary-selector.component'\r\nimport { RouterModule } from '@angular/router'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { HttpClientModule } from '@angular/common/http'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faIndustry as fasIndustry } from '@fortawesome/free-solid-svg-icons/faIndustry'\r\nimport { faBox as fasBox } from '@fortawesome/free-solid-svg-icons/faBox'\r\nimport { faCar as fasCar } from '@fortawesome/free-solid-svg-icons/faCar'\r\nimport { faCopyright as farCopyright } from '@fortawesome/free-regular-svg-icons/faCopyright'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { BoundarySelectorResolver } from './services/boundary-selector-resolver.service'\r\nimport { BoundarySelectorDataService } from './services/boundary-selector-data.service'\r\nimport { BoundaryDataService } from './services/boundary-data.service'\r\nimport { FxSearchInputModule } from '../fx-search-input/fx-search-input.module'\r\n\r\nlibrary.add(fasIndustry, fasBox, fasCar, farCopyright)\r\n\r\n@NgModule({\r\n  declarations: [FxBoundarySelectorComponent],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    NgbModule,\r\n    FxTranslationModule,\r\n    FontAwesomeModule,\r\n    FxSearchInputModule\r\n  ],\r\n  providers: [\r\n    BoundarySelectorDataService,\r\n    BoundarySelectorResolver,\r\n    BoundaryDataService\r\n  ],\r\n  exports: [FxBoundarySelectorComponent]\r\n})\r\nexport class FxBoundarySelectorModule {\r\n}\r\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core'\r\nimport { DropdownItem } from './domain/dropdown-item'\r\n\r\n@Component({\r\n  selector: 'app-fx-dropdown',\r\n  templateUrl: './fx-dropdown.component.html',\r\n  styleUrls: ['./fx-dropdown.component.scss']\r\n})\r\nexport class FxDropdownComponent implements OnInit {\r\n\r\n  @Input() public options: DropdownItem[]\r\n\r\n  @Input() public placeholder?: string\r\n\r\n  @Input() public highlightActive?: boolean\r\n\r\n  @Input() public currentItem?: DropdownItem\r\n\r\n  @Input() public cssClass = ''\r\n\r\n  @Input() public filterable = false\r\n\r\n  @Output() public currentItemChange = new EventEmitter<DropdownItem>()\r\n\r\n  private filterInput: string\r\n\r\n  public ngOnInit(): void {\r\n    if (!this.placeholder && this.options[0]) {\r\n      this.currentItem = this.options[0]\r\n    }\r\n  }\r\n\r\n  public clickItem(item: DropdownItem): void {\r\n    if (item && !item.disabled) {\r\n      this.currentItem = item\r\n      if (item.onSelectAction) {\r\n        item.onSelectAction()\r\n      }\r\n      this.currentItemChange.emit(item)\r\n    }\r\n  }\r\n\r\n  public getComputedLabel(item: DropdownItem): string {\r\n    return item.label ? item.label : item.key\r\n  }\r\n\r\n  public isCurrentItem(item: DropdownItem): boolean {\r\n    return item === this.currentItem\r\n  }\r\n\r\n  public isItemHighlighted(item: DropdownItem): boolean {\r\n    return this.isCurrentItem(item) && this.highlightActive\r\n  }\r\n\r\n  public getSelectedItem(): DropdownItem {\r\n    return this.currentItem\r\n  }\r\n\r\n  public setSelectedItem(item: DropdownItem): void {\r\n    this.currentItem = item\r\n    this.currentItemChange.emit(item)\r\n  }\r\n\r\n  public setFilterText(searchString: string): void {\r\n    this.filterInput = searchString\r\n  }\r\n\r\n  public getFilteredList(entries: DropdownItem[]): any {\r\n    if (this.filterable && this.filterInput && this.filterInput.length > 0) {\r\n      return entries.filter(e => e.key.concat(e.label).toLowerCase().includes(this.filterInput.toLowerCase()))\r\n    } else {\r\n      return entries\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { FxDropdownComponent } from './fx-dropdown.component'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { FxSearchInputModule } from '../fx-search-input/fx-search-input.module'\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [FxDropdownComponent],\r\n  exports: [\r\n    FxDropdownComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NgbModule,\r\n    FxTranslationModule,\r\n    FxSearchInputModule,\r\n  ]\r\n})\r\nexport class FxDropdownModule { }\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core'\r\n\r\n@Component({\r\n  selector: 'app-fx-notification',\r\n  templateUrl: './fx-notification.component.html',\r\n  styleUrls: ['./fx-notification.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class FxNotificationComponent {\r\n\r\n  public notificationOptions: any = {\r\n    position: ['top', 'right'],\r\n    timeOut: 50000,\r\n    clickToClose: true,\r\n    showProgressBar: true,\r\n    pauseOnHover: true,\r\n    preventDuplicates: true,\r\n  }\r\n\r\n  constructor() {\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { Notification, NotificationsService, NotificationType } from 'angular2-notifications'\r\nimport { forkJoin, Observable, Observer } from 'rxjs'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { NavigationEnd, Router } from '@angular/router'\r\nimport { filter } from 'rxjs/operators'\r\n\r\nconst i18nPrefix = 'i18n.fx-components.notification.'\r\n\r\nconst configurations = {\r\n  error: {\r\n    timeOut: 5000\r\n  },\r\n  warn: {\r\n    timeOut: 5000\r\n  },\r\n  info: {\r\n    timeOut: 3000\r\n  },\r\n  success: {\r\n    timeOut: 3000\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class FxNotificationService {\r\n\r\n  public errorNotifications: Notification[] = []\r\n\r\n  constructor(private notifications: NotificationsService,\r\n    private translate: TranslateService,\r\n    router: Router) {\r\n    router.events\r\n      .pipe(\r\n        filter(event => event instanceof NavigationEnd)\r\n      )\r\n      .subscribe(() => {\r\n        this.errorNotifications.forEach((notification: Notification) =>\r\n          notifications.remove(notification.id)\r\n        )\r\n        this.errorNotifications = []\r\n      })\r\n\r\n  }\r\n\r\n  public error(messageType: string): void {\r\n    this.create(NotificationType.Error, messageType)\r\n      .subscribe((notification: Notification) =>\r\n        this.errorNotifications.push(notification)\r\n      )\r\n  }\r\n\r\n  public warn(messageType: string): void {\r\n    this.create(NotificationType.Warn, messageType).subscribe()\r\n  }\r\n\r\n  public info(messageType: string): void {\r\n    this.create(NotificationType.Info, messageType).subscribe()\r\n  }\r\n\r\n  public success(messageType: string): void {\r\n    this.create(NotificationType.Success, messageType).subscribe()\r\n  }\r\n\r\n  public httpError(statusCode: number, statusCodeDescriptionsType?: string): void {\r\n    if (!statusCodeDescriptionsType) {\r\n      statusCodeDescriptionsType = 'default'\r\n    }\r\n    const titleObservable = this.translateMessage(NotificationType.Error, 'type')\r\n    const errorMessageObservable = this.translateMessage(NotificationType.Error, 'http.' + statusCodeDescriptionsType + '.' + statusCode)\r\n    this.generateNotification(NotificationType.Error, titleObservable, errorMessageObservable).subscribe()\r\n  }\r\n\r\n  private create(type: NotificationType, messageType: string): Observable<Notification> {\r\n    const titleObservable: Observable<string> = this.translateMessage(type, messageType + '.title')\r\n    const messageObservable: Observable<string> = this.translateMessage(type, messageType + '.message')\r\n    return this.generateNotification(type, titleObservable, messageObservable)\r\n  }\r\n\r\n  private generateNotification(\r\n    type: NotificationType, titleObservable: Observable<string>, messageObservable: Observable<string>): Observable<Notification> {\r\n    return new Observable((observer: Observer<Notification>) => {\r\n\r\n      forkJoin([titleObservable, messageObservable]).subscribe((result: string[]) => {\r\n        const title: string = result[0]\r\n        const message: string = result[1]\r\n\r\n        const notification = this.notifications.create(title, message, type, configurations[type])\r\n        observer.next(notification)\r\n        observer.complete()\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n  private translateMessage(type: NotificationType, i18nMessage: string): Observable<string> {\r\n    return this.translate.get(i18nPrefix + type + '.' + i18nMessage)\r\n  }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxNotificationComponent } from './fx-notification.component'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\r\nimport { SimpleNotificationsModule } from 'angular2-notifications'\r\nimport { FxNotificationService } from './fx-notification.service'\r\n\r\n@NgModule({\r\n  declarations: [FxNotificationComponent],\r\n  exports: [\r\n    FxNotificationComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    SimpleNotificationsModule.forRoot()\r\n  ]\r\n})\r\nexport class FxNotificationModule {\r\n  public static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: FxNotificationModule,\r\n      providers: [FxNotificationService]\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { AuthenticationService } from './authentication.service'\r\n\r\n@Injectable()\r\nexport class UserService {\r\n\r\n  constructor(private authenticationService: AuthenticationService) {\r\n\r\n  }\r\n\r\n  public getUsername(): string {\r\n    const payload = this.authenticationService.getPayload()\r\n    if (payload.username) {\r\n      return payload.username.toUpperCase()\r\n    }\r\n    return ''\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, Inject, Input, OnDestroy, OnInit } from '@angular/core'\r\nimport { AuthenticationService } from '../../services/authentication.service'\r\nimport { SecurityConfig } from '../../fx-security.module'\r\nimport { Subscription } from 'rxjs'\r\nimport { SECURITY_CONFIG } from '../../domain/security-config'\r\nimport { UserService } from '../../services/user.service'\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons/faUser'\r\n\r\n@Component({\r\n  selector: 'app-fx-user-selector',\r\n  templateUrl: './fx-user-selector.component.html',\r\n  styleUrls: ['./fx-user-selector.component.scss']\r\n})\r\nexport class FxUserSelectorComponent implements OnInit, OnDestroy {\r\n\r\n  @Input()\r\n  public btnStyle = ''\r\n\r\n  @Input()\r\n  public dropDownStyling = ''\r\n\r\n  @Input()\r\n  public icon = ''\r\n\r\n  public fasUser: IconProp = faUser\r\n\r\n  public username: string\r\n\r\n  private loginSubscription: Subscription\r\n\r\n  private securityConfig: SecurityConfig\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n    private userService: UserService,\r\n    private changeDetector: ChangeDetectorRef,\r\n    @Inject(SECURITY_CONFIG) securityConfig: SecurityConfig) {\r\n    this.securityConfig = securityConfig\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.authenticationService.loginEvents.subscribe(() => {\r\n      this.username = this.userService.getUsername()\r\n      this.changeDetector.markForCheck()\r\n    })\r\n  }\r\n\r\n  public isNotLoggedIn(): boolean {\r\n    return (this.username === '')\r\n  }\r\n\r\n  public login(): void {\r\n    this.authenticationService.redirectToIdpLogin(this.securityConfig.login_redirect_url)\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.loginSubscription) {\r\n      this.loginSubscription.unsubscribe()\r\n    }\r\n  }\r\n\r\n  public setIcon(selectedIcon?: string): IconProp {\r\n    switch (selectedIcon) {\r\n      case 'fasUser': {\r\n        return this.fasUser\r\n      }\r\n      default: {\r\n        return this.fasUser\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnDestroy, OnInit } from '@angular/core'\r\nimport { Router } from '@angular/router'\r\nimport { NotificationsService } from 'angular2-notifications'\r\nimport { NEVER, Subscription } from 'rxjs'\r\nimport { catchError } from 'rxjs/operators'\r\nimport { AuthenticationService, IdpIdentityToken } from '../../services/authentication.service'\r\n\r\n@Component({\r\n  template: '',\r\n})\r\nexport class IdpLoginComponent implements OnInit, OnDestroy {\r\n\r\n  private subscription = new Subscription()\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n              private router: Router,\r\n              private notificationService: NotificationsService,\r\n  ) {\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n\r\n    this.subscription.add(this.authenticationService.loginFromUrlToken(window.location.href)\r\n      .pipe(\r\n        catchError(error => {\r\n          this.notificationService.error(error)\r\n          return NEVER\r\n        }),\r\n      )\r\n      .subscribe((identityToken: IdpIdentityToken) => {\r\n        this.router.navigateByUrl(identityToken.state)\r\n      }),\r\n    )\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscription.unsubscribe()\r\n  }\r\n\r\n}\r\n","import { Component } from '@angular/core'\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faAngry } from '@fortawesome/free-regular-svg-icons/faAngry'\r\n\r\n@Component({\r\n  selector: 'app-login-error',\r\n  templateUrl: './login-error.component.html',\r\n  styleUrls: ['./login-error.component.scss']\r\n})\r\nexport class LoginErrorComponent {\r\n\r\n  public farAngry: IconProp = faAngry\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { Component } from '@angular/core'\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons/faSignOutAlt'\r\n\r\n@Component({\r\n  selector: 'app-logged-out',\r\n  templateUrl: './logged-out.component.html',\r\n  styleUrls: ['./logged-out.component.scss']\r\n})\r\nexport class LoggedOutComponent {\r\n\r\n  public fasSignOutAlt: IconProp = faSignOutAlt\r\n\r\n  constructor() {\r\n  }\r\n\r\n}\r\n","import { ChangeDetectorRef, Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core'\r\nimport { Subscription } from 'rxjs'\r\nimport { AuthenticationService } from '../services/authentication.service'\r\n\r\n@Directive({\r\n  selector: '[appIsLoggedIn]'\r\n})\r\nexport class IsLoggedInDirective implements OnDestroy {\r\n\r\n  private _context: IsLoggedInContext = new IsLoggedInContext()\r\n  private _thenTemplateRef: TemplateRef<IsLoggedInContext> | null = null\r\n  private _elseTemplateRef: TemplateRef<IsLoggedInContext> | null = null\r\n  private _thenViewRef: EmbeddedViewRef<IsLoggedInContext> | null = null\r\n  private _elseViewRef: EmbeddedViewRef<IsLoggedInContext> | null = null\r\n\r\n  private loginEventsSubscription: Subscription\r\n\r\n  constructor(private authService: AuthenticationService,\r\n    private _viewContainer: ViewContainerRef,\r\n    templateRef: TemplateRef<IsLoggedInContext>,\r\n    private changeDetector: ChangeDetectorRef) {\r\n    this._thenTemplateRef = templateRef\r\n\r\n    this.loginEventsSubscription = authService.loginEvents.subscribe(() => {\r\n      this._updateView()\r\n      this.changeDetector.markForCheck()\r\n    })\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.loginEventsSubscription) {\r\n      this.loginEventsSubscription.unsubscribe()\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set hasRole(condition: any) {\r\n    this._context.$implicit = condition\r\n    this._updateView()\r\n  }\r\n\r\n  @Input()\r\n  set hasRoleThen(templateRef: TemplateRef<IsLoggedInContext>) {\r\n    this._thenTemplateRef = templateRef\r\n    this._thenViewRef = null  // clear previous view if any.\r\n    this._updateView()\r\n  }\r\n\r\n  @Input()\r\n  set hasRoleElse(templateRef: TemplateRef<IsLoggedInContext>) {\r\n    this._elseTemplateRef = templateRef\r\n    this._elseViewRef = null  // clear previous view if any.\r\n    this._updateView()\r\n  }\r\n\r\n  private _updateView(): void {\r\n    if (this.authService.isLoggedIn) {\r\n      if (!this._thenViewRef) {\r\n        this._viewContainer.clear()\r\n        this._elseViewRef = null\r\n        if (this._thenTemplateRef) {\r\n          this._thenViewRef =\r\n            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context)\r\n        }\r\n      }\r\n    } else {\r\n      if (!this._elseViewRef) {\r\n        this._viewContainer.clear()\r\n        this._thenViewRef = null\r\n        if (this._elseTemplateRef) {\r\n          this._elseViewRef =\r\n            this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class IsLoggedInContext {\r\n  public $implicit = null\r\n}\r\n","import { ChangeDetectorRef, Directive, EmbeddedViewRef, Input, OnDestroy, TemplateRef, ViewContainerRef } from '@angular/core'\r\nimport { Subscription } from 'rxjs'\r\nimport { AuthenticationService } from '../services/authentication.service'\r\nimport { AuthorizationService } from '../services/authorization.service'\r\n\r\n@Directive({\r\n  selector: '[appHasRole]'\r\n})\r\nexport class HasRoleDirective implements OnDestroy {\r\n\r\n  private _context: HasRoleContext = new HasRoleContext()\r\n  private _thenTemplateRef: TemplateRef<HasRoleContext> | null = null\r\n  private _elseTemplateRef: TemplateRef<HasRoleContext> | null = null\r\n  private _thenViewRef: EmbeddedViewRef<HasRoleContext> | null = null\r\n  private _elseViewRef: EmbeddedViewRef<HasRoleContext> | null = null\r\n\r\n  private loginEventsSubscription: Subscription\r\n\r\n  constructor(private _viewContainer: ViewContainerRef,\r\n    templateRef: TemplateRef<HasRoleContext>,\r\n    authService: AuthenticationService,\r\n    private authorizationService: AuthorizationService,\r\n    private changeDetector: ChangeDetectorRef) {\r\n    this._thenTemplateRef = templateRef\r\n\r\n    this.loginEventsSubscription = authService.loginEvents.subscribe(() => {\r\n      this._updateView()\r\n      this.changeDetector.markForCheck()\r\n    })\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.loginEventsSubscription) {\r\n      this.loginEventsSubscription.unsubscribe()\r\n    }\r\n  }\r\n\r\n  @Input()\r\n  set hasRole(condition: any) {\r\n    this._context.$implicit = this._context.hasRole = condition\r\n    this._updateView()\r\n  }\r\n\r\n  @Input()\r\n  set hasRoleFactory(value: string) {\r\n    this._context.factory = value\r\n    this._updateView()\r\n  }\r\n\r\n  @Input()\r\n  set hasRoleThen(templateRef: TemplateRef<HasRoleContext>) {\r\n    this._thenTemplateRef = templateRef\r\n    this._thenViewRef = null  // clear previous view if any.\r\n    this._updateView()\r\n  }\r\n\r\n  @Input()\r\n  set hasRoleElse(templateRef: TemplateRef<HasRoleContext>) {\r\n    this._elseTemplateRef = templateRef\r\n    this._elseViewRef = null  // clear previous view if any.\r\n    this._updateView()\r\n  }\r\n\r\n  private _updateView(): void {\r\n    let hasRole = false\r\n    if (this._context && this._context.$implicit) {\r\n      if (typeof this._context.factory === 'string' && this._context.factory.length > 0) {\r\n        hasRole = this.authorizationService.hasRoleForBoundary(this._context.$implicit, this._context.factory)\r\n      } else {\r\n        hasRole = this._context && this._context.$implicit && this.authorizationService.hasRole(this._context.$implicit)\r\n      }\r\n    }\r\n    if (hasRole) {\r\n      if (!this._thenViewRef) {\r\n        this._viewContainer.clear()\r\n        this._elseViewRef = null\r\n        if (this._thenTemplateRef) {\r\n          this._thenViewRef =\r\n            this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context)\r\n        }\r\n      }\r\n    } else {\r\n      if (!this._elseViewRef) {\r\n        this._viewContainer.clear()\r\n        this._thenViewRef = null\r\n        if (this._elseTemplateRef) {\r\n          this._elseViewRef =\r\n            this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport class HasRoleContext {\r\n  public $implicit = null\r\n  public hasRole = null\r\n  public factory: string = null\r\n}\r\n","import { Directive, HostListener } from '@angular/core'\r\nimport { AuthenticationService } from '../services/authentication.service'\r\n\r\n@Directive({\r\n  selector: '[appLogout]'\r\n})\r\nexport class LogoutDirective {\r\n\r\n  constructor(private authService: AuthenticationService) {\r\n\r\n  }\r\n\r\n  @HostListener('click')\r\n  public logout(): void {\r\n    this.authService.logout()\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { ActivatedRouteSnapshot, CanActivate, Data, ParamMap, Router, RouterStateSnapshot } from '@angular/router'\r\nimport { AuthenticationService } from '../services/authentication.service'\r\nimport { AuthorizationService } from '../services/authorization.service'\r\n\r\nconst NO_PERMISSION_ROUTE = 'no-permission'\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n              private authorizationService: AuthorizationService,\r\n              private router: Router) {\r\n  }\r\n\r\n  public canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    return this.checkLogin(state.url) && this.checkRoles(route.data) && this.checkBoundaryValue(route.data, route.paramMap)\r\n  }\r\n\r\n  private checkLogin(url: string): boolean {\r\n    if (this.authenticationService.isLoggedIn) {\r\n      return true\r\n    }\r\n    this.authenticationService.redirectToIdpLogin(url)\r\n\r\n    return false\r\n  }\r\n\r\n  private checkBoundaryValue(data: Data, paramMap: ParamMap): boolean {\r\n    let hasPermission = false\r\n\r\n    if (!data || !data.boundaryParamName) {\r\n      return true\r\n    }\r\n\r\n    if (this.authorizationService.hasDevopsRole()) {\r\n      return true\r\n    }\r\n\r\n    this.authenticationService.getPayload().roles.forEach(role => {\r\n      if (this.authorizationService.hasRoleForBoundary(role.role, paramMap.get(data.boundaryParamName))) {\r\n        hasPermission = true\r\n        return\r\n      }\r\n    })\r\n\r\n    if (!hasPermission) {\r\n      this.router.navigateByUrl(NO_PERMISSION_ROUTE)\r\n    }\r\n\r\n    return hasPermission\r\n  }\r\n\r\n  private checkRoles(data: Data): boolean {\r\n    let hasPermission = false\r\n\r\n    if (!data || !data.roles) {\r\n      return true\r\n    }\r\n\r\n    data.roles.forEach(role => {\r\n      const requiredRoleName = role\r\n\r\n      const hasRole = this.authorizationService.hasRole(requiredRoleName)\r\n      if (hasRole) {\r\n        hasPermission = true\r\n        return\r\n      }\r\n    })\r\n\r\n    if (!hasPermission) {\r\n      this.router.navigateByUrl(NO_PERMISSION_ROUTE)\r\n    }\r\n\r\n    return hasPermission\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { ActivatedRouteSnapshot, CanActivate, Router } from '@angular/router'\r\nimport { AuthenticationService } from '../services/authentication.service'\r\n\r\n@Injectable()\r\nexport class NotLoggedInAuthGuard implements CanActivate {\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n              private router: Router) {\r\n  }\r\n\r\n  public canActivate(route: ActivatedRouteSnapshot): boolean {\r\n    if (this.authenticationService.isLoggedIn) {\r\n      if (route.data && route.data.redirectTo) {\r\n        this.router.navigateByUrl(route.data.redirectTo)\r\n      } else {\r\n        this.router.navigateByUrl('/')\r\n      }\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n}\r\n","import { Injectable, Injector } from '@angular/core'\r\nimport { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http'\r\nimport { Observable } from 'rxjs'\r\nimport { AuthenticationService } from './authentication.service'\r\n\r\n@Injectable()\r\nexport class AuthenticatingInterceptorService implements HttpInterceptor {\r\n\r\n  constructor(private injector: Injector) { }\r\n\r\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const authenticationService: AuthenticationService = this.injector.get(AuthenticationService)\r\n    let newRequest = request\r\n    if (authenticationService.isLoggedIn) {\r\n      newRequest = request.clone({\r\n        setHeaders: {\r\n          Authorization: authenticationService.getAuthTokenHeaderString()\r\n        }\r\n      })\r\n    } else {\r\n      newRequest = request\r\n    }\r\n    return next.handle(newRequest)\r\n  }\r\n\r\n}\r\n","import { ChangeDetectorRef, Component, Input, OnDestroy, OnInit } from '@angular/core'\r\nimport { Subscription } from 'rxjs'\r\nimport { AuthenticationService } from '../../services/authentication.service'\r\nimport { UserService } from '../../services/user.service'\r\nimport { IconProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons/faUser'\r\n\r\n@Component({\r\n  selector: 'app-fx-login',\r\n  templateUrl: './fx-login.component.html',\r\n  styleUrls: ['./fx-login.component.scss'],\r\n})\r\nexport class FxLoginComponent implements OnInit, OnDestroy {\r\n\r\n  @Input()\r\n  public btnStyle = ''\r\n\r\n  @Input()\r\n  public dropDownStyling = ''\r\n\r\n  @Input()\r\n  public languageSelectorRadioGroupStyling = 'fx-styling'\r\n\r\n  @Input()\r\n  public icon = 'fa-user'\r\n\r\n  public fasUser: IconProp = faUser\r\n\r\n  public username: string\r\n\r\n  private subscriptions: Subscription = new Subscription()\r\n\r\n  constructor(private authenticationService: AuthenticationService,\r\n              private userService: UserService,\r\n              private changeDetector: ChangeDetectorRef) {\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.subscriptions.add(this.authenticationService.loginEvents.subscribe(() => {\r\n      this.username = this.userService.getUsername()\r\n      this.changeDetector.markForCheck()\r\n    }))\r\n  }\r\n\r\n  public isNotLoggedIn(): boolean {\r\n    return !this.username || this.username.trim().length === 0\r\n  }\r\n\r\n  public login(): void {\r\n    this.authenticationService.loginWithRedirectUrl()\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe()\r\n  }\r\n\r\n  public setIcon(selectedIcon?: string): IconProp {\r\n    switch (selectedIcon) {\r\n      case 'fasUser': {\r\n        return this.fasUser\r\n      }\r\n      default: {\r\n        return this.fasUser\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core'\r\nimport { Router } from '@angular/router'\r\nimport { SecurityConfig } from '../../fx-security.module'\r\nimport { SECURITY_CONFIG } from '../../domain/security-config'\r\n\r\n@Component({\r\n    selector: 'app-no-permissions',\r\n    templateUrl: './no-permissions.component.html',\r\n    styleUrls: ['./no-permissions.component.scss']\r\n})\r\nexport class NoPermissionsComponent implements OnInit {\r\n\r\n    public ursLink: string\r\n    protected securityConfig: SecurityConfig\r\n\r\n    constructor(private router: Router, @Inject(SECURITY_CONFIG) securityConfig: SecurityConfig) {\r\n        this.securityConfig = securityConfig\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        this.ursLink = this.securityConfig.authorization_ui_url\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxUserSelectorComponent } from './components/fx-user-selector/fx-user-selector.component'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { IdpLoginComponent } from './components/idp-login/idp-login.component'\r\nimport { LoginErrorComponent } from './components/login-error/login-error.component'\r\nimport { LoggedOutComponent } from './components/logged-out/logged-out.component'\r\nimport { IsLoggedInDirective } from './directives/is-logged-in.directive'\r\nimport { HasRoleDirective } from './directives/has-role.directive'\r\nimport { LogoutDirective } from './directives/logout.directive'\r\nimport { AuthGuard } from './guards/auth-guard.service'\r\nimport { AuthenticationService } from './services/authentication.service'\r\nimport { NotLoggedInAuthGuard } from './guards/not-logged-in-auth-guard.service'\r\nimport { RedirectorService } from './services/redirector.service'\r\nimport { AuthenticatingInterceptorService } from './services/authenticating-interceptor.service'\r\nimport { HTTP_INTERCEPTORS } from '@angular/common/http'\r\nimport { SECURITY_CONFIG } from './domain/security-config'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faSignOutAlt as fasSignOutAlt } from '@fortawesome/free-solid-svg-icons/faSignOutAlt'\r\nimport { faBan as fasBan } from '@fortawesome/free-solid-svg-icons/faBan'\r\nimport { faAngry as farAngry } from '@fortawesome/free-regular-svg-icons/faAngry'\r\nimport { faExclamation as fasExclamation } from '@fortawesome/free-solid-svg-icons/faExclamation'\r\nimport { faUser as fasUser } from '@fortawesome/free-solid-svg-icons/faUser'\r\nimport { AuthorizationService } from './services/authorization.service'\r\nimport { LoginService } from './services/login.service'\r\nimport { UserService } from './services/user.service'\r\nimport { FxLoginComponent } from './components/fx-login/fx-login.component'\r\nimport { NoPermissionsComponent } from './components/no-permissions/no-permissions.component'\r\n\r\nlibrary.add(fasUser, fasSignOutAlt, fasBan, farAngry, fasExclamation)\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FxUserSelectorComponent,\r\n    IdpLoginComponent,\r\n    LoginErrorComponent,\r\n    LoggedOutComponent,\r\n    NoPermissionsComponent,\r\n    IsLoggedInDirective,\r\n    HasRoleDirective,\r\n    LogoutDirective,\r\n    FxLoginComponent\r\n  ],\r\n  providers: [\r\n    AuthGuard,\r\n    NotLoggedInAuthGuard,\r\n    AuthenticationService,\r\n    AuthorizationService,\r\n    RedirectorService,\r\n    LoginService,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthenticatingInterceptorService,\r\n      multi: true\r\n    },\r\n    UserService\r\n  ],\r\n  exports: [\r\n    FxUserSelectorComponent,\r\n    FxLoginComponent,\r\n    IdpLoginComponent,\r\n    IsLoggedInDirective,\r\n    HasRoleDirective,\r\n    LogoutDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FxTranslationModule,\r\n    NgbDropdownModule,\r\n    FontAwesomeModule\r\n  ]\r\n})\r\nexport class FxSecurityModule {\r\n  public static forRoot(securityConfig: SecurityConfig): any {\r\n    return {\r\n      ngModule: FxSecurityModule,\r\n      providers: [{\r\n        provide: SECURITY_CONFIG,\r\n        useValue: securityConfig\r\n      },\r\n        AuthenticationService,\r\n        AuthorizationService,\r\n        LoginService,\r\n        UserService\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nexport interface SecurityConfig {\r\n  authorization_service_url: string\r\n  authorization_ui_url: string\r\n  app_name: string\r\n  app_domain: string\r\n  idp_base_url: string\r\n  client_id: string\r\n  login_redirect_url: string\r\n  logout_redirect_url: string\r\n  roles: {\r\n    view: string[],\r\n    edit: string[],\r\n    devops: string[]\r\n  }\r\n  boundary_name: string\r\n}\r\n","import { Component, Input } from '@angular/core'\r\n\r\nexport interface ConfidentialityLogo {\r\n  type: string\r\n  path: string\r\n}\r\n\r\n@Component({\r\n  selector: 'app-fx-confidentiality-logo',\r\n  templateUrl: './fx-confidentiality-logo.component.html',\r\n  styleUrls: ['./fx-confidentiality-logo.component.scss']\r\n})\r\nexport class FxConfidentialityLogoComponent {\r\n\r\n  public readonly confidentialityLogo: ConfidentialityLogo[] = [\r\n    {type: 'public', path: '/assets/images/confidentiality_logos/VWAG_Public.svg'},\r\n    {type: 'public_scaled', path: '/assets/images/confidentiality_logos/VWAG_Public_scaled.svg'},\r\n    {type: 'internal', path: '/assets/images/confidentiality_logos/VWAG_Internal.svg'},\r\n    {type: 'internal_scaled', path: '/assets/images/confidentiality_logos/VWAG_Internal_scaled.svg'},\r\n    {type: 'confidential', path: '/assets/images/confidentiality_logos/VWAG_Confidential.svg'},\r\n    {type: 'confidential_scaled', path: '/assets/images/confidentiality_logos/VWAG_Confidential_scaled.svg'},\r\n    {type: 'secret', path: '/assets/images/confidentiality_logos/VWAG_Secret.svg'},\r\n    {type: 'secret_scaled', path: '/assets/images/confidentiality_logos/VWAG_Secret_scaled.svg'},\r\n  ]\r\n\r\n  @Input()\r\n  public logoType = 'internal'\r\n\r\n  @Input()\r\n  public logoHeight = 60\r\n\r\n  @Input()\r\n  public logoColor: string\r\n\r\n  constructor() { }\r\n\r\n  public getPath(): string {\r\n    return this.confidentialityLogo.find(logo => logo.type === this.logoType).path\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxConfidentialityLogoComponent } from './fx-confidentiality-logo.component'\r\n\r\n\r\n@NgModule({\r\n  declarations: [FxConfidentialityLogoComponent],\r\n  exports: [\r\n    FxConfidentialityLogoComponent\r\n  ],\r\n  imports: [\r\n    CommonModule\r\n  ]\r\n})\r\nexport class FxConfidentialityLogoModule { }\r\n","export class RoutingPathResource {\r\n  public regex: RegExp\r\n  public url: string\r\n\r\n  constructor(regex: RegExp, url: string) {\r\n    this.regex = regex\r\n    this.url = url\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core'\r\nimport { ActivatedRoute, UrlSegment } from '@angular/router'\r\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faQuestionCircle as farQuestionCircle } from '@fortawesome/free-regular-svg-icons/faQuestionCircle'\r\nimport { faQuestion } from '@fortawesome/free-solid-svg-icons'\r\nimport { faQuestionCircle as fasQuestionCircle } from '@fortawesome/free-solid-svg-icons/faQuestionCircle'\r\nimport { RoutingPathResource } from './domain/routing-path-resource'\r\n\r\n@Component({\r\n  selector: 'app-fx-wiki',\r\n  templateUrl: './fx-wiki.component.html',\r\n  styleUrls: ['./fx-wiki.component.scss'],\r\n})\r\nexport class FxWikiComponent implements OnInit {\r\n\r\n  public fasQuestion: IconProp = faQuestion\r\n  public fasQuestionCircle: IconProp = fasQuestionCircle\r\n  public farQuestionCircle: IconProp = farQuestionCircle\r\n\r\n  @Input()\r\n  public icon = 'farQuestionCircle'\r\n\r\n  @Input()\r\n  public color = 'black'\r\n\r\n  @Input()\r\n  public size: SizeProp = '2x'\r\n\r\n  public defaultRoutingPath = new RoutingPathResource(RegExp(''), 'https://soco.volkswagen.com/wikis/')\r\n\r\n  @Input()\r\n  public routingPathArray: RoutingPathResource[]\r\n\r\n  public wikiUrl: string\r\n\r\n  constructor(private activatedRoute: ActivatedRoute) {\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.activatedRoute.url.subscribe(url => this.wikiUrl = this.getRouteFromRegex(url))\r\n  }\r\n\r\n  public setIcon(selectedIcon?: string): IconProp {\r\n    switch (selectedIcon) {\r\n      case 'fasQuestion': {\r\n        return this.fasQuestion\r\n      }\r\n      case 'farQuestionCircle': {\r\n        return this.farQuestionCircle\r\n      }\r\n      case 'fasQuestionCircle': {\r\n        return this.fasQuestionCircle\r\n      }\r\n      default: {\r\n        return this.farQuestionCircle\r\n      }\r\n    }\r\n  }\r\n\r\n  public setIconColor(): { color: string } {\r\n    return {color: this.color}\r\n  }\r\n\r\n  private getRouteFromRegex(urlArray: UrlSegment[]): string {\r\n    const url = urlArray.join('/')\r\n    if (this.routingPathArray) {\r\n      for (const routingPath of this.routingPathArray) {\r\n        if (url.match(routingPath.regex)) {\r\n          return routingPath.url\r\n        }\r\n      }\r\n    }\r\n    return this.defaultRoutingPath.url\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxWikiComponent } from './fx-wiki.component'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faQuestionCircle as fasQuestionCircle } from '@fortawesome/free-solid-svg-icons/faQuestionCircle'\r\nimport { faQuestionCircle as farQuestionCircle } from '@fortawesome/free-regular-svg-icons/faQuestionCircle'\r\nimport { faQuestion as fasQuestion } from '@fortawesome/free-solid-svg-icons/faQuestion'\r\n\r\nlibrary.add(fasQuestionCircle, farQuestionCircle, fasQuestion)\r\n\r\n@NgModule({\r\n  declarations: [FxWikiComponent],\r\n  exports: [\r\n    FxWikiComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    FontAwesomeModule\r\n  ]\r\n})\r\nexport class FxWikiModule {\r\n}\r\n\r\n","export class WeekResource {\r\n  constructor(public year: number, public week: number) {}\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core'\r\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faCalendar as farCalendar } from '@fortawesome/free-regular-svg-icons/faCalendar'\r\nimport { faCalendarAlt as farCalendarAlt } from '@fortawesome/free-regular-svg-icons/faCalendarAlt'\r\nimport { faCalendar as fasCalendar } from '@fortawesome/free-solid-svg-icons/faCalendar'\r\nimport { faCalendarAlt as fasCalendarAlt } from '@fortawesome/free-solid-svg-icons/faCalendarAlt'\r\nimport { faCalendarWeek } from '@fortawesome/free-solid-svg-icons/faCalendarWeek'\r\nimport { NgbCalendar, NgbDate } from '@ng-bootstrap/ng-bootstrap'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport * as moment_ from 'moment'\r\nimport { delay, tap } from 'rxjs/operators'\r\nimport { WeekResource } from './domain/week-resource'\r\n\r\nconst DATE_FORMAT = 'YYYY-MM-DD'\r\nconst WEEK_START = 1\r\nconst moment = moment_\r\n\r\n@Component({\r\n  selector: 'app-fx-week-selector',\r\n  templateUrl: './fx-week-selector.component.html',\r\n  styleUrls: ['./fx-week-selector.component.scss'],\r\n})\r\nexport class FxWeekSelectorComponent implements OnInit, OnChanges {\r\n\r\n  public fasCalendarWeek: IconProp = faCalendarWeek\r\n  public fasCalendarAlt: IconProp = fasCalendarAlt\r\n  public farCalendarAlt: IconProp = farCalendarAlt\r\n  public fasCalendar: IconProp = fasCalendar\r\n  public farCalendar: IconProp = farCalendar\r\n\r\n  @Input()\r\n  public icon = 'fasCalendarWeek'\r\n\r\n  @Input()\r\n  public colorIcon = 'black'\r\n\r\n  @Input()\r\n  public sizeIcon: SizeProp = '1x'\r\n\r\n  @Input()\r\n  public btnStyle = ''\r\n\r\n  @Input()\r\n  public selectorStyling = ''\r\n\r\n  @Input()\r\n  public displayMonth = '2'\r\n\r\n  @Input()\r\n  public initDate: NgbDate\r\n\r\n  @Input()\r\n  public minDate: NgbDate\r\n\r\n  @Input()\r\n  public maxDate: NgbDate\r\n\r\n  @Output()\r\n  public selectionEvent: EventEmitter<WeekResource>\r\n\r\n  @Input()\r\n  public displayString: string\r\n\r\n  public visible = false\r\n\r\n  public disable = true\r\n\r\n  public hoverDate: NgbDate\r\n  public selectedDate: NgbDate\r\n  public hoveredWeekNr: number\r\n  public selectedWeekNr: number\r\n  public showNavigation = true\r\n\r\n\r\n  constructor(private calendar: NgbCalendar, private translateService: TranslateService) {\r\n\r\n    this.selectionEvent = new EventEmitter<WeekResource>()\r\n\r\n    // workaround for translation. Update the navigation component to load the new language immediately\r\n    this.translateService.onLangChange.pipe(\r\n      tap(() => this.showNavigation = false),\r\n    ).pipe(\r\n      delay(1),\r\n      tap(() => this.showNavigation = true),\r\n    ).subscribe()\r\n  }\r\n\r\n  public closeDatePicker(): void {\r\n    this.visible = false\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    if (!this.initDate) {\r\n      return\r\n    }\r\n    this.disable = !this.displayString || this.displayString === ''\r\n    this.selectedDate = this.initDate\r\n  }\r\n\r\n  public ngOnChanges(data: SimpleChanges): void {\r\n    // FIXME: data should be checked, if its the correct property\r\n    this.selectedDate = this.initDate\r\n    this.selectedWeekNr = this.returnWeekNr(this.initDate)\r\n    this.isInsideWeekSelection(this.selectedDate)\r\n  }\r\n\r\n  public isInsideWeekSelection(date: NgbDate): boolean {\r\n    const weekNr = this.returnWeekNr(date)\r\n    return this.selectedWeekNr === weekNr\r\n  }\r\n\r\n  public selectedWeekOfYear(): WeekResource {\r\n    return new WeekResource(this.selectedDate.year, this.returnWeekNr(this.selectedDate))\r\n  }\r\n\r\n  public isInsideWeekHovered(date: NgbDate): boolean {\r\n    const weekNr = this.returnWeekNr(date)\r\n    return this.hoveredWeekNr === weekNr\r\n  }\r\n\r\n  public onHover(date: NgbDate): void {\r\n    this.hoverDate = date\r\n    this.hoveredWeekNr = this.returnWeekNr(date)\r\n  }\r\n\r\n  public onDateSelection(date: NgbDate): void {\r\n    this.selectedDate = date\r\n    this.selectedWeekNr = this.returnWeekNr(date)\r\n    this.closeDatePicker()\r\n    this.selectionEvent.emit(new WeekResource(this.returnWeekYear(date), this.selectedWeekNr))\r\n  }\r\n\r\n  public returnWeekNr(date: NgbDate): number {\r\n    moment.locale('de')\r\n    return moment(`${date.year}-${date.month}-${date.day}`, DATE_FORMAT).isoWeekday(WEEK_START).week()\r\n  }\r\n\r\n  public returnWeekYear(date: NgbDate): number {\r\n    moment.locale('de')\r\n    return moment(`${date.year}-${date.month}-${date.day}`, DATE_FORMAT).isoWeekday(WEEK_START).weekYear()\r\n  }\r\n\r\n  public setIcon(selectedIcon?: string): IconProp {\r\n    switch (selectedIcon) {\r\n      case 'fasCalendarAlt': {\r\n        return this.fasCalendarAlt\r\n      }\r\n      case 'farCalendarAlt': {\r\n        return this.farCalendarAlt\r\n      }\r\n      case 'fasCalendar': {\r\n        return this.fasCalendar\r\n      }\r\n      case 'farCalendar': {\r\n        return this.farCalendar\r\n      }\r\n      default: {\r\n        return this.fasCalendarWeek\r\n      }\r\n    }\r\n  }\r\n\r\n  public setIconColor(): { colorIcon: string } {\r\n    return {colorIcon: this.colorIcon}\r\n  }\r\n\r\n  public isDisabled = (date: NgbDate) => this.isDayDisabled(date)\r\n\r\n  public isDayDisabled(date: NgbDate): boolean {\r\n    return date.before(this.minDate) || date.after(this.maxDate)\r\n  }\r\n\r\n  public isToday(date: NgbDate): boolean {\r\n    const weekNr = this.returnWeekNr(date)\r\n    const calendarWeekNr = this.returnWeekNr(this.calendar.getToday())\r\n    const weekYear = this.returnWeekYear(date)\r\n    const calendarWeekYear = this.returnWeekYear(this.calendar.getToday())\r\n    return weekYear === calendarWeekYear && weekNr === calendarWeekNr\r\n      && !this.isInsideWeekSelection(date) && !this.isInsideWeekHovered(date)\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { NgbDatepickerI18n, NgbDateStruct } from '@ng-bootstrap/ng-bootstrap'\r\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core'\r\n\r\n\r\nconst I18N_VALUES = {\r\n  de: {\r\n    weekdays: ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'],\r\n    months_long: ['Januar', 'Februar', 'MÃ¤rz', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],\r\n    months_short: ['Jan', 'Feb', 'MÃ¤r', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],\r\n  },\r\n  en: {\r\n    weekdays: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\r\n    months_long: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\r\n    months_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dez'],\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class I18n {\r\n  public language = 'en'\r\n\r\n  constructor(private translateService: TranslateService) {\r\n    translateService.onLangChange.subscribe( (langChangeEvent: LangChangeEvent) => {\r\n      this.language = langChangeEvent.lang\r\n    })\r\n  }\r\n}\r\n\r\n@Injectable()\r\nexport class FxWeekSelectorI18n extends NgbDatepickerI18n {\r\n\r\n  constructor(private i18n: I18n) {\r\n    super()\r\n  }\r\n\r\n  public getDayAriaLabel(date: NgbDateStruct): string {\r\n    return `${date.year}-${date.month}-${date.day}`\r\n  }\r\n\r\n  public getMonthFullName(month: number): string {\r\n    return I18N_VALUES[this.i18n.language].months_long[month - 1]\r\n  }\r\n\r\n  public getMonthShortName(month: number): string {\r\n    return this.getMonthFullName(month)\r\n  }\r\n\r\n  public getWeekdayShortName(weekday: number): string {\r\n    return I18N_VALUES[this.i18n.language].weekdays[weekday - 1]\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxWeekSelectorComponent } from './fx-week-selector.component'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { NgbDatepickerI18n, NgbDatepickerModule, NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faCalendarWeek as fasCalendarWeek } from '@fortawesome/free-solid-svg-icons/faCalendarWeek'\r\nimport { faCalendarAlt as fasCalendarAlt } from '@fortawesome/free-solid-svg-icons/faCalendarAlt'\r\nimport { faCalendarAlt as farCalendarAlt } from '@fortawesome/free-regular-svg-icons/faCalendarAlt'\r\nimport { faCalendar as fasCalendar } from '@fortawesome/free-solid-svg-icons/faCalendar'\r\nimport { faCalendar as farCalendar } from '@fortawesome/free-regular-svg-icons/faCalendar'\r\nimport { FxWeekSelectorI18n, I18n } from './fx-week-selector-i18n'\r\nimport { ClickOutsideModule } from 'ng-click-outside'\r\n\r\nlibrary.add(fasCalendarWeek, fasCalendarAlt, farCalendarAlt, fasCalendar, farCalendar)\r\n\r\n@NgModule({\r\n  declarations: [FxWeekSelectorComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FxTranslationModule,\r\n    NgbDatepickerModule,\r\n    FontAwesomeModule,\r\n    ClickOutsideModule,\r\n    NgbTooltipModule\r\n  ],\r\n  exports: [\r\n    FxWeekSelectorComponent\r\n  ],\r\n  providers: [I18n, { provide: NgbDatepickerI18n, useClass: FxWeekSelectorI18n }]\r\n})\r\nexport class FxWeekSelectorModule { }\r\n","import { Injectable } from '@angular/core'\r\nimport { FxHeaderConfigModel } from '../models/config/fx-header-config.model'\r\nimport { FxHeaderComponentConfigModel } from '../models/config/fx-header-component-config.model'\r\n\r\n@Injectable()\r\nexport class FxHeaderConfigValidatorService {\r\n\r\n    constructor() { }\r\n\r\n    public validate(config: FxHeaderConfigModel): boolean {\r\n        if (!config.components) {\r\n            return true\r\n        }\r\n\r\n        return this.checkForUniqueEventNames(config.components)\r\n    }\r\n\r\n    private checkForUniqueEventNames(components: FxHeaderComponentConfigModel[]): boolean {\r\n        let isUnique = true\r\n        const eventNames: string[] = []\r\n\r\n        components.forEach(component => {\r\n            if (!component.config || !component.config.outputEvents || !isUnique) {\r\n                return\r\n            }\r\n\r\n            component.config.outputEvents.forEach(outputEvent => {\r\n                if (eventNames.some(x => x === outputEvent)) {\r\n                    console.error('the fx-header config contains duplicate event names (' + outputEvent + '). all event names need to be unique.')\r\n                    isUnique = false\r\n                }\r\n\r\n                eventNames.push(outputEvent)\r\n            })\r\n        })\r\n\r\n        return isUnique\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { Subject, BehaviorSubject } from 'rxjs'\r\nimport { FxHeaderConfigValidatorService } from './fx-header-config-validator.service'\r\nimport { FxHeaderConfigModel } from '../models/config/fx-header-config.model'\r\n\r\n@Injectable()\r\nexport class FxHeaderConfigService {\r\n\r\n    public config: Subject<FxHeaderConfigModel> = new BehaviorSubject<FxHeaderConfigModel>({\r\n        appTitleShort: '',\r\n        appTitle: '',\r\n        routes: [],\r\n        staticComponents: [],\r\n        components: []\r\n    })\r\n\r\n    constructor(private fxheaderConfigValidatorService: FxHeaderConfigValidatorService) { }\r\n\r\n    public setConfig(config: FxHeaderConfigModel): void {\r\n        if (!this.fxheaderConfigValidatorService.validate(config)) {\r\n            return\r\n        }\r\n\r\n        this.config.next(config)\r\n    }\r\n\r\n}\r\n","import { Component, Input } from '@angular/core'\r\n\r\n@Component({\r\n    selector: 'app-fx-header-app-specific-text',\r\n    templateUrl: './fx-header-app-specific-text.component.html',\r\n    styleUrls: ['./fx-header-app-specific-text.component.scss']\r\n})\r\nexport class FxHeaderAppSpecificTextComponent {\r\n\r\n    @Input()\r\n    public text = ''\r\n\r\n    constructor() {\r\n    }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    ComponentFactoryResolver,\r\n    ViewChild,\r\n    ViewContainerRef,\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Output,\r\n    EventEmitter,\r\n    Input,\r\n    HostListener,\r\n    ElementRef,\r\n    OnDestroy\r\n} from '@angular/core'\r\nimport { FxHeaderEvent } from './models/fx-header-event'\r\nimport { FxHeaderConfigService } from './services/fx-header-config.service'\r\nimport { FxHeaderRouteConfigModel } from './models/config/fx-header-route-config.model'\r\nimport { FxHeaderComponentConfigModel } from './models/config/fx-header-component-config.model'\r\nimport { FxHeaderConfigModel } from './models/config/fx-header-config.model'\r\nimport { Subscription, of } from 'rxjs'\r\nimport { FxHeaderAppSpecificComponentConfigModel } from './models/config/fx-header-app-specific-component-config.model'\r\nimport { FxHeaderAppSpecificTextComponent } from './components/fx-header-app-specific-text.component'\r\n\r\n@Component({\r\n    selector: 'app-fx-header',\r\n    templateUrl: './fx-header.component.html',\r\n    styleUrls: ['./fx-header.component.scss']\r\n})\r\nexport class FxHeaderComponent implements AfterViewInit, OnDestroy {\r\n\r\n    @ViewChild('appSpecificComponentsContainer', { read: ViewContainerRef, static: false })\r\n    public appSpecificComponentsContainer: ViewContainerRef\r\n\r\n    @ViewChild('staticComponentsContainer', { read: ViewContainerRef, static: false })\r\n    public staticComponentsContainer: ViewContainerRef\r\n\r\n    @ViewChild('componentsContainer', { read: ViewContainerRef, static: false })\r\n    public componentsContainer: ViewContainerRef\r\n\r\n\r\n    @Input()\r\n    public navbarStyling = 'fx-styling'\r\n    @Output()\r\n    public componentEvents = new EventEmitter<FxHeaderEvent>()\r\n\r\n    public logoPath = '/assets/images/fx_logos/FX_Logo_White.png'\r\n    public appTitleShort: string\r\n    public appTitle: string\r\n    public routes: FxHeaderRouteConfigModel[] = []\r\n    public appSpecificComponentsConfigs: FxHeaderAppSpecificComponentConfigModel[] = []\r\n    public staticComponentConfigs: FxHeaderComponentConfigModel[] = []\r\n    public componentConfigs: FxHeaderComponentConfigModel[] = []\r\n\r\n    public isCollapsed = true\r\n\r\n    private subscriptions: Subscription = new Subscription()\r\n\r\n    constructor(private fxHeaderConfigService: FxHeaderConfigService,\r\n        private componentFactoryResolver: ComponentFactoryResolver,\r\n        private cdRef: ChangeDetectorRef,\r\n        private eRef: ElementRef) {\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        this.subscriptions.add(this.fxHeaderConfigService.config.subscribe((config: FxHeaderConfigModel) => {\r\n            if (config.logoPath != null) {\r\n                this.logoPath = config.logoPath\r\n            }\r\n\r\n            this.appTitleShort = config.appTitleShort\r\n            this.appTitle = config.appTitle\r\n            this.routes = config.routes\r\n\r\n            if (config.appSpecificComponents) {\r\n                config.appSpecificComponents.forEach((componentConfig: FxHeaderAppSpecificComponentConfigModel) => {\r\n                    this.appSpecificComponentsConfigs.push(componentConfig)\r\n                    this.addAppSpecificComponentToContainer(componentConfig)\r\n                })\r\n            }\r\n\r\n            if (config.staticComponents) {\r\n                config.staticComponents.forEach((component: FxHeaderComponentConfigModel) => {\r\n                    this.staticComponentConfigs.push(component)\r\n                    this.addComponentToContainer(component, this.staticComponentsContainer)\r\n                })\r\n            }\r\n\r\n            if (config.components) {\r\n                config.components.forEach((componentConfig: FxHeaderComponentConfigModel) => {\r\n                    this.componentConfigs.push(componentConfig)\r\n                    this.addComponentToContainer(componentConfig, this.componentsContainer)\r\n                })\r\n            }\r\n        }))\r\n\r\n        this.cdRef.detectChanges()\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.subscriptions.unsubscribe()\r\n    }\r\n\r\n    @HostListener('document:click', ['$event'])\r\n    public clickout(event: Event): void {\r\n        if (!this.eRef.nativeElement.contains(event.target)) {\r\n            this.isCollapsed = true\r\n        }\r\n    }\r\n\r\n    private addAppSpecificComponentToContainer(componentConfig: FxHeaderAppSpecificComponentConfigModel): void {\r\n        this.addComponentToContainer(componentConfig.componentConfigModel, this.appSpecificComponentsContainer)\r\n        this.addComponentToContainer(this.creatTextComponentConfig(componentConfig.text), this.appSpecificComponentsContainer)\r\n    }\r\n\r\n    private creatTextComponentConfig(text: string): FxHeaderComponentConfigModel {\r\n        return {\r\n            componentClass: FxHeaderAppSpecificTextComponent,\r\n            config: { inputs: of([{ key: 'text', value: text }]) }\r\n        }\r\n    }\r\n\r\n    private addComponentToContainer(componentConfig: FxHeaderComponentConfigModel, componentContainer: ViewContainerRef): void {\r\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(componentConfig.componentClass)\r\n        const component = componentContainer.createComponent(componentFactory)\r\n\r\n        if (!componentConfig.config) {\r\n            return\r\n        }\r\n\r\n        if (componentConfig.config.inputs) {\r\n            this.subscriptions.add(componentConfig.config.inputs.subscribe(config => {\r\n                config.forEach(configEntry => {\r\n                    component.instance[configEntry.key] = configEntry.value\r\n                })\r\n            }))\r\n        }\r\n\r\n        if (componentConfig.config.outputEvents) {\r\n            componentConfig.config.outputEvents.forEach((eventName) => {\r\n                this.subscriptions.add(component.instance[eventName].subscribe(event => {\r\n                    this.componentEvents.emit({ name: eventName, data: event })\r\n                }))\r\n            })\r\n        }\r\n    }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxHeaderComponent } from './fx-header.component'\r\nimport { FxBoundarySelectorModule } from '../fx-boundary-selector/fx-boundary-selector.module'\r\nimport { FxSecurityModule } from '../fx-security/fx-security.module'\r\nimport { FxConfidentialityLogoModule } from '../fx-confidentiality-logo/fx-confidentiality-logo.module'\r\nimport { FxBoundarySelectorComponent } from '../fx-boundary-selector/fx-boundary-selector.component'\r\nimport { FxUserSelectorComponent } from '../fx-security/components/fx-user-selector/fx-user-selector.component'\r\nimport { FxWikiModule } from '../fx-wiki/fx-wiki.module'\r\nimport { FxHeaderConfigValidatorService } from './services/fx-header-config-validator.service'\r\nimport { FxHeaderConfigService } from './services/fx-header-config.service'\r\nimport { FxLoginComponent } from '../fx-security/components/fx-login/fx-login.component'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { RouterModule } from '@angular/router'\r\nimport { FxHeaderAppSpecificTextComponent } from './components/fx-header-app-specific-text.component'\r\nimport { FxWikiComponent } from '../fx-wiki/fx-wiki.component'\r\nimport { FxConfidentialityLogoComponent } from '../fx-confidentiality-logo/fx-confidentiality-logo.component'\r\n\r\n@NgModule({\r\n    declarations: [\r\n        FxHeaderComponent,\r\n        FxHeaderAppSpecificTextComponent\r\n    ],\r\n    exports: [\r\n        FxHeaderComponent,\r\n        FxHeaderAppSpecificTextComponent\r\n    ],\r\n    imports: [\r\n        RouterModule,\r\n        CommonModule,\r\n        FxBoundarySelectorModule,\r\n        FxSecurityModule,\r\n        FxConfidentialityLogoModule,\r\n        FxWikiModule,\r\n        NgbModule,\r\n        FxTranslationModule,\r\n    ],\r\n    providers: [\r\n        FxHeaderConfigService,\r\n        FxHeaderConfigValidatorService\r\n    ],\r\n    entryComponents: [FxBoundarySelectorComponent, FxUserSelectorComponent, FxLoginComponent, FxWikiComponent, FxConfidentialityLogoComponent, FxHeaderAppSpecificTextComponent]\r\n})\r\nexport class FxHeaderModule { }\r\n","import { InjectionToken } from '@angular/core'\r\nimport { FxHeaderRouteConfigModel } from './fx-header-route-config.model'\r\nimport { FxHeaderComponentConfigModel } from './fx-header-component-config.model'\r\nimport { FxHeaderAppSpecificComponentConfigModel } from './fx-header-app-specific-component-config.model'\r\n\r\nexport let FX_HEADER_CONFIG = new InjectionToken<FxHeaderConfigModel>('app.fxheaderconfig')\r\n\r\nexport interface FxHeaderConfigModel {\r\n    logoPath?: string\r\n    appTitleShort: string\r\n    appTitle: string\r\n    routes: FxHeaderRouteConfigModel[]\r\n    appSpecificComponents?: FxHeaderAppSpecificComponentConfigModel[]\r\n    staticComponents?: FxHeaderComponentConfigModel[]\r\n    components?: FxHeaderComponentConfigModel[]\r\n}\r\n","import { NgxUiLoaderService } from 'ngx-ui-loader'\r\n\r\nexport function showOrHideLoader(loading: boolean | number,\r\n                                 ngxUiLoaderService: NgxUiLoaderService,\r\n                                 loadingId: string,\r\n                                 showLoader: boolean = true): void {\r\n  if (showLoader && !!ngxUiLoaderService && !!ngxUiLoaderService.getLoaders()[loadingId]) {\r\n    !!loading ? ngxUiLoaderService.startLoader(loadingId) : ngxUiLoaderService.stopLoader(loadingId)\r\n  }\r\n}\r\n","import { TranslateService } from '@ngx-translate/core'\r\nimport { DatatableColumnTooltip } from '../interfaces/datatable-column'\r\n\r\nexport function getTooltip(tooltip: DatatableColumnTooltip | DatatableColumnTooltip[], translateService: TranslateService, row?: any): string | undefined {\r\n  if (!tooltip || !translateService) {\r\n    return undefined\r\n  }\r\n  let tipObj: DatatableColumnTooltip\r\n  if (Array.isArray(tooltip)) {\r\n    const tipArray: DatatableColumnTooltip[] = [...tooltip as DatatableColumnTooltip[]]\r\n    if (!tipArray || tipArray.length === 0) {\r\n      return undefined\r\n    }\r\n    const tripFromArray = tipArray.find(tip => tip.showCondition(row))\r\n    if (tripFromArray) {\r\n      tipObj = tripFromArray\r\n    } else {\r\n      return undefined\r\n    }\r\n  } else {\r\n    tipObj = tooltip as DatatableColumnTooltip\r\n    if (!tipObj || (tipObj.showCondition && !tipObj.showCondition(row))) {\r\n      return undefined\r\n    }\r\n  }\r\n  return tipObj ? translateService.instant(tipObj.text) + (tipObj.column ? ` (${row[tipObj.column]})` : '') : undefined\r\n}\r\n","import { formatDate } from '@angular/common'\r\nimport { Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, TemplateRef, ViewChild } from '@angular/core'\r\nimport { TranslateService } from '@ngx-translate/core'\r\nimport { DataTableColumnDirective, DatatableComponent, SortType } from '@swimlane/ngx-datatable'\r\nimport { ClipboardService } from 'ngx-clipboard'\r\nimport { ContextMenuComponent } from 'ngx-contextmenu'\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader'\r\nimport { PositionType, SpinnerType } from 'ngx-ui-loader/lib/utils/types'\r\nimport { Subject, Subscription } from 'rxjs'\r\nimport { debounceTime, filter, map } from 'rxjs/operators'\r\nimport { FxNotificationService } from '../fx-notification/fx-notification.service'\r\nimport { showOrHideLoader } from '../shared/helper/loading.helper'\r\nimport { getTooltip } from '../shared/helper/tooltip.helper'\r\n\r\nimport { DatatableColumn, DatatableColumnBorder, DatatableColumnFoldColumns, DatatableColumnTooltip } from '../shared/interfaces/datatable-column'\r\nimport { DatatableRowDetail } from '../shared/interfaces/datatable-row-detail'\r\nimport { PageInfo } from '../shared/interfaces/page-info'\r\nimport { ScrollInfo } from '../shared/interfaces/scroll-info'\r\nimport { SortInfo } from '../shared/interfaces/sort-info'\r\n\r\ntype RowHeightFunctionType = (row?: any, index?: number) => number\r\n\r\n@Component({\r\n  selector: 'app-fx-custom-table',\r\n  templateUrl: './fx-custom-table.component.html',\r\n  styleUrls: ['./fx-custom-table.component.scss'],\r\n})\r\n\r\nexport class FxCustomTableComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild('defaultCellTemplate', {static: true})\r\n  public defaultCellTemplate: TemplateRef<any>\r\n\r\n  @ViewChild('defaultHeaderTemplate', {static: true})\r\n  public defaultHeaderTemplate: TemplateRef<any>\r\n\r\n  @ViewChild('datatable', {static: true})\r\n  public datatable: DatatableComponent\r\n\r\n  @ViewChild('debugContextMenu', {static: true})\r\n  public debugContextMenu: ContextMenuComponent\r\n\r\n  @ViewChild('selectableContextMenu', {static: true})\r\n  public selectableContextMenu: ContextMenuComponent\r\n\r\n  @Input()\r\n  public loading: number | boolean = 0\r\n\r\n  @Input()\r\n  public columnMode = 'force'\r\n\r\n  @Input()\r\n  public showLoader = false\r\n\r\n  @Input()\r\n  public loadingId = 'custom-table'\r\n\r\n  @Input()\r\n  public hasProgressBar = false\r\n\r\n  @Input()\r\n  public foregroundColor = '#004666'\r\n\r\n  @Input()\r\n  public overlayColor = 'rgba(255,255,255,0.9)'\r\n\r\n  @Input()\r\n  public loadingType: SpinnerType = 'circle'\r\n\r\n  @Input()\r\n  public loadingPosition: PositionType = 'center-center'\r\n\r\n  @Input()\r\n  public loaderSize = 70\r\n\r\n  @Input()\r\n  public columns: DatatableColumn[] = []\r\n\r\n  @Input()\r\n  public messagesEmptyMessage = 'i18n.common.table.messages.emptyMessage'\r\n\r\n  @Input()\r\n  public messagesTotalMessage = 'i18n.common.table.messages.totalMessage'\r\n\r\n  @Input()\r\n  public messagesSelectedMessage = 'i18n.common.table.messages.selectedMessage'\r\n\r\n  @Input()\r\n  public count = 0\r\n\r\n  @Input()\r\n  public offset = 0\r\n\r\n  @Input()\r\n  public limit: number | undefined = 20\r\n\r\n  @Input()\r\n  public headerHeight: number | 'auto' = 50\r\n\r\n  @Input()\r\n  public rows: any[]\r\n\r\n  @Input()\r\n  public externalPagingLoadedPage: number\r\n\r\n  @Input()\r\n  public footerHeight: number\r\n\r\n  @Input()\r\n  public rowHeight = 25\r\n\r\n  @Input()\r\n  public rowClassCallback: (row: any) => { [key: string]: boolean }\r\n\r\n  @Input()\r\n  public rowHeightCallback = ((row, index): number => {\r\n    if (typeof this.rowDetail.rowHeight === 'function') {\r\n      return (this.rowDetail.rowHeight as RowHeightFunctionType)(this.rows[index], index)\r\n    }\r\n    return (this.rowDetail.rowHeight as number)\r\n  })\r\n\r\n  @Input()\r\n  public externalPaging = true\r\n\r\n  @Input()\r\n  public externalSorting = true\r\n\r\n  @Input()\r\n  public sorts: any[]\r\n\r\n  @Input()\r\n  public sortType = SortType.single\r\n\r\n  @Input()\r\n  public scrollbarH = true\r\n\r\n  @Input()\r\n  public scrollbarV = false\r\n\r\n  @Input()\r\n  public preloadNextPage = true\r\n\r\n  @Input()\r\n  public preloadPrevPage = true\r\n\r\n  @Input()\r\n  public rowDetail: DatatableRowDetail\r\n\r\n  @Input()\r\n  public isDebugContextMenuVisible: boolean\r\n\r\n  @Input()\r\n  public loadingPageDebounceTimeInMilliseconds = this.externalPaging ? 200 : 0\r\n\r\n  @Output()\r\n  public pageCallback = new EventEmitter<PageInfo>()\r\n\r\n  @Output()\r\n  public sortCallback = new EventEmitter<SortInfo>()\r\n\r\n  @Output()\r\n  public scrollCallback = new EventEmitter<ScrollInfo>()\r\n\r\n  @Output()\r\n  public selectRowCallback = new EventEmitter<{ row: any, column: any }>()\r\n\r\n  public tableRows: any[]\r\n\r\n  public originalColumns: DatatableColumn[]\r\n\r\n  public loadedEntries: number\r\n\r\n  public pageInfo: PageInfo = {\r\n    offset: 0,\r\n    pageSize: 0,\r\n  }\r\n\r\n  public fetchDataDebouncer = new Subject<PageInfo>()\r\n\r\n  private loadingPages = new Map<number, boolean>()\r\n\r\n  private subscriptions: Subscription = new Subscription()\r\n\r\n  public constructor(\r\n    private clipboardService: ClipboardService,\r\n    private elRef: ElementRef,\r\n    private ngxUiLoaderService: NgxUiLoaderService,\r\n    private notificationService: FxNotificationService,\r\n    private translate: TranslateService,\r\n  ) {\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe()\r\n  }\r\n\r\n  public ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.loading) {\r\n      this.handleLoading()\r\n    }\r\n\r\n    if (changes.count) {\r\n      if (this.externalPaging) {\r\n        if (this.count > 0) {\r\n\r\n          this.tableRows = new Array<any>(this.count)\r\n          this.loadingPages = new Map<number, boolean>()\r\n\r\n          this.goToFirstPage()\r\n        }\r\n      }\r\n    }\r\n\r\n    if (changes.rows) {\r\n      if (!this.externalPaging) {\r\n        this.tableRows = this.rows\r\n        return\r\n      }\r\n\r\n      if (this.tableRows) {\r\n        const start = (this.offset || this.pageInfo.offset) * this.pageInfo.pageSize\r\n        this.tableRows.splice(start, this.rows.length, ...this.rows)\r\n        if (this.isDebugContextMenuVisible) {\r\n          this.loadedEntries = this.tableRows.filter(row => !!row).length\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.handleInitialColumnFolding()\r\n\r\n    this.subscriptions.add(this.fetchDataDebouncer\r\n      .pipe(\r\n        filter(pageInfo => !!pageInfo),\r\n        map(pageInfo => this.getNextPage(pageInfo, 0)),\r\n        map(pageInfo => {\r\n          this.pageInfo = pageInfo\r\n\r\n          const maxOffset = Math.max(0, Math.ceil(pageInfo.count / pageInfo.pageSize) - 1)\r\n          const isFirstPage = pageInfo.offset === 0\r\n          const isLastPage = pageInfo.offset === maxOffset\r\n\r\n          const currentAllDataIsFilled = this.isAllDataFilled(this.tableRows, pageInfo)\r\n\r\n          let prevAllDataIsFilled = true\r\n          let newPageInfoPrev: PageInfo\r\n          if (isLastPage || this.preloadPrevPage) { // pre-load previous page\r\n            newPageInfoPrev = this.getNextPage(pageInfo, -1)\r\n            prevAllDataIsFilled = this.isAllDataFilled(this.tableRows, newPageInfoPrev)\r\n          }\r\n\r\n          let nextAllDataIsFilled = true\r\n          let newPageInfoNext: PageInfo\r\n          if (isFirstPage || this.preloadNextPage) { // pre-load next page\r\n            newPageInfoNext = this.getNextPage(pageInfo, 1)\r\n            nextAllDataIsFilled = this.isAllDataFilled(this.tableRows, newPageInfoNext)\r\n          }\r\n          return {\r\n            currentAllDataIsFilled,\r\n            pageInfoCurrent: pageInfo,\r\n            prevAllDataIsFilled,\r\n            pageInfoPrev: newPageInfoPrev,\r\n            nextAllDataIsFilled,\r\n            pageInfoNext: newPageInfoNext,\r\n          }\r\n        }),\r\n        filter(pageInfo => !pageInfo.currentAllDataIsFilled || !pageInfo.prevAllDataIsFilled || !pageInfo.nextAllDataIsFilled),\r\n        debounceTime(this.loadingPageDebounceTimeInMilliseconds || 0),\r\n      )\r\n      .subscribe(pageInfo => {\r\n        this.getNewData(pageInfo.pageInfoPrev, pageInfo.prevAllDataIsFilled)\r\n        this.getNewData(pageInfo.pageInfoCurrent, pageInfo.currentAllDataIsFilled)\r\n        this.getNewData(pageInfo.pageInfoNext, pageInfo.nextAllDataIsFilled)\r\n\r\n        this.handleLoading()\r\n      }),\r\n    )\r\n  }\r\n\r\n  public getFilteredColumns(originalColumns: DatatableColumn[], expectedFoldState: boolean = false): DatatableColumn[] {\r\n    if (!originalColumns) {\r\n      return undefined\r\n    }\r\n    return originalColumns.filter(c => expectedFoldState ? c.isFolded : !c.isFolded) // isFolded could also be null or undefined (it equal 'false')\r\n  }\r\n\r\n  public selectRow(row: any, column: DatatableColumn): void {\r\n    this.selectRowCallback.emit({row: row, column: column})\r\n  }\r\n\r\n  public getStaticTooltip(tooltip: DatatableColumnTooltip | DatatableColumnTooltip[], row?: any): string | undefined {\r\n    return getTooltip(tooltip, this.translate, row)\r\n  }\r\n\r\n  public getRowTooltip(noTextOverflow: boolean, dataColumn: DatatableColumn, row: any, value: any): string {\r\n    if ('tooltip' in row && dataColumn.name in row.tooltip) {\r\n      return row.tooltip[dataColumn.name]\r\n    }\r\n    if (noTextOverflow) {\r\n      return value\r\n    }\r\n    return ''\r\n  }\r\n\r\n  public isTooltipDisabled(divElement: HTMLDivElement, row: any, dataColumn: DatatableColumn): boolean {\r\n    return (divElement && divElement.offsetWidth >= divElement.scrollWidth\r\n      && !('tooltip' in row && dataColumn.name in row.tooltip))\r\n  }\r\n\r\n  public getBorderClass(border: DatatableColumnBorder): string[] {\r\n    const borderClasses: string[] = []\r\n    if (border && (border.bottom || border.left || border.right || border.top)) {\r\n      if (border.bottom) {\r\n        borderClasses.push('border-bottom')\r\n      }\r\n      if (border.left) {\r\n        borderClasses.push('border-left')\r\n      }\r\n      if (border.right) {\r\n        borderClasses.push('border-right')\r\n      }\r\n      if (border.top) {\r\n        borderClasses.push('border-top')\r\n      }\r\n    }\r\n    return borderClasses\r\n  }\r\n\r\n  public getCellStyleClasses(baseClass: string | ((data: any) => string | any), data: any): string[] {\r\n    const additionalClass: string = (typeof baseClass === 'function') ? baseClass(data) : baseClass\r\n    return additionalClass ? [additionalClass] : []\r\n  }\r\n\r\n  public getCellClasses(dataColumn: DatatableColumn): string {\r\n    const cellClasses: string[] = []\r\n\r\n    if (dataColumn.cellAlign) {\r\n      cellClasses.push('align__' + dataColumn.cellAlign)\r\n    }\r\n    const borderClasses = this.getBorderClass(dataColumn.cellBorder)\r\n    if (borderClasses.length > 0) {\r\n      cellClasses.push(...borderClasses)\r\n    }\r\n\r\n    if (dataColumn.isFolded === false) {\r\n      cellClasses.push('unfolded')\r\n    }\r\n\r\n    if (dataColumn.cellClass && typeof dataColumn.cellClass !== 'function') {\r\n      cellClasses.push(dataColumn.cellClass as string)\r\n    }\r\n    return cellClasses.join(' ')\r\n  }\r\n\r\n  public getHeaderClasses(dataColumn: DatatableColumn): string {\r\n    const headerClasses: string[] = []\r\n\r\n    if (dataColumn.headerAlign) {\r\n      headerClasses.push('align__' + dataColumn.headerAlign)\r\n    }\r\n    const borderClasses = this.getBorderClass(dataColumn.headerBorder)\r\n    if (borderClasses.length > 0) {\r\n      headerClasses.push(...borderClasses)\r\n    }\r\n\r\n    if (dataColumn.isFolded === false) {\r\n      headerClasses.push('unfolded')\r\n    }\r\n\r\n    if (dataColumn.headerClass && typeof dataColumn.headerClass !== 'function') {\r\n      headerClasses.push(dataColumn.headerClass as string)\r\n    }\r\n\r\n    if (dataColumn.foldColumns && dataColumn.foldColumns.isFolded === false) {\r\n      headerClasses.push('fold-trigger-active')\r\n    }\r\n    return headerClasses.join(' ')\r\n  }\r\n\r\n  public trimString(value: any): string | any {\r\n    if (!!value && typeof value === 'string' || value instanceof String) {\r\n      return value.trim()\r\n    }\r\n    return value\r\n  }\r\n\r\n  public goToFirstPage(): void {\r\n    // sorry for this hack but no other \"solution\" does work 100% :(\r\n    const firstTabButton = this.elRef.nativeElement.querySelector('.datatable-icon-prev')\r\n    if (!!firstTabButton) {\r\n      firstTabButton.click()\r\n    }\r\n  }\r\n\r\n  public emitScrollCallback(scrollInfo: ScrollInfo): void {\r\n    scrollInfo = {\r\n      ...scrollInfo,\r\n      page: this.pageInfo.offset,\r\n      size: this.pageInfo.pageSize,\r\n    }\r\n\r\n    this.scrollCallback.emit(scrollInfo)\r\n  }\r\n\r\n  public emitPageCallback(pageInfo: PageInfo, indexes: { first: number, last: number }): void {\r\n    if (!pageInfo) {\r\n      return\r\n    }\r\n    if (this.pageInfo.pageSize !== pageInfo.pageSize) {\r\n      this.loadingPages = new Map<number, boolean>()\r\n    }\r\n\r\n    this.pageInfo = {\r\n      ...pageInfo,\r\n      ...indexes,\r\n    }\r\n\r\n    if (this.externalPaging) {\r\n      this.fetchDataDebouncer.next(this.pageInfo)\r\n    } else {\r\n      this.pageCallback.emit(this.pageInfo)\r\n    }\r\n  }\r\n\r\n  public copyLoadedValuesToClipboard(columnData: DataTableColumnDirective): void {\r\n    const prop = columnData.prop\r\n    if (!!prop) {\r\n      const values = this.tableRows.reduce((result, column) => (result += (result === '' ? '' : ', ') + column[prop], result), '')\r\n\r\n      this.copyValueToClipboard(values)\r\n    }\r\n  }\r\n\r\n  public copyValueToClipboard(value: string): void {\r\n    if (!!value) {\r\n      this.clipboardService.copyFromContent(value)\r\n      this.notificationService.success('copiedToClipboard')\r\n    }\r\n  }\r\n\r\n  public evaluateFormat(format: any, value: any): any {\r\n    if (typeof format === 'function') {\r\n      return format(value)\r\n    }\r\n    return format && value ? formatDate(value, format, this.translate.currentLang) : value\r\n  }\r\n\r\n  public handleColumnFolding(datatableColumn: DatatableColumn): void {\r\n    if (!this.originalColumns && this.columns) {\r\n      this.originalColumns = this.columns\r\n    } else if ((!this.originalColumns && !this.columns) || !datatableColumn.foldColumns) {\r\n      return\r\n    }\r\n    this.setFoldStateForColumns(datatableColumn.foldColumns, !datatableColumn.foldColumns.isFolded)\r\n    this.columns = this.getFilteredColumns(this.originalColumns)\r\n  }\r\n\r\n  public handleInitialColumnFolding(): void {\r\n    if (!this.originalColumns && this.columns) {\r\n      this.originalColumns = this.columns\r\n    } else if (!this.originalColumns && !this.columns) {\r\n      return\r\n    }\r\n    this.originalColumns.forEach(datatableColumn => {\r\n      this.setFoldStateForColumns(datatableColumn.foldColumns)\r\n    })\r\n    this.columns = this.getFilteredColumns(this.originalColumns)\r\n  }\r\n\r\n  private setFoldStateForColumns(foldColumns: DatatableColumnFoldColumns, newFoldState?: boolean): void {\r\n    if (!foldColumns || !foldColumns.columnNames) {\r\n      return\r\n    }\r\n    foldColumns.isFolded = newFoldState != null ? newFoldState : foldColumns.isFolded\r\n    foldColumns.columnNames.forEach(columnName => {\r\n      const column = this.originalColumns.find(col => col.name === columnName)\r\n      column.isFolded = foldColumns.isFolded\r\n    })\r\n  }\r\n\r\n  private getNewData(pageInfo: PageInfo, isAllDataFilled: boolean): void {\r\n    if (!pageInfo) {\r\n      return\r\n    }\r\n\r\n    if (isAllDataFilled) {\r\n      this.loadingPages.delete(pageInfo.offset)\r\n      return\r\n    }\r\n\r\n    if (!this.loadingPages.get(pageInfo.offset)) {\r\n      this.loadingPages.set(pageInfo.offset, true)\r\n      this.pageCallback.emit(pageInfo)\r\n    }\r\n  }\r\n\r\n  private getNextPage(pageInfo: PageInfo, direction: number): PageInfo {\r\n    const maxOffset = Math.max(0, Math.ceil(pageInfo.count / pageInfo.pageSize) - 1)\r\n    const offset = Math.min(Math.max(0, pageInfo.offset + direction), maxOffset)\r\n\r\n    const first = Math.max(0, pageInfo.first + (pageInfo.pageSize * direction))\r\n    const last = Math.max(first, Math.min(pageInfo.count - 1, pageInfo.last + (pageInfo.pageSize * direction)))\r\n\r\n    const newPageInfo: PageInfo = {\r\n      ...pageInfo,\r\n      first,\r\n      last,\r\n      offset,\r\n    }\r\n    return newPageInfo\r\n  }\r\n\r\n  private isAllDataFilled(dataRows: any[], pageInfo: PageInfo): boolean {\r\n    if (!dataRows || !pageInfo) {\r\n      return false\r\n    }\r\n    if (pageInfo.first >= pageInfo.last) {\r\n      return false\r\n    }\r\n\r\n    for (let i = pageInfo.first; i <= pageInfo.last; i++) {\r\n      if (!dataRows[i]) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  private handleLoading(): void {\r\n    showOrHideLoader(this.loading, this.ngxUiLoaderService, this.loadingId, this.showLoader)\r\n    this.hasProgressBar = this.loading > 1\r\n  }\r\n}\r\n","import { ColorRange } from '../interfaces/color-range'\r\n\r\nexport function getColorByValue(colorRanges: ColorRange[], value: number): string | undefined {\r\n  if (!colorRanges || colorRanges.length === 0) {\r\n    return undefined\r\n  }\r\n\r\n  const result = colorRanges.find(colorRange => (colorRange.start == null || colorRange.start <= value) && (colorRange.end == null || colorRange.end >= value))\r\n  return result ? result.color : undefined\r\n}\r\n","import { Component, Input } from '@angular/core'\r\nimport { getColorByValue } from '../../../shared/helper/color-range.helper'\r\nimport { DatatableColumn } from '../../../shared/interfaces/datatable-column'\r\nimport { ColorRange } from '../../../shared/interfaces/color-range'\r\n\r\n@Component({\r\n  selector: 'app-fx-color-indicators-cell-template',\r\n  templateUrl: './fx-color-indicators-cell-template.component.html',\r\n  styleUrls: ['./fx-color-indicators-cell-template.component.scss'],\r\n})\r\nexport class FxColorIndicatorsCellTemplateComponent {\r\n  @Input()\r\n  public value: number\r\n\r\n  @Input()\r\n  public datatableColumn: DatatableColumn\r\n\r\n  public constructor() {\r\n  }\r\n\r\n  public getColorByValue(colorRanges: ColorRange[], value: number): string | undefined {\r\n    return getColorByValue(colorRanges, value)\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { RouterModule } from '@angular/router'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { DataTableBodyComponent, NgxDatatableModule } from '@swimlane/ngx-datatable'\r\nimport { ContextMenuModule } from 'ngx-contextmenu'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { SharedModule } from '../shared/shared.module'\r\nimport { FxCustomTableComponent } from './fx-custom-table.component'\r\nimport { FxColorIndicatorsCellTemplateComponent } from './templates/color-indicators-cell-template/fx-color-indicators-cell-template.component'\r\n\r\n/**\r\n * nasty fix for:\r\n * DataTableBodyComponent.html:64 ERROR TypeError: Cannot read property '0' of undefined at Object.eval [as updateDirectives] (DataTableBodyComponent.html:37)\r\n */\r\nDataTableBodyComponent.prototype.updateRows = function (): void {\r\n  const {first, last}: any = this.indexes\r\n  let rowIndex = first\r\n  let idx = 0\r\n  const temp: any[] = []\r\n\r\n  this.rowIndexes.clear()\r\n\r\n  if (this.groupedRows) {\r\n    while (rowIndex < last && rowIndex < this.groupedRows.length) {\r\n      // Add the groups into this page\r\n      const group = this.groupedRows[rowIndex]\r\n      temp[idx] = group\r\n      idx++\r\n\r\n      // Group index in this context\r\n      rowIndex++\r\n    }\r\n  } else {\r\n    while (rowIndex < last && rowIndex < this.rowCount) {\r\n      const row = this.rows[rowIndex]\r\n\r\n      if (row) {\r\n        this.rowIndexes.set(row, rowIndex)\r\n        temp[idx] = row\r\n      }\r\n\r\n      idx++\r\n      rowIndex++\r\n    }\r\n  }\r\n\r\n  this.temp = temp.filter(x => !!x)\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FxColorIndicatorsCellTemplateComponent,\r\n    FxCustomTableComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ContextMenuModule.forRoot(),\r\n    FormsModule,\r\n    FxTranslationModule,\r\n    NgbModule,\r\n    NgxDatatableModule,\r\n    SharedModule,\r\n    RouterModule,\r\n  ],\r\n  exports: [\r\n    FxColorIndicatorsCellTemplateComponent,\r\n    FxCustomTableComponent,\r\n  ],\r\n\r\n})\r\nexport class FxCustomTableModule {\r\n}\r\n","import { Component, Input } from '@angular/core'\r\nimport { FxFooterRouteModel } from './models/fx-footer-route.model'\r\n\r\n@Component({\r\n    selector: 'app-fx-footer',\r\n    templateUrl: './fx-footer.component.html',\r\n    styleUrls: ['./fx-footer.component.scss']\r\n})\r\nexport class FxFooterComponent {\r\n    @Input()\r\n    public routes: FxFooterRouteModel[] = []\r\n\r\n    @Input()\r\n    public backgroundColor = 'transparent'\r\n\r\n    constructor() { }\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxFooterComponent } from './fx-footer.component'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { RouterModule } from '@angular/router'\r\n\r\n@NgModule({\r\n    declarations: [FxFooterComponent],\r\n    exports: [\r\n        FxFooterComponent\r\n    ],\r\n    imports: [\r\n        RouterModule,\r\n        CommonModule,\r\n        FxTranslationModule\r\n    ]\r\n})\r\nexport class FxFooterModule {}\r\n","export const FACILITY = 'FACILITY'\r\nexport const DEBUG = 'DEBUG'\r\n","import { DEBUG, FACILITY } from '../constants/local-storage.constants'\r\n\r\nexport function setItem(key: string, value: string): void {\r\n  if (!key) {\r\n    return\r\n  }\r\n  localStorage.setItem(key, value)\r\n}\r\n\r\nexport function deleteItem(key: string): void {\r\n  if (!key) {\r\n    return\r\n  }\r\n  localStorage.removeItem(key)\r\n}\r\n\r\nexport function getItem(key: string): string {\r\n  if (!key) {\r\n    return null\r\n  }\r\n  return localStorage.getItem(key)\r\n}\r\n\r\nexport function setFacility(facility: string): void {\r\n  setItem(FACILITY, facility)\r\n}\r\n\r\nexport function getFacility(): string {\r\n  return getItem(FACILITY)\r\n}\r\n\r\nexport function deleteFacility(): void {\r\n  deleteItem(FACILITY)\r\n}\r\n\r\nexport function setDebugMode(debug: boolean): void {\r\n  setItem(DEBUG, debug ? '1' : '0')\r\n}\r\n\r\nexport function isDebugMode(): boolean {\r\n  return getItem(DEBUG) === '1'\r\n}\r\n\r\nexport function deleteDebugMode(): void {\r\n  deleteItem(DEBUG)\r\n}\r\n","import { InjectionToken } from '@angular/core'\r\nimport { FxNotificationConfig } from '../fx-user-notification.module'\r\n\r\nexport const NOTIFICATION_CONFIG = new InjectionToken<FxNotificationConfig>('NOTIFICATION_CONFIG')\r\n","import { Inject, Injectable } from '@angular/core'\r\nimport { Observable } from 'rxjs'\r\nimport { HttpClient } from '@angular/common/http'\r\nimport { FxUserNotification } from '../domain/fx-user-notification'\r\nimport { NOTIFICATION_CONFIG } from '../domain/fx-notification-config'\r\nimport { FxNotificationConfig } from '../fx-user-notification.module'\r\nimport { IFxUserNotificationLocalDevelopmentService } from './i-fx-user-notification.service'\r\n\r\n@Injectable()\r\nexport class FxUserNotificationService implements IFxUserNotificationLocalDevelopmentService {\r\n\r\n  public baseUrl: string\r\n  constructor(private http: HttpClient,\r\n              @Inject(NOTIFICATION_CONFIG) notificationConfig: FxNotificationConfig) {\r\n    this.baseUrl = notificationConfig.notification_service_url\r\n  }\r\n  public getNotifications(): Observable<Array<FxUserNotification>> {\r\n    return this.http.get<Array<FxUserNotification>>(`${this.baseUrl}/api/v1/read-unread-usernotifications`)\r\n  }\r\n\r\n  public postUserReadLog(): Observable<Object> {\r\n    return this.http.post(`${this.baseUrl}/api/v1/userlogs`, {})\r\n  }\r\n}\r\n\r\n","export interface FxUserNotification {\r\n  audience?: Map<string, Array<string>>,\r\n  id: string,\r\n  messageHeadline: string,\r\n  messageText: string,\r\n  severity: string,\r\n  updateTimestamp: Date,\r\n  updatedByUser: string,\r\n  read: boolean\r\n}\r\n\r\nexport const priorityMap = new Map([\r\n  ['ERROR', 1],\r\n  ['WARNING', 2],\r\n  ['INFO', 3]\r\n])\r\n\r\n","import { Component, Input, OnInit, OnDestroy } from '@angular/core'\r\nimport { IconProp, SizeProp } from '@fortawesome/fontawesome-svg-core'\r\nimport { faBell } from '@fortawesome/free-solid-svg-icons'\r\nimport { FxUserNotificationService } from '../../services/fx-user-notification.service'\r\nimport { FxUserNotification, priorityMap } from '../../domain/fx-user-notification'\r\nimport { Subscription, timer } from 'rxjs'\r\n\r\n@Component({\r\n  selector: 'app-fx-user-notification',\r\n  templateUrl: './fx-user-notification.component.html',\r\n  styleUrls: ['./fx-user-notification.component.scss']\r\n})\r\nexport class FxUserNotificationComponent implements OnInit, OnDestroy {\r\n\r\n  public opened = false\r\n\r\n  @Input()\r\n  public icon: IconProp = faBell\r\n\r\n  @Input()\r\n  public color = 'white'\r\n\r\n  @Input()\r\n  public size: SizeProp = '2x'\r\n\r\n  @Input()\r\n  public refreshInterval = 60000\r\n\r\n  @Input()\r\n  public charsOfShortText = 50\r\n\r\n  public userNotificationList: Array<FxUserNotification> = []\r\n  public userNotificationUnreadList: Array<FxUserNotification> = []\r\n  public userNotificationReadList: Array<FxUserNotification> = []\r\n\r\n  public notificationCount: number\r\n  public intervalTimeSubscription\r\n\r\n  private userNotificationSubscription: Subscription\r\n\r\n  constructor(private userNotificationService: FxUserNotificationService) {\r\n  }\r\n\r\n  public getNotificationIconColor(): { color: string } {\r\n    return {color: this.color}\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.intervalTimeSubscription = timer(0, this.refreshInterval).subscribe(() => {\r\n      this.receiveNotifications()\r\n    })\r\n  }\r\n\r\n  public receiveNotifications(): void {\r\n    this.userNotificationSubscription = this.userNotificationService.getNotifications().subscribe(res => {\r\n      this.sortNotificationsAndRemember(res)\r\n    })\r\n  }\r\n\r\n  public toggleNotificationArea(): void {\r\n    this.opened = !this.opened\r\n    if (!this.opened) {\r\n      this.postReadNotificationLogAndRefreshNotifications()\r\n    }\r\n  }\r\n\r\n  public sortNotificationsAndRemember(notificationData: Array<FxUserNotification>): void {\r\n    this.userNotificationReadList = notificationData.filter((notification) => {\r\n      return notification.read\r\n    })\r\n    this.userNotificationUnreadList = notificationData.filter((notification) => {\r\n      return !notification.read\r\n    })\r\n    this.userNotificationList = this.sortNotification(this.userNotificationUnreadList).concat(this.sortNotification(this.userNotificationReadList))\r\n    this.notificationCount = this.userNotificationUnreadList.length\r\n  }\r\n\r\n  public sortNotification(notificationData: Array<FxUserNotification>): Array<FxUserNotification> {\r\n    return notificationData.sort((notification1, notification2) => {\r\n      {\r\n        if (priorityMap.get(notification1.severity) < priorityMap.get(notification2.severity)) {\r\n          return -1\r\n        }\r\n        if (priorityMap.get(notification1.severity) > priorityMap.get(notification2.severity)) {\r\n          return 1\r\n        }\r\n        return this.compareUpdateTime(new Date(notification1.updateTimestamp), new Date(notification2.updateTimestamp)  )\r\n      }\r\n    })\r\n  }\r\n\r\n  public postReadNotificationLogAndRefreshNotifications(): void {\r\n    this.userNotificationService.postUserReadLog().toPromise().then(() => {\r\n      this.receiveNotifications()\r\n    })\r\n  }\r\n\r\n  public ngOnDestroy(): void {\r\n    if (this.intervalTimeSubscription) {\r\n      this.intervalTimeSubscription.unsubscribe()\r\n    }\r\n    if (this.userNotificationSubscription) {\r\n      this.userNotificationSubscription.unsubscribe()\r\n    }\r\n  }\r\n\r\n  private compareUpdateTime(ts1: Date, ts2: Date): number {\r\n    if (ts1.getTime() < ts2.getTime()) {\r\n      return 1\r\n    } else if (ts1.getTime() > ts2.getTime()) {\r\n      return -1\r\n    }\r\n    return 0\r\n  }\r\n}\r\n\r\n","import { Injectable } from '@angular/core'\r\nimport { Observable, of, timer } from 'rxjs'\r\nimport { FxUserNotification } from '../domain/fx-user-notification'\r\nimport { IFxUserNotificationLocalDevelopmentService } from './i-fx-user-notification.service'\r\n\r\n@Injectable()\r\n/**\r\n * A implementation of IFxUserNotificationLocalDevelopmentService just without server, it generates all data offline.\r\n * <b>Purpose:</b>\r\n * Ease of development and demonstration in a showcase.\r\n */\r\nexport class FxUserNotificationLocalDevelopmentService  implements IFxUserNotificationLocalDevelopmentService {\r\n\r\n  public notifications: Array<FxUserNotification> = []\r\n\r\n  private idCounterForMessages = 0\r\n\r\n  constructor() {\r\n    this.startTimer()\r\n  }\r\n\r\n  public getNotifications(): Observable<Array<FxUserNotification>> {\r\n    return of(this.notifications)\r\n  }\r\n\r\n  public postUserReadLog(): Observable<Object> {\r\n    this.notifications.forEach((message) => message.read = true)\r\n    return of({})\r\n  }\r\n\r\n  private startTimer(): void {\r\n    // this timer is on purpose not stopped or unsubscribed as it simulates a server that is generating messages,\r\n    // it will not be stopped by the client.\r\n    timer(0, 5000).subscribe(() => {\r\n      this.notifications.push(this.generateNewMessage())\r\n    })\r\n  }\r\n\r\n  private generateNewMessage(): FxUserNotification {\r\n    this.idCounterForMessages++\r\n\r\n    const severity = this.getRandomSeverity()\r\n    const messageText = Math.random() > 0.5\r\n      ? `This is ${severity} message ${this.idCounterForMessages.toString()} locally generated.`\r\n      : `This is ${severity} message ${this.idCounterForMessages.toString()} locally generated. With a text which is longer than expected. This way a collapsible message can be demonstrated.`\r\n\r\n    return {\r\n      messageHeadline: `Dummy ${severity} Message ${this.idCounterForMessages.toString()}`,\r\n      updatedByUser: 'dummy',\r\n      severity: severity,\r\n      read: false,\r\n      messageText: messageText,\r\n      id: this.idCounterForMessages.toString(),\r\n      audience: undefined,\r\n      updateTimestamp: new Date()\r\n    }\r\n  }\r\n\r\n  private getRandomSeverity(): 'INFO' | 'WARNING' | 'ERROR' {\r\n    const rnd = Math.random()\r\n    if (rnd > 0.66) {\r\n      return 'INFO'\r\n    } else if (rnd > 0.33) {\r\n      return 'WARNING'\r\n    } else {\r\n      return 'ERROR'\r\n }\r\n  }\r\n}\r\n\r\n","import { Component, Input, OnInit } from '@angular/core'\r\nimport { FxUserNotification } from '../../domain/fx-user-notification'\r\n\r\n@Component({\r\n  selector: 'app-fx-user-single-notification-area',\r\n  templateUrl: './fx-user-single-notification-area.component.html',\r\n  styleUrls: ['./fx-user-single-notification-area.component.scss']\r\n})\r\nexport class FxUserSingleNotificationAreaComponent implements OnInit {\r\n\r\n  public completeNotification: FxUserNotification\r\n\r\n  @Input()\r\n  public set notification(notification: FxUserNotification) {\r\n    this.completeNotification = notification\r\n    this.updateVisibleMessageText()\r\n  }\r\n\r\n  @Input()\r\n  public charsOfShortText = 150\r\n\r\n  public isMessageShorted = false\r\n  public visibleMessage = ''\r\n  public show = false\r\n\r\n  constructor() {\r\n  }\r\n\r\n  public ngOnInit(): void {\r\n    this.updateVisibleMessageText()\r\n  }\r\n\r\n  public getSeverityStyle(notification: FxUserNotification): string {\r\n    if (!notification) {\r\n      return ''\r\n    }\r\n    if (!notification.read) {\r\n      if (notification.severity === 'ERROR') {\r\n        return 'alert alert-danger'\r\n      } else if (notification.severity === 'WARNING') {\r\n        return 'alert alert-warning'\r\n      } else {\r\n        return 'alert alert-info'\r\n      }\r\n    } else {\r\n      return 'alert alert-secondary'\r\n    }\r\n  }\r\n\r\n  public showToggle(): void {\r\n    this.show = !this.show\r\n    this.updateVisibleMessageText()\r\n  }\r\n\r\n  public getSeverityIcon(notification: FxUserNotification): string {\r\n    if (!notification) {\r\n      return ''\r\n    }\r\n    if (notification.severity === 'ERROR') {\r\n      return 'fas fa-exclamation-circle'\r\n    } else if (notification.severity === 'WARNING') {\r\n      return 'fas fa-exclamation-triangle'\r\n    } else {\r\n      return 'fas fa-info-circle'\r\n    }\r\n  }\r\n\r\n  private updateVisibleMessageText(): void {\r\n    if (!this.completeNotification) {\r\n      return\r\n    }\r\n    if (this.completeNotification.messageText.length > this.charsOfShortText && !this.show) {\r\n      this.visibleMessage = this.completeNotification.messageText.slice(0, this.charsOfShortText)\r\n      this.isMessageShorted = true\r\n    } else {\r\n      this.visibleMessage = this.completeNotification.messageText\r\n    }\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core'\r\nimport { CommonModule } from '@angular/common'\r\nimport { FxUserNotificationComponent } from './components/fx-user-notification/fx-user-notification.component'\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap'\r\nimport { BrowserModule } from '@angular/platform-browser'\r\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome'\r\nimport { FormsModule } from '@angular/forms'\r\nimport { NOTIFICATION_CONFIG } from './domain/fx-notification-config'\r\nimport { FxTranslationModule } from '../fx-translation/fx-translation.module'\r\nimport { FxUserNotificationService } from './services/fx-user-notification.service'\r\nimport { FxUserNotificationLocalDevelopmentService } from './services/fx-user-notification-local-development.service'\r\nimport { FxUserSingleNotificationAreaComponent } from './components/fx-user-single-notification-area/fx-user-single-notification-area.component'\r\n\r\n@NgModule({\r\n  declarations: [FxUserNotificationComponent, FxUserSingleNotificationAreaComponent],\r\n  exports: [\r\n    FxUserNotificationComponent\r\n    , FxUserSingleNotificationAreaComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    CommonModule,\r\n    NgbModule,\r\n    FontAwesomeModule,\r\n    FormsModule,\r\n    FxTranslationModule\r\n  ],\r\n  bootstrap: [FxUserNotificationComponent]\r\n})\r\nexport class FxUserNotificationModule {\r\n  public static forRoot(notificationConfig: FxNotificationConfig): any {\r\n    return {\r\n      ngModule: FxUserNotificationModule,\r\n      providers: [{\r\n        provide: NOTIFICATION_CONFIG,\r\n        useValue: notificationConfig\r\n      },\r\n        FxUserNotificationService]\r\n    }\r\n  }\r\n\r\n  public static forLocalDevelopment(notificationConfig: FxNotificationConfig): any {\r\n    return {\r\n      ngModule: FxUserNotificationModule,\r\n      providers: [\r\n        {\r\n          provide: NOTIFICATION_CONFIG,\r\n          useValue: notificationConfig\r\n        },\r\n        {\r\n          provide: FxUserNotificationService,\r\n          useClass: FxUserNotificationLocalDevelopmentService\r\n        }\r\n      ]\r\n    }\r\n  }\r\n}\r\n\r\nexport interface FxNotificationConfig {\r\n  notification_service_url: string\r\n}\r\n","import { Type } from '@angular/core'\r\nimport { JestOriginalFunction } from '../../../shared/types/jest.types'\r\nimport { JestExtended, JestSpyObject } from '../../interfaces/jest-extended'\r\n\r\nexport function getAllFunctionNames<T extends Type<any>>(clazz: T): PropertyKey[] {\r\n  if (typeof clazz === 'function') {\r\n    clazz = clazz.prototype\r\n  }\r\n  let foundedFunctionNames: PropertyKey[] = Reflect.ownKeys(clazz)\r\n  const parentClass = Object.getPrototypeOf(clazz)\r\n  if (!!parentClass && parentClass.constructor.name !== 'Object') {\r\n    foundedFunctionNames = [...foundedFunctionNames, ...getAllFunctionNames(parentClass)]\r\n  }\r\n  return foundedFunctionNames\r\n}\r\n\r\nconst createSpyObjWithFunctionArray = <K, T extends Type<any>>(originalFunctions: JestOriginalFunction[]): JestSpyObject<K> => {\r\n  let spyObject = {}\r\n\r\n  for (const originalFunction of originalFunctions) {\r\n    if (!!(originalFunction as JestExtended).originalFnName) {\r\n      const jestFunction = originalFunction as JestExtended\r\n      spyObject = {\r\n        ...spyObject,\r\n        // @ts-ignore\r\n        [jestFunction.originalFnName]: !!jestFunction.mockFunction ? jest.fn(jestFunction.mockFunction) : jest.fn(),\r\n      }\r\n    } else {\r\n      spyObject = {\r\n        ...spyObject,\r\n        // @ts-ignore\r\n        [originalFunction]: jest.fn(),\r\n      }\r\n    }\r\n  }\r\n  return spyObject as any\r\n}\r\n\r\nexport const createSpyObjFromClass = <K, T extends Type<any>>(clazz: T, ...originalFunctions: JestExtended[]): JestSpyObject<K> => {\r\n  const functionNames = getAllFunctionNames(clazz).sort()\r\n  if (functionNames && functionNames.length > 0) {\r\n    let functions: JestOriginalFunction[] = functionNames.filter(functionName => functionName !== 'constructor') as string[]\r\n    if (originalFunctions && originalFunctions.length > 0) {\r\n      functions =\r\n        [\r\n          ...functions.filter(functionName => originalFunctions.find(original => original.originalFnName === functionName) === undefined),\r\n          ...originalFunctions,\r\n        ]\r\n    }\r\n\r\n    return createSpyObjWithFunctionArray<K, T>(functions)\r\n  }\r\n  return null\r\n}\r\n\r\nexport const createSpyObj = <K, T extends Type<any>>(...originalFunctions: JestOriginalFunction[]): JestSpyObject<K> => {\r\n  return createSpyObjWithFunctionArray<K, T>(originalFunctions)\r\n}\r\n","import { BehaviorSubject } from 'rxjs'\r\n\r\nexport class ActivatedRouteMock {\r\n\r\n  public get testParams(): {} {\r\n    return this._testParams\r\n  }\r\n\r\n  public set testParams(params: {}) {\r\n    this._testParams = params\r\n    this.params.next(params)\r\n  }\r\n\r\n  public get testFragment(): string {\r\n    return this._fragment\r\n  }\r\n\r\n  public set testFragment(fragment: string) {\r\n    this._fragment = fragment\r\n    this.fragment.next(fragment)\r\n  }\r\n\r\n  public get testQueryParams(): {} {\r\n    return this._queryParams\r\n  }\r\n\r\n  public set testQueryParams(queryParams: {}) {\r\n    this._queryParams = queryParams\r\n    this.queryParams.next(queryParams)\r\n  }\r\n\r\n  public get snapshot(): {} {\r\n    return {\r\n      params: this.testParams,\r\n      queryParams: this.testQueryParams,\r\n      fragment: this.testFragment,\r\n    }\r\n  }\r\n\r\n  public get parent(): {} {\r\n    return {\r\n      fragment: this.fragment,\r\n      params: this.params,\r\n      queryParams: this.queryParams,\r\n    }\r\n  }\r\n\r\n  public fragment = new BehaviorSubject(this.testFragment)\r\n  public params = new BehaviorSubject(this.testParams)\r\n  public queryParams = new BehaviorSubject(this.testQueryParams)\r\n\r\n  private _testParams: {}\r\n\r\n  private _fragment: string\r\n\r\n  private _queryParams: {}\r\n\r\n}\r\n","export class AuthServiceMock {\r\n\r\n  public get isLoggedIn(): boolean {\r\n    return this._isLoggedIn\r\n  }\r\n\r\n  public set isLoggedIn(isLoggedIn: boolean) {\r\n    this._isLoggedIn = isLoggedIn\r\n  }\r\n\r\n  public set token(token: string) {\r\n    this._token = token\r\n  }\r\n\r\n  private _isLoggedIn = false\r\n\r\n  private _token = ''\r\n\r\n  public getAuthTokenHeaderString(): string {\r\n    return this.isLoggedIn ? this._token : ''\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core'\r\nimport { ActivatedRoute, Params } from '@angular/router'\r\n\r\n@Injectable()\r\nexport class RouterMock {\r\n\r\n  public navigate(target: string, params?: Params): Promise<boolean> {\r\n    return undefined\r\n  }\r\n\r\n  public navigateRelative(target: string, route?: ActivatedRoute): Promise<boolean> {\r\n    return undefined\r\n  }\r\n\r\n  public navigateBack(route: ActivatedRoute): Promise<boolean> {\r\n    return undefined\r\n  }\r\n}\r\n","import { get } from 'lodash'\r\nimport { Observable, of, Subject } from 'rxjs'\r\n\r\nexport interface ITranslateServiceMock {\r\n  onTranslationChange: Observable<any>\r\n  onLangChange: Observable<any>\r\n  onDefaultLangChange: Observable<any>\r\n\r\n  get(key: string | Array<string>, param?: Object): Observable<any>\r\n\r\n  instant(key: string): any\r\n\r\n  getBrowserLang(): string\r\n\r\n  getBrowserCultureLang(): string\r\n\r\n  getTranslation(lang: string): Observable<any>\r\n}\r\n\r\nexport interface ITranslateServiceMockConfig {\r\n  browserCulterLang?: string\r\n  currentLang?: string\r\n  translation?: { [key: string]: any }\r\n  translations?: { [key: string]: any }\r\n}\r\n\r\nexport class TranslateServiceMockImpl implements ITranslateServiceMock {\r\n  public onDefaultLangChange: Observable<any>\r\n  public onLangChange: Subject<any>\r\n  public onTranslationChange: Observable<any>\r\n\r\n  public get currentLang(): string {\r\n    return get(this._config, 'currentLang', this.getBrowserCultureLang().substr(0, 2))\r\n  }\r\n\r\n  public constructor(private _config: ITranslateServiceMockConfig) {\r\n    this.onLangChange = new Subject<any>()\r\n  }\r\n\r\n  public get(key: string | Array<string>, param?: Object): Observable<any> {\r\n    if (Array.isArray(key)) {\r\n      const keyMap = {}\r\n      key.forEach(k => {\r\n        keyMap[k] = this.instant(k)\r\n      })\r\n      return of(keyMap)\r\n    }\r\n    return of(this.instant(key))\r\n  }\r\n\r\n  public switchLanguage(language: any): void {\r\n    this.onLangChange.next(language)\r\n  }\r\n\r\n  public getBrowserCultureLang(): string {\r\n    return get(this._config, 'browserCultureLang', 'de-DE')\r\n  }\r\n\r\n  public getBrowserLang(): string {\r\n    const [browserLang]: string[] = this.getBrowserCultureLang().split('-')\r\n    return browserLang\r\n  }\r\n\r\n  public getTranslation(lang: string): Observable<any> {\r\n    return of(get(this._config, `translation.${lang}`, lang))\r\n  }\r\n\r\n  public instant(key: string): any {\r\n    return get(this._config, `translations.${key}`, key)\r\n  }\r\n\r\n}\r\n\r\nexport const translateServiceMock = new TranslateServiceMockImpl({})\r\n\r\nexport function createTranslateServiceMock(config: ITranslateServiceMockConfig): ITranslateServiceMock {\r\n  return new TranslateServiceMockImpl(config)\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { ActivatedRoute } from '@angular/router'\r\n\r\nimport { Observable } from 'rxjs'\r\nimport { AuthenticationService } from '../../../fx-security/services/authentication.service'\r\nimport { isDebugMode } from '../../helper/local-storage.helper'\r\n\r\n@Injectable()\r\nexport class DebugDataInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthenticationService,\r\n              private route: ActivatedRoute) {\r\n  }\r\n\r\n  /**\r\n   * interceptor for debug data instead of real data\r\n   * [example:\r\n   *  api call https://fx-part-demand-gateway-service-integration/ccs/api/v1/11/vehicle/\r\n   *  redirects to ./assets/mock-data/fx-part-demand-gateway-service-integration/ccs/api/v1/11/vehicle.json\r\n   * ]\r\n   */\r\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const queryParams = this.route.snapshot.queryParams\r\n    const debug = (queryParams['debug'] === 'true' || isDebugMode()) && queryParams['debug'] !== 'false'\r\n    const isLoggedIn = this.authService.isLoggedIn\r\n\r\n    let newRequest = request\r\n    const searchString = '.apps.emea.vwapps.io'\r\n    const index = request.url.indexOf(searchString)\r\n\r\n    if (isLoggedIn && debug && index > -1) {\r\n      const apiName = request.url.substring(request.url.indexOf('//') + 2, index)\r\n      let newUrl = request.url.substring(index + searchString.length).replace(/\\/\\s*$/, '')\r\n      newUrl = `./assets/mock-data/${apiName}${newUrl}.json`\r\n      newRequest = request.clone({\r\n        url: newUrl,\r\n        method: 'Get',\r\n      })\r\n    }\r\n    return next.handle(newRequest)\r\n  }\r\n}\r\n","import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http'\r\nimport { Injectable } from '@angular/core'\r\nimport { Observable } from 'rxjs'\r\nimport { AuthenticationService } from '../../../fx-security/services/authentication.service'\r\n\r\n@Injectable()\r\nexport class HttpTokenInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthenticationService) {\r\n  }\r\n\r\n  public intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const bearerToken = this.authService.getAuthTokenHeaderString()\r\n    const isLoggedIn = this.authService.isLoggedIn\r\n    let newRequest = request\r\n    if (isLoggedIn && bearerToken && request.url.indexOf('.apps.emea.vwapps.io') > -1) {\r\n      let url = newRequest.url\r\n      url = this.replaceHttpOrPrefixUrlWithHttps(url)\r\n      newRequest = request.clone({\r\n        setHeaders: {\r\n          Authorization: bearerToken,\r\n        },\r\n        url: url,\r\n      })\r\n    }\r\n    return next.handle(newRequest)\r\n  }\r\n\r\n  private replaceHttpOrPrefixUrlWithHttps(originalUrl: string): string {\r\n    let url = originalUrl\r\n    if (!url.startsWith('https')) {\r\n      if (url.startsWith('http:')) {\r\n        url = url.replace('http:', 'https:')\r\n      } else if (url.startsWith('//')) {\r\n        url = 'https:' + url\r\n      } else {\r\n        url = 'https://' + url\r\n      }\r\n    }\r\n    return url\r\n  }\r\n}\r\n","export function getShuffleArray(originalArray: Array<any>): Array<any> {\r\n  const array = Object.assign([], originalArray)\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]]\r\n  }\r\n  return array\r\n}\r\n\r\nexport function getUniqueArray(arrayFirst: Array<any>, propertyKey: string): Array<any> {\r\n  const unique = arrayFirst\r\n    .map(item => item[propertyKey])\r\n    .map((item, index, final) => final.indexOf(item) === index && index)\r\n    .filter(index => arrayFirst[index])\r\n    .map(index => arrayFirst[index])\r\n  return unique\r\n}\r\n"]}