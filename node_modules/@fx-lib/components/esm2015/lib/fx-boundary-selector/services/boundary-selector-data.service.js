/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class BoundarySelectorDataService {
    constructor() {
        this.boundaryResourceList$ = new BehaviorSubject([]);
        this.selectedBoundary$ = new BehaviorSubject(null);
    }
    /**
     * @param {?} boundaryResourceList
     * @return {?}
     */
    setBoundaryResourceList(boundaryResourceList) {
        if (this.boundaryResourceList$.getValue() === boundaryResourceList) {
            return;
        }
        this.boundaryResourceList$.next(boundaryResourceList);
        if (this.cachedBoundary != null) {
            this.setSelectedBoundaryByKey(this.cachedBoundary);
            this.cachedBoundary = null;
        }
        if (this.selectedBoundary$.getValue() == null) {
            this.setSelectedBoundaryToDefault();
        }
    }
    /**
     * @param {?} boundaryKey
     * @return {?}
     */
    setSelectedBoundaryByKey(boundaryKey) {
        /** @type {?} */
        const foundBoundary = this.getBoundaryByKey(boundaryKey);
        if (this.boundaryResourceList$.getValue().length < 1) {
            this.setSelectedBoundaryToDefault();
            this.cacheBoundaryKey(boundaryKey);
            return;
        }
        if (!foundBoundary) {
            this.setSelectedBoundaryToDefault();
            return;
        }
        if (this.selectedBoundary$.getValue() === foundBoundary) {
            return;
        }
        this.selectedBoundary$.next(foundBoundary);
    }
    /**
     * @param {?} boundary
     * @return {?}
     */
    setSelectedBoundary(boundary) {
        this.setSelectedBoundaryByKey(boundary.boundaryValueKey);
    }
    /**
     * @private
     * @param {?} boundaryKey
     * @return {?}
     */
    getBoundaryByKey(boundaryKey) {
        return this.boundaryResourceList$.getValue().find((/**
         * @param {?} x
         * @return {?}
         */
        x => x.boundaryValueKey === boundaryKey));
    }
    /**
     * @private
     * @return {?}
     */
    setSelectedBoundaryToDefault() {
        if (this.boundaryResourceList$.getValue() == null || this.boundaryResourceList$.getValue().length < 1) {
            this.selectedBoundary$.next(null);
            return;
        }
        this.selectedBoundary$.next(this.boundaryResourceList$.getValue()[0]);
    }
    /**
     * @private
     * @param {?} boundaryKey
     * @return {?}
     */
    cacheBoundaryKey(boundaryKey) {
        if (this.cachedBoundary === boundaryKey) {
            return;
        }
        this.cachedBoundary = boundaryKey;
    }
}
BoundarySelectorDataService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
BoundarySelectorDataService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    BoundarySelectorDataService.prototype.boundaryResourceList$;
    /** @type {?} */
    BoundarySelectorDataService.prototype.selectedBoundary$;
    /**
     * @type {?}
     * @private
     */
    BoundarySelectorDataService.prototype.cachedBoundary;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRhcnktc2VsZWN0b3ItZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LWJvdW5kYXJ5LXNlbGVjdG9yL3NlcnZpY2VzL2JvdW5kYXJ5LXNlbGVjdG9yLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBSXRDLE1BQU0sT0FBTywyQkFBMkI7SUFNcEM7UUFKTywwQkFBcUIsR0FBRyxJQUFJLGVBQWUsQ0FBNkIsRUFBRSxDQUFDLENBQUE7UUFDM0Usc0JBQWlCLEdBQUcsSUFBSSxlQUFlLENBQTJCLElBQUksQ0FBQyxDQUFBO0lBSTlFLENBQUM7Ozs7O0lBRU0sdUJBQXVCLENBQUMsb0JBQWdEO1FBQzNFLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxLQUFLLG9CQUFvQixFQUFFO1lBQ2hFLE9BQU07U0FDVDtRQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtRQUVyRCxJQUFJLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFFO1lBQzdCLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7WUFDbEQsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUE7U0FDN0I7UUFFRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxJQUFJLEVBQUU7WUFDM0MsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUE7U0FDdEM7SUFDTCxDQUFDOzs7OztJQUVNLHdCQUF3QixDQUFDLFdBQW1COztjQUN6QyxhQUFhLEdBQTZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7UUFDbEYsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNsRCxJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQTtZQUNuQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDbEMsT0FBTTtTQUNUO1FBRUQsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNoQixJQUFJLENBQUMsNEJBQTRCLEVBQUUsQ0FBQTtZQUNuQyxPQUFNO1NBQ1Q7UUFFRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxhQUFhLEVBQUU7WUFDckQsT0FBTTtTQUNUO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUM5QyxDQUFDOzs7OztJQUVNLG1CQUFtQixDQUFDLFFBQWtDO1FBQ3pELElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUM1RCxDQUFDOzs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxXQUFtQjtRQUN4QyxPQUFPLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLEtBQUssV0FBVyxFQUFDLENBQUE7SUFDOUYsQ0FBQzs7Ozs7SUFFTyw0QkFBNEI7UUFDaEMsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ25HLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDakMsT0FBTTtTQUNUO1FBRUQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN6RSxDQUFDOzs7Ozs7SUFFTyxnQkFBZ0IsQ0FBQyxXQUFtQjtRQUN4QyxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssV0FBVyxFQUFFO1lBQ3JDLE9BQU07U0FDVDtRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFBO0lBQ3JDLENBQUM7OztZQXRFSixVQUFVOzs7Ozs7SUFHUCw0REFBa0Y7O0lBQ2xGLHdEQUE4RTs7Ozs7SUFDOUUscURBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnXHJcbmltcG9ydCB7IEJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZSB9IGZyb20gJy4uL2RvbWFpbi9ib3VuZGFyeS1zZWxlY3Rvci1yZXNvdXJjZSdcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJvdW5kYXJ5U2VsZWN0b3JEYXRhU2VydmljZSB7XHJcblxyXG4gICAgcHVibGljIGJvdW5kYXJ5UmVzb3VyY2VMaXN0JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Qm91bmRhcnlTZWxlY3RvclJlc291cmNlW10+KFtdKVxyXG4gICAgcHVibGljIHNlbGVjdGVkQm91bmRhcnkkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2U+KG51bGwpXHJcbiAgICBwcml2YXRlIGNhY2hlZEJvdW5kYXJ5XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEJvdW5kYXJ5UmVzb3VyY2VMaXN0KGJvdW5kYXJ5UmVzb3VyY2VMaXN0OiBCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2VbXSk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmJvdW5kYXJ5UmVzb3VyY2VMaXN0JC5nZXRWYWx1ZSgpID09PSBib3VuZGFyeVJlc291cmNlTGlzdCkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYm91bmRhcnlSZXNvdXJjZUxpc3QkLm5leHQoYm91bmRhcnlSZXNvdXJjZUxpc3QpXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNhY2hlZEJvdW5kYXJ5ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEJvdW5kYXJ5QnlLZXkodGhpcy5jYWNoZWRCb3VuZGFyeSlcclxuICAgICAgICAgICAgdGhpcy5jYWNoZWRCb3VuZGFyeSA9IG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQm91bmRhcnkkLmdldFZhbHVlKCkgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkQm91bmRhcnlUb0RlZmF1bHQoKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0U2VsZWN0ZWRCb3VuZGFyeUJ5S2V5KGJvdW5kYXJ5S2V5OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBmb3VuZEJvdW5kYXJ5OiBCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2UgPSB0aGlzLmdldEJvdW5kYXJ5QnlLZXkoYm91bmRhcnlLZXkpXHJcbiAgICAgICAgaWYgKHRoaXMuYm91bmRhcnlSZXNvdXJjZUxpc3QkLmdldFZhbHVlKCkubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkQm91bmRhcnlUb0RlZmF1bHQoKVxyXG4gICAgICAgICAgICB0aGlzLmNhY2hlQm91bmRhcnlLZXkoYm91bmRhcnlLZXkpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFmb3VuZEJvdW5kYXJ5KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRCb3VuZGFyeVRvRGVmYXVsdCgpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRCb3VuZGFyeSQuZ2V0VmFsdWUoKSA9PT0gZm91bmRCb3VuZGFyeSkge1xyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRCb3VuZGFyeSQubmV4dChmb3VuZEJvdW5kYXJ5KVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRTZWxlY3RlZEJvdW5kYXJ5KGJvdW5kYXJ5OiBCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2UpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldFNlbGVjdGVkQm91bmRhcnlCeUtleShib3VuZGFyeS5ib3VuZGFyeVZhbHVlS2V5KVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Qm91bmRhcnlCeUtleShib3VuZGFyeUtleTogc3RyaW5nKTogQm91bmRhcnlTZWxlY3RvclJlc291cmNlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5ib3VuZGFyeVJlc291cmNlTGlzdCQuZ2V0VmFsdWUoKS5maW5kKHggPT4geC5ib3VuZGFyeVZhbHVlS2V5ID09PSBib3VuZGFyeUtleSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFNlbGVjdGVkQm91bmRhcnlUb0RlZmF1bHQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuYm91bmRhcnlSZXNvdXJjZUxpc3QkLmdldFZhbHVlKCkgPT0gbnVsbCB8fCB0aGlzLmJvdW5kYXJ5UmVzb3VyY2VMaXN0JC5nZXRWYWx1ZSgpLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEJvdW5kYXJ5JC5uZXh0KG51bGwpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZEJvdW5kYXJ5JC5uZXh0KHRoaXMuYm91bmRhcnlSZXNvdXJjZUxpc3QkLmdldFZhbHVlKClbMF0pXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYWNoZUJvdW5kYXJ5S2V5KGJvdW5kYXJ5S2V5OiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5jYWNoZWRCb3VuZGFyeSA9PT0gYm91bmRhcnlLZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNhY2hlZEJvdW5kYXJ5ID0gYm91bmRhcnlLZXlcclxuICAgIH1cclxufVxyXG4iXX0=