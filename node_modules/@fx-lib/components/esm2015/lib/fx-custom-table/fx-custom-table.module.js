/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { RouterModule } from '@angular/router';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { DataTableBodyComponent, NgxDatatableModule } from '@swimlane/ngx-datatable';
import { ContextMenuModule } from 'ngx-contextmenu';
import { FxTranslationModule } from '../fx-translation/fx-translation.module';
import { SharedModule } from '../shared/shared.module';
import { FxCustomTableComponent } from './fx-custom-table.component';
import { FxColorIndicatorsCellTemplateComponent } from './templates/color-indicators-cell-template/fx-color-indicators-cell-template.component';
/**
 * nasty fix for:
 * DataTableBodyComponent.html:64 ERROR TypeError: Cannot read property '0' of undefined at Object.eval [as updateDirectives] (DataTableBodyComponent.html:37)
 */
DataTableBodyComponent.prototype.updateRows = (/**
 * @return {?}
 */
function () {
    const { first, last } = this.indexes;
    /** @type {?} */
    let rowIndex = first;
    /** @type {?} */
    let idx = 0;
    /** @type {?} */
    const temp = [];
    this.rowIndexes.clear();
    if (this.groupedRows) {
        while (rowIndex < last && rowIndex < this.groupedRows.length) {
            // Add the groups into this page
            /** @type {?} */
            const group = this.groupedRows[rowIndex];
            temp[idx] = group;
            idx++;
            // Group index in this context
            rowIndex++;
        }
    }
    else {
        while (rowIndex < last && rowIndex < this.rowCount) {
            /** @type {?} */
            const row = this.rows[rowIndex];
            if (row) {
                this.rowIndexes.set(row, rowIndex);
                temp[idx] = row;
            }
            idx++;
            rowIndex++;
        }
    }
    this.temp = temp.filter((/**
     * @param {?} x
     * @return {?}
     */
    x => !!x));
});
export class FxCustomTableModule {
}
FxCustomTableModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FxColorIndicatorsCellTemplateComponent,
                    FxCustomTableComponent,
                ],
                imports: [
                    BrowserModule,
                    ContextMenuModule.forRoot(),
                    FormsModule,
                    FxTranslationModule,
                    NgbModule,
                    NgxDatatableModule,
                    SharedModule,
                    RouterModule,
                ],
                exports: [
                    FxColorIndicatorsCellTemplateComponent,
                    FxCustomTableComponent,
                ],
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtY3VzdG9tLXRhYmxlLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1jdXN0b20tdGFibGUvZngtY3VzdG9tLXRhYmxlLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN4QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFDNUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDdEQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUE7QUFDcEYsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDbkQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUNBQXlDLENBQUE7QUFDN0UsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3RELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDZCQUE2QixDQUFBO0FBQ3BFLE9BQU8sRUFBRSxzQ0FBc0MsRUFBRSxNQUFNLHdGQUF3RixDQUFBOzs7OztBQU0vSSxzQkFBc0IsQ0FBQyxTQUFTLENBQUMsVUFBVTs7O0FBQUc7VUFDdEMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLEdBQVEsSUFBSSxDQUFDLE9BQU87O1FBQ25DLFFBQVEsR0FBRyxLQUFLOztRQUNoQixHQUFHLEdBQUcsQ0FBQzs7VUFDTCxJQUFJLEdBQVUsRUFBRTtJQUV0QixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBRXZCLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtRQUNwQixPQUFPLFFBQVEsR0FBRyxJQUFJLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxFQUFFOzs7a0JBRXRELEtBQUssR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztZQUN4QyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFBO1lBQ2pCLEdBQUcsRUFBRSxDQUFBO1lBRUwsOEJBQThCO1lBQzlCLFFBQVEsRUFBRSxDQUFBO1NBQ1g7S0FDRjtTQUFNO1FBQ0wsT0FBTyxRQUFRLEdBQUcsSUFBSSxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxFQUFFOztrQkFDNUMsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO1lBRS9CLElBQUksR0FBRyxFQUFFO2dCQUNQLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtnQkFDbEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQTthQUNoQjtZQUVELEdBQUcsRUFBRSxDQUFBO1lBQ0wsUUFBUSxFQUFFLENBQUE7U0FDWDtLQUNGO0lBRUQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTTs7OztJQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFBO0FBQ25DLENBQUMsQ0FBQSxDQUFBO0FBdUJELE1BQU0sT0FBTyxtQkFBbUI7OztZQXJCL0IsUUFBUSxTQUFDO2dCQUNSLFlBQVksRUFBRTtvQkFDWixzQ0FBc0M7b0JBQ3RDLHNCQUFzQjtpQkFDdkI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLGFBQWE7b0JBQ2IsaUJBQWlCLENBQUMsT0FBTyxFQUFFO29CQUMzQixXQUFXO29CQUNYLG1CQUFtQjtvQkFDbkIsU0FBUztvQkFDVCxrQkFBa0I7b0JBQ2xCLFlBQVk7b0JBQ1osWUFBWTtpQkFDYjtnQkFDRCxPQUFPLEVBQUU7b0JBQ1Asc0NBQXNDO29CQUN0QyxzQkFBc0I7aUJBQ3ZCO2FBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnXHJcbmltcG9ydCB7IEJyb3dzZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJ1xyXG5pbXBvcnQgeyBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInXHJcbmltcG9ydCB7IE5nYk1vZHVsZSB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJ1xyXG5pbXBvcnQgeyBEYXRhVGFibGVCb2R5Q29tcG9uZW50LCBOZ3hEYXRhdGFibGVNb2R1bGUgfSBmcm9tICdAc3dpbWxhbmUvbmd4LWRhdGF0YWJsZSdcclxuaW1wb3J0IHsgQ29udGV4dE1lbnVNb2R1bGUgfSBmcm9tICduZ3gtY29udGV4dG1lbnUnXHJcbmltcG9ydCB7IEZ4VHJhbnNsYXRpb25Nb2R1bGUgfSBmcm9tICcuLi9meC10cmFuc2xhdGlvbi9meC10cmFuc2xhdGlvbi5tb2R1bGUnXHJcbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4uL3NoYXJlZC9zaGFyZWQubW9kdWxlJ1xyXG5pbXBvcnQgeyBGeEN1c3RvbVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnLi9meC1jdXN0b20tdGFibGUuY29tcG9uZW50J1xyXG5pbXBvcnQgeyBGeENvbG9ySW5kaWNhdG9yc0NlbGxUZW1wbGF0ZUNvbXBvbmVudCB9IGZyb20gJy4vdGVtcGxhdGVzL2NvbG9yLWluZGljYXRvcnMtY2VsbC10ZW1wbGF0ZS9meC1jb2xvci1pbmRpY2F0b3JzLWNlbGwtdGVtcGxhdGUuY29tcG9uZW50J1xyXG5cclxuLyoqXHJcbiAqIG5hc3R5IGZpeCBmb3I6XHJcbiAqIERhdGFUYWJsZUJvZHlDb21wb25lbnQuaHRtbDo2NCBFUlJPUiBUeXBlRXJyb3I6IENhbm5vdCByZWFkIHByb3BlcnR5ICcwJyBvZiB1bmRlZmluZWQgYXQgT2JqZWN0LmV2YWwgW2FzIHVwZGF0ZURpcmVjdGl2ZXNdIChEYXRhVGFibGVCb2R5Q29tcG9uZW50Lmh0bWw6MzcpXHJcbiAqL1xyXG5EYXRhVGFibGVCb2R5Q29tcG9uZW50LnByb3RvdHlwZS51cGRhdGVSb3dzID0gZnVuY3Rpb24gKCk6IHZvaWQge1xyXG4gIGNvbnN0IHtmaXJzdCwgbGFzdH06IGFueSA9IHRoaXMuaW5kZXhlc1xyXG4gIGxldCByb3dJbmRleCA9IGZpcnN0XHJcbiAgbGV0IGlkeCA9IDBcclxuICBjb25zdCB0ZW1wOiBhbnlbXSA9IFtdXHJcblxyXG4gIHRoaXMucm93SW5kZXhlcy5jbGVhcigpXHJcblxyXG4gIGlmICh0aGlzLmdyb3VwZWRSb3dzKSB7XHJcbiAgICB3aGlsZSAocm93SW5kZXggPCBsYXN0ICYmIHJvd0luZGV4IDwgdGhpcy5ncm91cGVkUm93cy5sZW5ndGgpIHtcclxuICAgICAgLy8gQWRkIHRoZSBncm91cHMgaW50byB0aGlzIHBhZ2VcclxuICAgICAgY29uc3QgZ3JvdXAgPSB0aGlzLmdyb3VwZWRSb3dzW3Jvd0luZGV4XVxyXG4gICAgICB0ZW1wW2lkeF0gPSBncm91cFxyXG4gICAgICBpZHgrK1xyXG5cclxuICAgICAgLy8gR3JvdXAgaW5kZXggaW4gdGhpcyBjb250ZXh0XHJcbiAgICAgIHJvd0luZGV4KytcclxuICAgIH1cclxuICB9IGVsc2Uge1xyXG4gICAgd2hpbGUgKHJvd0luZGV4IDwgbGFzdCAmJiByb3dJbmRleCA8IHRoaXMucm93Q291bnQpIHtcclxuICAgICAgY29uc3Qgcm93ID0gdGhpcy5yb3dzW3Jvd0luZGV4XVxyXG5cclxuICAgICAgaWYgKHJvdykge1xyXG4gICAgICAgIHRoaXMucm93SW5kZXhlcy5zZXQocm93LCByb3dJbmRleClcclxuICAgICAgICB0ZW1wW2lkeF0gPSByb3dcclxuICAgICAgfVxyXG5cclxuICAgICAgaWR4KytcclxuICAgICAgcm93SW5kZXgrK1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdGhpcy50ZW1wID0gdGVtcC5maWx0ZXIoeCA9PiAhIXgpXHJcbn1cclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICBGeENvbG9ySW5kaWNhdG9yc0NlbGxUZW1wbGF0ZUNvbXBvbmVudCxcclxuICAgIEZ4Q3VzdG9tVGFibGVDb21wb25lbnQsXHJcbiAgXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBCcm93c2VyTW9kdWxlLFxyXG4gICAgQ29udGV4dE1lbnVNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgRm9ybXNNb2R1bGUsXHJcbiAgICBGeFRyYW5zbGF0aW9uTW9kdWxlLFxyXG4gICAgTmdiTW9kdWxlLFxyXG4gICAgTmd4RGF0YXRhYmxlTW9kdWxlLFxyXG4gICAgU2hhcmVkTW9kdWxlLFxyXG4gICAgUm91dGVyTW9kdWxlLFxyXG4gIF0sXHJcbiAgZXhwb3J0czogW1xyXG4gICAgRnhDb2xvckluZGljYXRvcnNDZWxsVGVtcGxhdGVDb21wb25lbnQsXHJcbiAgICBGeEN1c3RvbVRhYmxlQ29tcG9uZW50LFxyXG4gIF0sXHJcblxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnhDdXN0b21UYWJsZU1vZHVsZSB7XHJcbn1cclxuIl19