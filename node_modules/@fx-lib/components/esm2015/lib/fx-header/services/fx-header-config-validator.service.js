/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
export class FxHeaderConfigValidatorService {
    constructor() { }
    /**
     * @param {?} config
     * @return {?}
     */
    validate(config) {
        if (!config.components) {
            return true;
        }
        return this.checkForUniqueEventNames(config.components);
    }
    /**
     * @private
     * @param {?} components
     * @return {?}
     */
    checkForUniqueEventNames(components) {
        /** @type {?} */
        let isUnique = true;
        /** @type {?} */
        const eventNames = [];
        components.forEach((/**
         * @param {?} component
         * @return {?}
         */
        component => {
            if (!component.config || !component.config.outputEvents || !isUnique) {
                return;
            }
            component.config.outputEvents.forEach((/**
             * @param {?} outputEvent
             * @return {?}
             */
            outputEvent => {
                if (eventNames.some((/**
                 * @param {?} x
                 * @return {?}
                 */
                x => x === outputEvent))) {
                    console.error('the fx-header config contains duplicate event names (' + outputEvent + '). all event names need to be unique.');
                    isUnique = false;
                }
                eventNames.push(outputEvent);
            }));
        }));
        return isUnique;
    }
}
FxHeaderConfigValidatorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FxHeaderConfigValidatorService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtaGVhZGVyLWNvbmZpZy12YWxpZGF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1oZWFkZXIvc2VydmljZXMvZngtaGVhZGVyLWNvbmZpZy12YWxpZGF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUsxQyxNQUFNLE9BQU8sOEJBQThCO0lBRXZDLGdCQUFnQixDQUFDOzs7OztJQUVWLFFBQVEsQ0FBQyxNQUEyQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQTtTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzNELENBQUM7Ozs7OztJQUVPLHdCQUF3QixDQUFDLFVBQTBDOztZQUNuRSxRQUFRLEdBQUcsSUFBSTs7Y0FDYixVQUFVLEdBQWEsRUFBRTtRQUUvQixVQUFVLENBQUMsT0FBTzs7OztRQUFDLFNBQVMsQ0FBQyxFQUFFO1lBQzNCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xFLE9BQU07YUFDVDtZQUVELFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7WUFBQyxXQUFXLENBQUMsRUFBRTtnQkFDaEQsSUFBSSxVQUFVLENBQUMsSUFBSTs7OztnQkFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsS0FBSyxXQUFXLEVBQUMsRUFBRTtvQkFDekMsT0FBTyxDQUFDLEtBQUssQ0FBQyx1REFBdUQsR0FBRyxXQUFXLEdBQUcsdUNBQXVDLENBQUMsQ0FBQTtvQkFDOUgsUUFBUSxHQUFHLEtBQUssQ0FBQTtpQkFDbkI7Z0JBRUQsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUNoQyxDQUFDLEVBQUMsQ0FBQTtRQUNOLENBQUMsRUFBQyxDQUFBO1FBRUYsT0FBTyxRQUFRLENBQUE7SUFDbkIsQ0FBQzs7O1lBakNKLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgRnhIZWFkZXJDb25maWdNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb25maWcvZngtaGVhZGVyLWNvbmZpZy5tb2RlbCdcclxuaW1wb3J0IHsgRnhIZWFkZXJDb21wb25lbnRDb25maWdNb2RlbCB9IGZyb20gJy4uL21vZGVscy9jb25maWcvZngtaGVhZGVyLWNvbXBvbmVudC1jb25maWcubW9kZWwnXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGeEhlYWRlckNvbmZpZ1ZhbGlkYXRvclNlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgcHVibGljIHZhbGlkYXRlKGNvbmZpZzogRnhIZWFkZXJDb25maWdNb2RlbCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICghY29uZmlnLmNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmNoZWNrRm9yVW5pcXVlRXZlbnROYW1lcyhjb25maWcuY29tcG9uZW50cylcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrRm9yVW5pcXVlRXZlbnROYW1lcyhjb21wb25lbnRzOiBGeEhlYWRlckNvbXBvbmVudENvbmZpZ01vZGVsW10pOiBib29sZWFuIHtcclxuICAgICAgICBsZXQgaXNVbmlxdWUgPSB0cnVlXHJcbiAgICAgICAgY29uc3QgZXZlbnROYW1lczogc3RyaW5nW10gPSBbXVxyXG5cclxuICAgICAgICBjb21wb25lbnRzLmZvckVhY2goY29tcG9uZW50ID0+IHtcclxuICAgICAgICAgICAgaWYgKCFjb21wb25lbnQuY29uZmlnIHx8ICFjb21wb25lbnQuY29uZmlnLm91dHB1dEV2ZW50cyB8fCAhaXNVbmlxdWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb21wb25lbnQuY29uZmlnLm91dHB1dEV2ZW50cy5mb3JFYWNoKG91dHB1dEV2ZW50ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChldmVudE5hbWVzLnNvbWUoeCA9PiB4ID09PSBvdXRwdXRFdmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCd0aGUgZngtaGVhZGVyIGNvbmZpZyBjb250YWlucyBkdXBsaWNhdGUgZXZlbnQgbmFtZXMgKCcgKyBvdXRwdXRFdmVudCArICcpLiBhbGwgZXZlbnQgbmFtZXMgbmVlZCB0byBiZSB1bmlxdWUuJylcclxuICAgICAgICAgICAgICAgICAgICBpc1VuaXF1ZSA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXZlbnROYW1lcy5wdXNoKG91dHB1dEV2ZW50KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHJldHVybiBpc1VuaXF1ZVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=