/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotificationsService, NotificationType } from 'angular2-notifications';
import { forkJoin, Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
/** @type {?} */
const i18nPrefix = 'i18n.fx-components.notification.';
/** @type {?} */
const configurations = {
    error: {
        timeOut: 5000
    },
    warn: {
        timeOut: 5000
    },
    info: {
        timeOut: 3000
    },
    success: {
        timeOut: 3000
    }
};
export class FxNotificationService {
    /**
     * @param {?} notifications
     * @param {?} translate
     * @param {?} router
     */
    constructor(notifications, translate, router) {
        this.notifications = notifications;
        this.translate = translate;
        this.errorNotifications = [];
        router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        event => event instanceof NavigationEnd)))
            .subscribe((/**
         * @return {?}
         */
        () => {
            this.errorNotifications.forEach((/**
             * @param {?} notification
             * @return {?}
             */
            (notification) => notifications.remove(notification.id)));
            this.errorNotifications = [];
        }));
    }
    /**
     * @param {?} messageType
     * @return {?}
     */
    error(messageType) {
        this.create(NotificationType.Error, messageType)
            .subscribe((/**
         * @param {?} notification
         * @return {?}
         */
        (notification) => this.errorNotifications.push(notification)));
    }
    /**
     * @param {?} messageType
     * @return {?}
     */
    warn(messageType) {
        this.create(NotificationType.Warn, messageType).subscribe();
    }
    /**
     * @param {?} messageType
     * @return {?}
     */
    info(messageType) {
        this.create(NotificationType.Info, messageType).subscribe();
    }
    /**
     * @param {?} messageType
     * @return {?}
     */
    success(messageType) {
        this.create(NotificationType.Success, messageType).subscribe();
    }
    /**
     * @param {?} statusCode
     * @param {?=} statusCodeDescriptionsType
     * @return {?}
     */
    httpError(statusCode, statusCodeDescriptionsType) {
        if (!statusCodeDescriptionsType) {
            statusCodeDescriptionsType = 'default';
        }
        /** @type {?} */
        const titleObservable = this.translateMessage(NotificationType.Error, 'type');
        /** @type {?} */
        const errorMessageObservable = this.translateMessage(NotificationType.Error, 'http.' + statusCodeDescriptionsType + '.' + statusCode);
        this.generateNotification(NotificationType.Error, titleObservable, errorMessageObservable).subscribe();
    }
    /**
     * @private
     * @param {?} type
     * @param {?} messageType
     * @return {?}
     */
    create(type, messageType) {
        /** @type {?} */
        const titleObservable = this.translateMessage(type, messageType + '.title');
        /** @type {?} */
        const messageObservable = this.translateMessage(type, messageType + '.message');
        return this.generateNotification(type, titleObservable, messageObservable);
    }
    /**
     * @private
     * @param {?} type
     * @param {?} titleObservable
     * @param {?} messageObservable
     * @return {?}
     */
    generateNotification(type, titleObservable, messageObservable) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            forkJoin([titleObservable, messageObservable]).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                /** @type {?} */
                const title = result[0];
                /** @type {?} */
                const message = result[1];
                /** @type {?} */
                const notification = this.notifications.create(title, message, type, configurations[type]);
                observer.next(notification);
                observer.complete();
            }));
        }));
    }
    /**
     * @private
     * @param {?} type
     * @param {?} i18nMessage
     * @return {?}
     */
    translateMessage(type, i18nMessage) {
        return this.translate.get(i18nPrefix + type + '.' + i18nMessage);
    }
}
FxNotificationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FxNotificationService.ctorParameters = () => [
    { type: NotificationsService },
    { type: TranslateService },
    { type: Router }
];
if (false) {
    /** @type {?} */
    FxNotificationService.prototype.errorNotifications;
    /**
     * @type {?}
     * @private
     */
    FxNotificationService.prototype.notifications;
    /**
     * @type {?}
     * @private
     */
    FxNotificationService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,