/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { AuthenticationService } from '../services/authentication.service';
import { AuthorizationService } from '../services/authorization.service';
export class HasRoleDirective {
    /**
     * @param {?} _viewContainer
     * @param {?} templateRef
     * @param {?} authService
     * @param {?} authorizationService
     * @param {?} changeDetector
     */
    constructor(_viewContainer, templateRef, authService, authorizationService, changeDetector) {
        this._viewContainer = _viewContainer;
        this.authorizationService = authorizationService;
        this.changeDetector = changeDetector;
        this._context = new HasRoleContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
        this.loginEventsSubscription = authService.loginEvents.subscribe((/**
         * @return {?}
         */
        () => {
            this._updateView();
            this.changeDetector.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loginEventsSubscription) {
            this.loginEventsSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    set hasRole(condition) {
        this._context.$implicit = this._context.hasRole = condition;
        this._updateView();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set hasRoleFactory(value) {
        this._context.factory = value;
        this._updateView();
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    set hasRoleThen(templateRef) {
        this._thenTemplateRef = templateRef;
        this._thenViewRef = null; // clear previous view if any.
        this._updateView();
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    set hasRoleElse(templateRef) {
        this._elseTemplateRef = templateRef;
        this._elseViewRef = null; // clear previous view if any.
        this._updateView();
    }
    /**
     * @private
     * @return {?}
     */
    _updateView() {
        /** @type {?} */
        let hasRole = false;
        if (this._context && this._context.$implicit) {
            if (typeof this._context.factory === 'string' && this._context.factory.length > 0) {
                hasRole = this.authorizationService.hasRoleForBoundary(this._context.$implicit, this._context.factory);
            }
            else {
                hasRole = this._context && this._context.$implicit && this.authorizationService.hasRole(this._context.$implicit);
            }
        }
        if (hasRole) {
            if (!this._thenViewRef) {
                this._viewContainer.clear();
                this._elseViewRef = null;
                if (this._thenTemplateRef) {
                    this._thenViewRef =
                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
            }
        }
        else {
            if (!this._elseViewRef) {
                this._viewContainer.clear();
                this._thenViewRef = null;
                if (this._elseTemplateRef) {
                    this._elseViewRef =
                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
            }
        }
    }
}
HasRoleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appHasRole]'
            },] }
];
/** @nocollapse */
HasRoleDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: AuthenticationService },
    { type: AuthorizationService },
    { type: ChangeDetectorRef }
];
HasRoleDirective.propDecorators = {
    hasRole: [{ type: Input }],
    hasRoleFactory: [{ type: Input }],
    hasRoleThen: [{ type: Input }],
    hasRoleElse: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._context;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._thenTemplateRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._elseTemplateRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._thenViewRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._elseViewRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype.loginEventsSubscription;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype.authorizationService;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype.changeDetector;
}
export class HasRoleContext {
    constructor() {
        this.$implicit = null;
        this.hasRole = null;
        this.factory = null;
    }
}
if (false) {
    /** @type {?} */
    HasRoleContext.prototype.$implicit;
    /** @type {?} */
    HasRoleContext.prototype.hasRole;
    /** @type {?} */
    HasRoleContext.prototype.factory;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGFzLXJvbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXNlY3VyaXR5L2RpcmVjdGl2ZXMvaGFzLXJvbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFtQixLQUFLLEVBQWEsV0FBVyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZUFBZSxDQUFBO0FBRTlILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFBO0FBQzFFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFBO0FBS3hFLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7Ozs7O0lBVTNCLFlBQW9CLGNBQWdDLEVBQ2xELFdBQXdDLEVBQ3hDLFdBQWtDLEVBQzFCLG9CQUEwQyxFQUMxQyxjQUFpQztRQUp2QixtQkFBYyxHQUFkLGNBQWMsQ0FBa0I7UUFHMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyxtQkFBYyxHQUFkLGNBQWMsQ0FBbUI7UUFabkMsYUFBUSxHQUFtQixJQUFJLGNBQWMsRUFBRSxDQUFBO1FBQy9DLHFCQUFnQixHQUF1QyxJQUFJLENBQUE7UUFDM0QscUJBQWdCLEdBQXVDLElBQUksQ0FBQTtRQUMzRCxpQkFBWSxHQUEyQyxJQUFJLENBQUE7UUFDM0QsaUJBQVksR0FBMkMsSUFBSSxDQUFBO1FBU2pFLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxXQUFXLENBQUE7UUFFbkMsSUFBSSxDQUFDLHVCQUF1QixHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsU0FBUzs7O1FBQUMsR0FBRyxFQUFFO1lBQ3BFLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtZQUNsQixJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBQ3BDLENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQzs7OztJ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LFdBQVc7WUFFNUUscUJBQXFCO1lBQ3JCLG9CQUFvQjtZQUhwQixpQkFBaUI7OztzQkFxQ3ZCLEtBQUs7NkJBTUwsS0FBSzswQkFNTCxLQUFLOzBCQU9MLEtBQUs7Ozs7Ozs7SUE5Q04sb0NBQXVEOzs7OztJQUN2RCw0Q0FBbUU7Ozs7O0lBQ25FLDRDQUFtRTs7Ozs7SUFDbkUsd0NBQW1FOzs7OztJQUNuRSx3Q0FBbUU7Ozs7O0lBRW5FLG1EQUE2Qzs7Ozs7SUFFakMsMENBQXdDOzs7OztJQUdsRCxnREFBa0Q7Ozs7O0lBQ2xELDBDQUF5Qzs7QUF3RTdDLE1BQU0sT0FBTyxjQUFjO0lBQTNCO1FBQ1MsY0FBUyxHQUFHLElBQUksQ0FBQTtRQUNoQixZQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ2QsWUFBTyxHQUFXLElBQUksQ0FBQTtJQUMvQixDQUFDO0NBQUE7OztJQUhDLG1DQUF1Qjs7SUFDdkIsaUNBQXFCOztJQUNyQixpQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcydcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZSdcclxuaW1wb3J0IHsgQXV0aG9yaXphdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRob3JpemF0aW9uLnNlcnZpY2UnXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1thcHBIYXNSb2xlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEhhc1JvbGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG5cclxuICBwcml2YXRlIF9jb250ZXh0OiBIYXNSb2xlQ29udGV4dCA9IG5ldyBIYXNSb2xlQ29udGV4dCgpXHJcbiAgcHJpdmF0ZSBfdGhlblRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxIYXNSb2xlQ29udGV4dD4gfCBudWxsID0gbnVsbFxyXG4gIHByaXZhdGUgX2Vsc2VUZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8SGFzUm9sZUNvbnRleHQ+IHwgbnVsbCA9IG51bGxcclxuICBwcml2YXRlIF90aGVuVmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPEhhc1JvbGVDb250ZXh0PiB8IG51bGwgPSBudWxsXHJcbiAgcHJpdmF0ZSBfZWxzZVZpZXdSZWY6IEVtYmVkZGVkVmlld1JlZjxIYXNSb2xlQ29udGV4dD4gfCBudWxsID0gbnVsbFxyXG5cclxuICBwcml2YXRlIGxvZ2luRXZlbnRzU3Vic2NyaXB0aW9uOiBTdWJzY3JpcHRpb25cclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBfdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxIYXNSb2xlQ29udGV4dD4sXHJcbiAgICBhdXRoU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBhdXRob3JpemF0aW9uU2VydmljZTogQXV0aG9yaXphdGlvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIGNoYW5nZURldGVjdG9yOiBDaGFuZ2VEZXRlY3RvclJlZikge1xyXG4gICAgdGhpcy5fdGhlblRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWZcclxuXHJcbiAgICB0aGlzLmxvZ2luRXZlbnRzU3Vic2NyaXB0aW9uID0gYXV0aFNlcnZpY2UubG9naW5FdmVudHMuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgdGhpcy5fdXBkYXRlVmlldygpXHJcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3IubWFya0ZvckNoZWNrKClcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5sb2dpbkV2ZW50c1N1YnNjcmlwdGlvbikge1xyXG4gICAgICB0aGlzLmxvZ2luRXZlbnRzU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGhhc1JvbGUoY29uZGl0aW9uOiBhbnkpIHtcclxuICAgIHRoaXMuX2NvbnRleHQuJGltcGxpY2l0ID0gdGhpcy5fY29udGV4dC5oYXNSb2xlID0gY29uZGl0aW9uXHJcbiAgICB0aGlzLl91cGRhdGVWaWV3KClcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGhhc1JvbGVGYWN0b3J5KHZhbHVlOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX2NvbnRleHQuZmFjdG9yeSA9IHZhbHVlXHJcbiAgICB0aGlzLl91cGRhdGVWaWV3KClcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGhhc1JvbGVUaGVuKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxIYXNSb2xlQ29udGV4dD4pIHtcclxuICAgIHRoaXMuX3RoZW5UZW1wbGF0ZVJlZiA9IHRlbXBsYXRlUmVmXHJcbiAgICB0aGlzLl90aGVuVmlld1JlZiA9IG51bGwgIC8vIGNsZWFyIHByZXZpb3VzIHZpZXcgaWYgYW55LlxyXG4gICAgdGhpcy5fdXBkYXRlVmlldygpXHJcbiAgfVxyXG5cclxuICBASW5wdXQoKVxyXG4gIHNldCBoYXNSb2xlRWxzZSh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8SGFzUm9sZUNvbnRleHQ+KSB7XHJcbiAgICB0aGlzLl9lbHNlVGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZlxyXG4gICAgdGhpcy5fZWxzZVZpZXdSZWYgPSBudWxsICAvLyBjbGVhciBwcmV2aW91cyB2aWV3IGlmIGFueS5cclxuICAgIHRoaXMuX3VwZGF0ZVZpZXcoKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBfdXBkYXRlVmlldygpOiB2b2lkIHtcclxuICAgIGxldCBoYXNSb2xlID0gZmFsc2VcclxuICAgIGlmICh0aGlzLl9jb250ZXh0ICYmIHRoaXMuX2NvbnRleHQuJGltcGxpY2l0KSB7XHJcbiAgICAgIGlmICh0eXBlb2YgdGhpcy5fY29udGV4dC5mYWN0b3J5ID09PSAnc3RyaW5nJyAmJiB0aGlzLl9jb250ZXh0LmZhY3RvcnkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIGhhc1JvbGUgPSB0aGlzLmF1dGhvcml6YXRpb25TZXJ2aWNlLmhhc1JvbGVGb3JCb3VuZGFyeSh0aGlzLl9jb250ZXh0LiRpbXBsaWNpdCwgdGhpcy5fY29udGV4dC5mYWN0b3J5KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGhhc1JvbGUgPSB0aGlzLl9jb250ZXh0ICYmIHRoaXMuX2NvbnRleHQuJGltcGxpY2l0ICYmIHRoaXMuYXV0aG9yaXphdGlvblNlcnZpY2UuaGFzUm9sZSh0aGlzLl9jb250ZXh0LiRpbXBsaWNpdClcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGhhc1JvbGUpIHtcclxuICAgICAgaWYgKCF0aGlzLl90aGVuVmlld1JlZikge1xyXG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXIuY2xlYXIoKVxyXG4gICAgICAgIHRoaXMuX2Vsc2VWaWV3UmVmID0gbnVsbFxyXG4gICAgICAgIGlmICh0aGlzLl90aGVuVGVtcGxhdGVSZWYpIHtcclxuICAgICAgICAgIHRoaXMuX3RoZW5WaWV3UmVmID1cclxuICAgICAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fdGhlblRlbXBsYXRlUmVmLCB0aGlzLl9jb250ZXh0KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKCF0aGlzLl9lbHNlVmlld1JlZikge1xyXG4gICAgICAgIHRoaXMuX3ZpZXdDb250YWluZXIuY2xlYXIoKVxyXG4gICAgICAgIHRoaXMuX3RoZW5WaWV3UmVmID0gbnVsbFxyXG4gICAgICAgIGlmICh0aGlzLl9lbHNlVGVtcGxhdGVSZWYpIHtcclxuICAgICAgICAgIHRoaXMuX2Vsc2VWaWV3UmVmID1cclxuICAgICAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lci5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fZWxzZVRlbXBsYXRlUmVmLCB0aGlzLl9jb250ZXh0KVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhhc1JvbGVDb250ZXh0IHtcclxuICBwdWJsaWMgJGltcGxpY2l0ID0gbnVsbFxyXG4gIHB1YmxpYyBoYXNSb2xlID0gbnVsbFxyXG4gIHB1YmxpYyBmYWN0b3J5OiBzdHJpbmcgPSBudWxsXHJcbn1cclxuIl19