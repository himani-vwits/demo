/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { AuthenticationService } from '../services/authentication.service';
export class IsLoggedInDirective {
    /**
     * @param {?} authService
     * @param {?} _viewContainer
     * @param {?} templateRef
     * @param {?} changeDetector
     */
    constructor(authService, _viewContainer, templateRef, changeDetector) {
        this.authService = authService;
        this._viewContainer = _viewContainer;
        this.changeDetector = changeDetector;
        this._context = new IsLoggedInContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
        this.loginEventsSubscription = authService.loginEvents.subscribe((/**
         * @return {?}
         */
        () => {
            this._updateView();
            this.changeDetector.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.loginEventsSubscription) {
            this.loginEventsSubscription.unsubscribe();
        }
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    set hasRole(condition) {
        this._context.$implicit = condition;
        this._updateView();
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    set hasRoleThen(templateRef) {
        this._thenTemplateRef = templateRef;
        this._thenViewRef = null; // clear previous view if any.
        this._updateView();
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    set hasRoleElse(templateRef) {
        this._elseTemplateRef = templateRef;
        this._elseViewRef = null; // clear previous view if any.
        this._updateView();
    }
    /**
     * @private
     * @return {?}
     */
    _updateView() {
        if (this.authService.isLoggedIn) {
            if (!this._thenViewRef) {
                this._viewContainer.clear();
                this._elseViewRef = null;
                if (this._thenTemplateRef) {
                    this._thenViewRef =
                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
            }
        }
        else {
            if (!this._elseViewRef) {
                this._viewContainer.clear();
                this._thenViewRef = null;
                if (this._elseTemplateRef) {
                    this._elseViewRef =
                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
            }
        }
    }
}
IsLoggedInDirective.decorators = [
    { type: Directive, args: [{
                selector: '[appIsLoggedIn]'
            },] }
];
/** @nocollapse */
IsLoggedInDirective.ctorParameters = () => [
    { type: AuthenticationService },
    { type: ViewContainerRef },
    { type: TemplateRef },
    { type: ChangeDetectorRef }
];
IsLoggedInDirective.propDecorators = {
    hasRole: [{ type: Input }],
    hasRoleThen: [{ type: Input }],
    hasRoleElse: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype._context;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype._thenTemplateRef;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype._elseTemplateRef;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype._thenViewRef;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype._elseViewRef;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype.loginEventsSubscription;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    IsLoggedInDirective.prototype.changeDetector;
}
export class IsLoggedInContext {
    constructor() {
        this.$implicit = null;
    }
}
if (false) {
    /** @type {?} */
    IsLoggedInContext.prototype.$implicit;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXMtbG9nZ2VkLWluLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1zZWN1cml0eS9kaXJlY3RpdmVzL2lzLWxvZ2dlZC1pbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQW1CLEtBQUssRUFBYSxXQUFXLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFOUgsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFLMUUsTUFBTSxPQUFPLG1CQUFtQjs7Ozs7OztJQVU5QixZQUFvQixXQUFrQyxFQUM1QyxjQUFnQyxFQUN4QyxXQUEyQyxFQUNuQyxjQUFpQztRQUh2QixnQkFBVyxHQUFYLFdBQVcsQ0FBdUI7UUFDNUMsbUJBQWMsR0FBZCxjQUFjLENBQWtCO1FBRWhDLG1CQUFjLEdBQWQsY0FBYyxDQUFtQjtRQVhuQyxhQUFRLEdBQXNCLElBQUksaUJBQWlCLEVBQUUsQ0FBQTtRQUNyRCxxQkFBZ0IsR0FBMEMsSUFBSSxDQUFBO1FBQzlELHFCQUFnQixHQUEwQyxJQUFJLENBQUE7UUFDOUQsaUJBQVksR0FBOEMsSUFBSSxDQUFBO1FBQzlELGlCQUFZLEdBQThDLElBQUksQ0FBQTtRQVFwRSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsV0FBVyxDQUFBO1FBRW5DLElBQUksQ0FBQyx1QkFBdUIsR0FBRyxXQUFXLENBQUMsV0FBVyxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUNwRSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7WUFDbEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUNwQyxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLElBQUksSUFBSSxDQUFDLHVCQUF1QixFQUFFO1lBQ2hDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtTQUMzQztJQUNILENBQUM7Ozs7O0lBRUQsSUFDSSxPQUFPLENBQUMsU0FBYztRQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUE7UUFDbkMsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQ3BCLENBQUM7Ozs7O0lBRUQsSUFDSSxXQUFXLENBQUMsV0FBMkM7UUFDekQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFdBQVcsQ0FBQTtRQUNuQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQSxDQUFFLDhCQUE4QjtRQUN4RCxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7SUFDcEIsQ0FBQzs7Ozs7SUFFRCxJQUNJLFdBQVcsQ0FBQyxXQUEyQztRQUN6RCxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsV0FBVyxDQUFBO1FBQ25DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBLENBQUUsOEJBQThCO1FBQ3hELElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNwQixDQUFDOzs7OztJQUVPLFdBQVc7UUFDakIsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRTtZQUMvQixJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsQ0FBQTtnQkFDM0IsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUE7Z0JBQ3hCLElBQUksSUFBSSxDQUFDLGdCQUFnQixFQUFFO29CQUN6QixJQUFJLENBQUMsWUFBWTt3QkFDZixJQUFJLENBQUMsY0FBYyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUE7aUJBQy9FO2FBQ0Y7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUE7Z0JBQzNCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFBO2dCQUN4QixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDekIsSUFBSSxDQUFDLFlBQVk7d0JBQ2YsSUFBSSxDQUFDLGNBQWMsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO2lCQUMvRTthQUNGO1NBQ0Y7SUFDSCxDQUFDOzs7WUF2RUYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7YUFDNUI7Ozs7WUFKUSxxQkFBcUI7WUFGeUQsZ0JBQWdCO1lBQTdCLFdBQVc7WUFBNUUsaUJBQWlCOzs7c0JBbUN2QixLQUFLOzBCQU1MLEtBQUs7MEJBT0wsS0FBSzs7Ozs7OztJQXZDTix1Q0FBNkQ7Ozs7O0lBQzdELCtDQUFzRTs7Ozs7SUFDdEUsK0NBQXNFOzs7OztJQUN0RSwyQ0FBc0U7Ozs7O0lBQ3RFLDJDQUFzRTs7Ozs7SUFFdEUsc0RBQTZDOzs7OztJQUVqQywwQ0FBMEM7Ozs7O0lBQ3BELDZDQUF3Qzs7Ozs7SUFFeEMsNkNBQXlDOztBQTBEN0MsTUFBTSxPQUFPLGlCQUFpQjtJQUE5QjtRQUNTLGNBQVMsR0FBRyxJQUFJLENBQUE7SUFDekIsQ0FBQztDQUFBOzs7SUFEQyxzQ0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbWJlZGRlZFZpZXdSZWYsIElucHV0LCBPbkRlc3Ryb3ksIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcydcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZSdcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2FwcElzTG9nZ2VkSW5dJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgSXNMb2dnZWRJbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XHJcblxyXG4gIHByaXZhdGUgX2NvbnRleHQ6IElzTG9nZ2VkSW5Db250ZXh0ID0gbmV3IElzTG9nZ2VkSW5Db250ZXh0KClcclxuICBwcml2YXRlIF90aGVuVGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPElzTG9nZ2VkSW5Db250ZXh0PiB8IG51bGwgPSBudWxsXHJcbiAgcHJpdmF0ZSBfZWxzZVRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxJc0xvZ2dlZEluQ29udGV4dD4gfCBudWxsID0gbnVsbFxyXG4gIHByaXZhdGUgX3RoZW5WaWV3UmVmOiBFbWJlZGRlZFZpZXdSZWY8SXNMb2dnZWRJbkNvbnRleHQ+IHwgbnVsbCA9IG51bGxcclxuICBwcml2YXRlIF9lbHNlVmlld1JlZjogRW1iZWRkZWRWaWV3UmVmPElzTG9nZ2VkSW5Db250ZXh0PiB8IG51bGwgPSBudWxsXHJcblxyXG4gIHByaXZhdGUgbG9naW5FdmVudHNTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvblxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsXHJcbiAgICBwcml2YXRlIF92aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPElzTG9nZ2VkSW5Db250ZXh0PixcclxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICB0aGlzLl90aGVuVGVtcGxhdGVSZWYgPSB0ZW1wbGF0ZVJlZlxyXG5cclxuICAgIHRoaXMubG9naW5FdmVudHNTdWJzY3JpcHRpb24gPSBhdXRoU2VydmljZS5sb2dpbkV2ZW50cy5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLl91cGRhdGVWaWV3KClcclxuICAgICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmxvZ2luRXZlbnRzU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgIHRoaXMubG9naW5FdmVudHNTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgaGFzUm9sZShjb25kaXRpb246IGFueSkge1xyXG4gICAgdGhpcy5fY29udGV4dC4kaW1wbGljaXQgPSBjb25kaXRpb25cclxuICAgIHRoaXMuX3VwZGF0ZVZpZXcoKVxyXG4gIH1cclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgaGFzUm9sZVRoZW4odGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPElzTG9nZ2VkSW5Db250ZXh0Pikge1xyXG4gICAgdGhpcy5fdGhlblRlbXBsYXRlUmVmID0gdGVtcGxhdGVSZWZcclxuICAgIHRoaXMuX3RoZW5WaWV3UmVmID0gbnVsbCAgLy8gY2xlYXIgcHJldmlvdXMgdmlldyBpZiBhbnkuXHJcbiAgICB0aGlzLl91cGRhdGVWaWV3KClcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IGhhc1JvbGVFbHNlKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxJc0xvZ2dlZEluQ29udGV4dD4pIHtcclxuICAgIHRoaXMuX2Vsc2VUZW1wbGF0ZVJlZiA9IHRlbXBsYXRlUmVmXHJcbiAgICB0aGlzLl9lbHNlVmlld1JlZiA9IG51bGwgIC8vIGNsZWFyIHByZXZpb3VzIHZpZXcgaWYgYW55LlxyXG4gICAgdGhpcy5fdXBkYXRlVmlldygpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIF91cGRhdGVWaWV3KCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuYXV0aFNlcnZpY2UuaXNMb2dnZWRJbikge1xyXG4gICAgICBpZiAoIXRoaXMuX3RoZW5WaWV3UmVmKSB7XHJcbiAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lci5jbGVhcigpXHJcbiAgICAgICAgdGhpcy5fZWxzZVZpZXdSZWYgPSBudWxsXHJcbiAgICAgICAgaWYgKHRoaXMuX3RoZW5UZW1wbGF0ZVJlZikge1xyXG4gICAgICAgICAgdGhpcy5fdGhlblZpZXdSZWYgPVxyXG4gICAgICAgICAgICB0aGlzLl92aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl90aGVuVGVtcGxhdGVSZWYsIHRoaXMuX2NvbnRleHQpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoIXRoaXMuX2Vsc2VWaWV3UmVmKSB7XHJcbiAgICAgICAgdGhpcy5fdmlld0NvbnRhaW5lci5jbGVhcigpXHJcbiAgICAgICAgdGhpcy5fdGhlblZpZXdSZWYgPSBudWxsXHJcbiAgICAgICAgaWYgKHRoaXMuX2Vsc2VUZW1wbGF0ZVJlZikge1xyXG4gICAgICAgICAgdGhpcy5fZWxzZVZpZXdSZWYgPVxyXG4gICAgICAgICAgICB0aGlzLl92aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl9lbHNlVGVtcGxhdGVSZWYsIHRoaXMuX2NvbnRleHQpXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgSXNMb2dnZWRJbkNvbnRleHQge1xyXG4gIHB1YmxpYyAkaW1wbGljaXQgPSBudWxsXHJcbn1cclxuIl19