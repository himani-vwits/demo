/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FxUserSelectorComponent } from './components/fx-user-selector/fx-user-selector.component';
import { FxTranslationModule } from '../fx-translation/fx-translation.module';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { IdpLoginComponent } from './components/idp-login/idp-login.component';
import { LoginErrorComponent } from './components/login-error/login-error.component';
import { LoggedOutComponent } from './components/logged-out/logged-out.component';
import { IsLoggedInDirective } from './directives/is-logged-in.directive';
import { HasRoleDirective } from './directives/has-role.directive';
import { LogoutDirective } from './directives/logout.directive';
import { AuthGuard } from './guards/auth-guard.service';
import { AuthenticationService } from './services/authentication.service';
import { NotLoggedInAuthGuard } from './guards/not-logged-in-auth-guard.service';
import { RedirectorService } from './services/redirector.service';
import { AuthenticatingInterceptorService } from './services/authenticating-interceptor.service';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { SECURITY_CONFIG } from './domain/security-config';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import { faSignOutAlt as fasSignOutAlt } from '@fortawesome/free-solid-svg-icons/faSignOutAlt';
import { faBan as fasBan } from '@fortawesome/free-solid-svg-icons/faBan';
import { faAngry as farAngry } from '@fortawesome/free-regular-svg-icons/faAngry';
import { faExclamation as fasExclamation } from '@fortawesome/free-solid-svg-icons/faExclamation';
import { faUser as fasUser } from '@fortawesome/free-solid-svg-icons/faUser';
import { AuthorizationService } from './services/authorization.service';
import { LoginService } from './services/login.service';
import { UserService } from './services/user.service';
import { FxLoginComponent } from './components/fx-login/fx-login.component';
import { NoPermissionsComponent } from './components/no-permissions/no-permissions.component';
library.add(fasUser, fasSignOutAlt, fasBan, farAngry, fasExclamation);
export class FxSecurityModule {
    /**
     * @param {?} securityConfig
     * @return {?}
     */
    static forRoot(securityConfig) {
        return {
            ngModule: FxSecurityModule,
            providers: [{
                    provide: SECURITY_CONFIG,
                    useValue: securityConfig
                },
                AuthenticationService,
                AuthorizationService,
                LoginService,
                UserService
            ]
        };
    }
}
FxSecurityModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FxUserSelectorComponent,
                    IdpLoginComponent,
                    LoginErrorComponent,
                    LoggedOutComponent,
                    NoPermissionsComponent,
                    IsLoggedInDirective,
                    HasRoleDirective,
                    LogoutDirective,
                    FxLoginComponent
                ],
                providers: [
                    AuthGuard,
                    NotLoggedInAuthGuard,
                    AuthenticationService,
                    AuthorizationService,
                    RedirectorService,
                    LoginService,
                    {
                        provide: HTTP_INTERCEPTORS,
                        useClass: AuthenticatingInterceptorService,
                        multi: true
                    },
                    UserService
                ],
                exports: [
                    FxUserSelectorComponent,
                    FxLoginComponent,
                    IdpLoginComponent,
                    IsLoggedInDirective,
                    HasRoleDirective,
                    LogoutDirective
                ],
                imports: [
                    CommonModule,
                    FxTranslationModule,
                    NgbDropdownModule,
                    FontAwesomeModule
                ]
            },] }
];
/**
 * @record
 */
export function SecurityConfig() { }
if (false) {
    /** @type {?} */
    SecurityConfig.prototype.authorization_service_url;
    /** @type {?} */
    SecurityConfig.prototype.authorization_ui_url;
    /** @type {?} */
    SecurityConfig.prototype.app_name;
    /** @type {?} */
    SecurityConfig.prototype.app_domain;
    /** @type {?} */
    SecurityConfig.prototype.idp_base_url;
    /** @type {?} */
    SecurityConfig.prototype.client_id;
    /** @type {?} */
    SecurityConfig.prototype.login_redirect_url;
    /** @type {?} */
    SecurityConfig.prototype.logout_redirect_url;
    /** @type {?} */
    SecurityConfig.prototype.roles;
    /** @type {?} */
    SecurityConfig.prototype.boundary_name;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtc2VjdXJpdHkubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXNlY3VyaXR5L2Z4LXNlY3VyaXR5Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUN4QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDOUMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMERBQTBELENBQUE7QUFDbEcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUNBQXlDLENBQUE7QUFDN0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDOUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sNENBQTRDLENBQUE7QUFDOUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0RBQWdELENBQUE7QUFDcEYsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOENBQThDLENBQUE7QUFDakYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0scUNBQXFDLENBQUE7QUFDekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUNBQWlDLENBQUE7QUFDbEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLCtCQUErQixDQUFBO0FBQy9ELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQTtBQUN2RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQTtBQUN6RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQ0FBMkMsQ0FBQTtBQUNoRixPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQTtBQUNqRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQTtBQUNoRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQTtBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDcEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG1DQUFtQyxDQUFBO0FBQzNELE9BQU8sRUFBRSxZQUFZLElBQUksYUFBYSxFQUFFLE1BQU0sZ0RBQWdELENBQUE7QUFDOUYsT0FBTyxFQUFFLEtBQUssSUFBSSxNQUFNLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQTtBQUN6RSxPQUFPLEVBQUUsT0FBTyxJQUFJLFFBQVEsRUFBRSxNQUFNLDZDQUE2QyxDQUFBO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLElBQUksY0FBYyxFQUFFLE1BQU0saURBQWlELENBQUE7QUFDakcsT0FBTyxFQUFFLE1BQU0sSUFBSSxPQUFPLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQUM1RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQTtBQUN2RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDdkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ3JELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFBO0FBQzNFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFBO0FBRTdGLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLGNBQWMsQ0FBQyxDQUFBO0FBMkNyRSxNQUFNLE9BQU8sZ0JBQWdCOzs7OztJQUNwQixNQUFNLENBQUMsT0FBTyxDQUFDLGNBQThCO1FBQ2xELE9BQU87WUFDTCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLFNBQVMsRUFBRSxDQUFDO29CQUNWLE9BQU8sRUFBRSxlQUFlO29CQUN4QixRQUFRLEVBQUUsY0FBYztpQkFDekI7Z0JBQ0MscUJBQXFCO2dCQUNyQixvQkFBb0I7Z0JBQ3BCLFlBQVk7Z0JBQ1osV0FBVzthQUNaO1NBQ0YsQ0FBQTtJQUNILENBQUM7OztZQXZERixRQUFRLFNBQUM7Z0JBQ1IsWUFBWSxFQUFFO29CQUNaLHVCQUF1QjtvQkFDdkIsaUJBQWlCO29CQUNqQixtQkFBbUI7b0JBQ25CLGtCQUFrQjtvQkFDbEIsc0JBQXNCO29CQUN0QixtQkFBbUI7b0JBQ25CLGdCQUFnQjtvQkFDaEIsZUFBZTtvQkFDZixnQkFBZ0I7aUJBQ2pCO2dCQUNELFNBQVMsRUFBRTtvQkFDVCxTQUFTO29CQUNULG9CQUFvQjtvQkFDcEIscUJBQXFCO29CQUNyQixvQkFBb0I7b0JBQ3BCLGlCQUFpQjtvQkFDakIsWUFBWTtvQkFDWjt3QkFDRSxPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixRQUFRLEVBQUUsZ0NBQWdDO3dCQUMxQyxLQUFLLEVBQUUsSUFBSTtxQkFDWjtvQkFDRCxXQUFXO2lCQUNaO2dCQUNELE9BQU8sRUFBRTtvQkFDUCx1QkFBdUI7b0JBQ3ZCLGdCQUFnQjtvQkFDaEIsaUJBQWlCO29CQUNqQixtQkFBbUI7b0JBQ25CLGdCQUFnQjtvQkFDaEIsZUFBZTtpQkFDaEI7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLFlBQVk7b0JBQ1osbUJBQW1CO29CQUNuQixpQkFBaUI7b0JBQ2pCLGlCQUFpQjtpQkFDbEI7YUFDRjs7Ozs7QUFrQkQsb0NBZUM7OztJQWRDLG1EQUFpQzs7SUFDakMsOENBQTRCOztJQUM1QixrQ0FBZ0I7O0lBQ2hCLG9DQUFrQjs7SUFDbEIsc0NBQW9COztJQUNwQixtQ0FBaUI7O0lBQ2pCLDRDQUEwQjs7SUFDMUIsNkNBQTJCOztJQUMzQiwrQkFJQzs7SUFDRCx1Q0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbidcclxuaW1wb3J0IHsgRnhVc2VyU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZngtdXNlci1zZWxlY3Rvci9meC11c2VyLXNlbGVjdG9yLmNvbXBvbmVudCdcclxuaW1wb3J0IHsgRnhUcmFuc2xhdGlvbk1vZHVsZSB9IGZyb20gJy4uL2Z4LXRyYW5zbGF0aW9uL2Z4LXRyYW5zbGF0aW9uLm1vZHVsZSdcclxuaW1wb3J0IHsgTmdiRHJvcGRvd25Nb2R1bGUgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgSWRwTG9naW5Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvaWRwLWxvZ2luL2lkcC1sb2dpbi5jb21wb25lbnQnXHJcbmltcG9ydCB7IExvZ2luRXJyb3JDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbG9naW4tZXJyb3IvbG9naW4tZXJyb3IuY29tcG9uZW50J1xyXG5pbXBvcnQgeyBMb2dnZWRPdXRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbG9nZ2VkLW91dC9sb2dnZWQtb3V0LmNvbXBvbmVudCdcclxuaW1wb3J0IHsgSXNMb2dnZWRJbkRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9pcy1sb2dnZWQtaW4uZGlyZWN0aXZlJ1xyXG5pbXBvcnQgeyBIYXNSb2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2hhcy1yb2xlLmRpcmVjdGl2ZSdcclxuaW1wb3J0IHsgTG9nb3V0RGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2xvZ291dC5kaXJlY3RpdmUnXHJcbmltcG9ydCB7IEF1dGhHdWFyZCB9IGZyb20gJy4vZ3VhcmRzL2F1dGgtZ3VhcmQuc2VydmljZSdcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBOb3RMb2dnZWRJbkF1dGhHdWFyZCB9IGZyb20gJy4vZ3VhcmRzL25vdC1sb2dnZWQtaW4tYXV0aC1ndWFyZC5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBSZWRpcmVjdG9yU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvcmVkaXJlY3Rvci5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGluZ0ludGVyY2VwdG9yU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYXV0aGVudGljYXRpbmctaW50ZXJjZXB0b3Iuc2VydmljZSdcclxuaW1wb3J0IHsgSFRUUF9JTlRFUkNFUFRPUlMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCdcclxuaW1wb3J0IHsgU0VDVVJJVFlfQ09ORklHIH0gZnJvbSAnLi9kb21haW4vc2VjdXJpdHktY29uZmlnJ1xyXG5pbXBvcnQgeyBGb250QXdlc29tZU1vZHVsZSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9hbmd1bGFyLWZvbnRhd2Vzb21lJ1xyXG5pbXBvcnQgeyBsaWJyYXJ5IH0gZnJvbSAnQGZvcnRhd2Vzb21lL2ZvbnRhd2Vzb21lLXN2Zy1jb3JlJ1xyXG5pbXBvcnQgeyBmYVNpZ25PdXRBbHQgYXMgZmFzU2lnbk91dEFsdCB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYVNpZ25PdXRBbHQnXHJcbmltcG9ydCB7IGZhQmFuIGFzIGZhc0JhbiB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXNvbGlkLXN2Zy1pY29ucy9mYUJhbidcclxuaW1wb3J0IHsgZmFBbmdyeSBhcyBmYXJBbmdyeSB9IGZyb20gJ0Bmb3J0YXdlc29tZS9mcmVlLXJlZ3VsYXItc3ZnLWljb25zL2ZhQW5ncnknXHJcbmltcG9ydCB7IGZhRXhjbGFtYXRpb24gYXMgZmFzRXhjbGFtYXRpb24gfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFFeGNsYW1hdGlvbidcclxuaW1wb3J0IHsgZmFVc2VyIGFzIGZhc1VzZXIgfSBmcm9tICdAZm9ydGF3ZXNvbWUvZnJlZS1zb2xpZC1zdmctaWNvbnMvZmFVc2VyJ1xyXG5pbXBvcnQgeyBBdXRob3JpemF0aW9uU2VydmljZSB9IGZyb20gJy4vc2VydmljZXMvYXV0aG9yaXphdGlvbi5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBMb2dpblNlcnZpY2UgfSBmcm9tICcuL3NlcnZpY2VzL2xvZ2luLnNlcnZpY2UnXHJcbmltcG9ydCB7IFVzZXJTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy91c2VyLnNlcnZpY2UnXHJcbmltcG9ydCB7IEZ4TG9naW5Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZngtbG9naW4vZngtbG9naW4uY29tcG9uZW50J1xyXG5pbXBvcnQgeyBOb1Blcm1pc3Npb25zQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL25vLXBlcm1pc3Npb25zL25vLXBlcm1pc3Npb25zLmNvbXBvbmVudCdcclxuXHJcbmxpYnJhcnkuYWRkKGZhc1VzZXIsIGZhc1NpZ25PdXRBbHQsIGZhc0JhbiwgZmFyQW5ncnksIGZhc0V4Y2xhbWF0aW9uKVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtcclxuICAgIEZ4VXNlclNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgSWRwTG9naW5Db21wb25lbnQsXHJcbiAgICBMb2dpbkVycm9yQ29tcG9uZW50LFxyXG4gICAgTG9nZ2VkT3V0Q29tcG9uZW50LFxyXG4gICAgTm9QZXJtaXNzaW9uc0NvbXBvbmVudCxcclxuICAgIElzTG9nZ2VkSW5EaXJlY3RpdmUsXHJcbiAgICBIYXNSb2xlRGlyZWN0aXZlLFxyXG4gICAgTG9nb3V0RGlyZWN0aXZlLFxyXG4gICAgRnhMb2dpbkNvbXBvbmVudFxyXG4gIF0sXHJcbiAgcHJvdmlkZXJzOiBbXHJcbiAgICBBdXRoR3VhcmQsXHJcbiAgICBOb3RMb2dnZWRJbkF1dGhHdWFyZCxcclxuICAgIEF1dGhlbnRpY2F0aW9uU2VydmljZSxcclxuICAgIEF1dGhvcml6YXRpb25TZXJ2aWNlLFxyXG4gICAgUmVkaXJlY3RvclNlcnZpY2UsXHJcbiAgICBMb2dpblNlcnZpY2UsXHJcbiAgICB7XHJcbiAgICAgIHByb3ZpZGU6IEhUVFBfSU5URVJDRVBUT1JTLFxyXG4gICAgICB1c2VDbGFzczogQXV0aGVudGljYXRpbmdJbnRlcmNlcHRvclNlcnZpY2UsXHJcbiAgICAgIG11bHRpOiB0cnVlXHJcbiAgICB9LFxyXG4gICAgVXNlclNlcnZpY2VcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIEZ4VXNlclNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgRnhMb2dpbkNvbXBvbmVudCxcclxuICAgIElkcExvZ2luQ29tcG9uZW50LFxyXG4gICAgSXNMb2dnZWRJbkRpcmVjdGl2ZSxcclxuICAgIEhhc1JvbGVEaXJlY3RpdmUsXHJcbiAgICBMb2dvdXREaXJlY3RpdmVcclxuICBdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZSxcclxuICAgIEZ4VHJhbnNsYXRpb25Nb2R1bGUsXHJcbiAgICBOZ2JEcm9wZG93bk1vZHVsZSxcclxuICAgIEZvbnRBd2Vzb21lTW9kdWxlXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnhTZWN1cml0eU1vZHVsZSB7XHJcbiAgcHVibGljIHN0YXRpYyBmb3JSb290KHNlY3VyaXR5Q29uZmlnOiBTZWN1cml0eUNvbmZpZyk6IGFueSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBuZ01vZHVsZTogRnhTZWN1cml0eU1vZHVsZSxcclxuICAgICAgcHJvdmlkZXJzOiBbe1xyXG4gICAgICAgIHByb3ZpZGU6IFNFQ1VSSVRZX0NPTkZJRyxcclxuICAgICAgICB1c2VWYWx1ZTogc2VjdXJpdHlDb25maWdcclxuICAgICAgfSxcclxuICAgICAgICBBdXRoZW50aWNhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgQXV0aG9yaXphdGlvblNlcnZpY2UsXHJcbiAgICAgICAgTG9naW5TZXJ2aWNlLFxyXG4gICAgICAgIFVzZXJTZXJ2aWNlXHJcbiAgICAgIF1cclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU2VjdXJpdHlDb25maWcge1xyXG4gIGF1dGhvcml6YXRpb25fc2VydmljZV91cmw6IHN0cmluZ1xyXG4gIGF1dGhvcml6YXRpb25fdWlfdXJsOiBzdHJpbmdcclxuICBhcHBfbmFtZTogc3RyaW5nXHJcbiAgYXBwX2RvbWFpbjogc3RyaW5nXHJcbiAgaWRwX2Jhc2VfdXJsOiBzdHJpbmdcclxuICBjbGllbnRfaWQ6IHN0cmluZ1xyXG4gIGxvZ2luX3JlZGlyZWN0X3VybDogc3RyaW5nXHJcbiAgbG9nb3V0X3JlZGlyZWN0X3VybDogc3RyaW5nXHJcbiAgcm9sZXM6IHtcclxuICAgIHZpZXc6IHN0cmluZ1tdLFxyXG4gICAgZWRpdDogc3RyaW5nW10sXHJcbiAgICBkZXZvcHM6IHN0cmluZ1tdXHJcbiAgfVxyXG4gIGJvdW5kYXJ5X25hbWU6IHN0cmluZ1xyXG59XHJcbiJdfQ==