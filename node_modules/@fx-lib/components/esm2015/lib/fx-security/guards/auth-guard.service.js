/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AuthenticationService } from '../services/authentication.service';
import { AuthorizationService } from '../services/authorization.service';
/** @type {?} */
const NO_PERMISSION_ROUTE = 'no-permission';
export class AuthGuard {
    /**
     * @param {?} authenticationService
     * @param {?} authorizationService
     * @param {?} router
     */
    constructor(authenticationService, authorizationService, router) {
        this.authenticationService = authenticationService;
        this.authorizationService = authorizationService;
        this.router = router;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        return this.checkLogin(state.url) && this.checkRoles(route.data) && this.checkBoundaryValue(route.data, route.paramMap);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    checkLogin(url) {
        if (this.authenticationService.isLoggedIn) {
            return true;
        }
        this.authenticationService.redirectToIdpLogin(url);
        return false;
    }
    /**
     * @private
     * @param {?} data
     * @param {?} paramMap
     * @return {?}
     */
    checkBoundaryValue(data, paramMap) {
        /** @type {?} */
        let hasPermission = false;
        if (!data || !data.boundaryParamName) {
            return true;
        }
        if (this.authorizationService.hasDevopsRole()) {
            return true;
        }
        this.authenticationService.getPayload().roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            if (this.authorizationService.hasRoleForBoundary(role.role, paramMap.get(data.boundaryParamName))) {
                hasPermission = true;
                return;
            }
        }));
        if (!hasPermission) {
            this.router.navigateByUrl(NO_PERMISSION_ROUTE);
        }
        return hasPermission;
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    checkRoles(data) {
        /** @type {?} */
        let hasPermission = false;
        if (!data || !data.roles) {
            return true;
        }
        data.roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        role => {
            /** @type {?} */
            const requiredRoleName = role;
            /** @type {?} */
            const hasRole = this.authorizationService.hasRole(requiredRoleName);
            if (hasRole) {
                hasPermission = true;
                return;
            }
        }));
        if (!hasPermission) {
            this.router.navigateByUrl(NO_PERMISSION_ROUTE);
        }
        return hasPermission;
    }
}
AuthGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthGuard.ctorParameters = () => [
    { type: AuthenticationService },
    { type: AuthorizationService },
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.authenticationService;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.authorizationService;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXNlY3VyaXR5L2d1YXJkcy9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDMUMsT0FBTyxFQUF1RCxNQUFNLEVBQXVCLE1BQU0saUJBQWlCLENBQUE7QUFDbEgsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUE7O01BRWxFLG1CQUFtQixHQUFHLGVBQWU7QUFHM0MsTUFBTSxPQUFPLFNBQVM7Ozs7OztJQUVwQixZQUFvQixxQkFBNEMsRUFDNUMsb0JBQTBDLEVBQzFDLE1BQWM7UUFGZCwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUNsQyxDQUFDOzs7Ozs7SUFFTSxXQUFXLENBQUMsS0FBNkIsRUFBRSxLQUEwQjtRQUMxRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUN6SCxDQUFDOzs7Ozs7SUFFTyxVQUFVLENBQUMsR0FBVztRQUM1QixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUNELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUVsRCxPQUFPLEtBQUssQ0FBQTtJQUNkLENBQUM7Ozs7Ozs7SUFFTyxrQkFBa0IsQ0FBQyxJQUFVLEVBQUUsUUFBa0I7O1lBQ25ELGFBQWEsR0FBRyxLQUFLO1FBRXpCLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7WUFDcEMsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsRUFBRSxFQUFFO1lBQzdDLE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFFRCxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxJQUFJLENBQUMsRUFBRTtZQUMzRCxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRTtnQkFDakcsYUFBYSxHQUFHLElBQUksQ0FBQTtnQkFDcEIsT0FBTTthQUNQO1FBQ0gsQ0FBQyxFQUFDLENBQUE7UUFFRixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDL0M7UUFFRCxPQUFPLGFBQWEsQ0FBQTtJQUN0QixDQUFDOzs7Ozs7SUFFTyxVQUFVLENBQUMsSUFBVTs7WUFDdkIsYUFBYSxHQUFHLEtBQUs7UUFFekIsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDeEIsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTzs7OztRQUFDLElBQUksQ0FBQyxFQUFFOztrQkFDbEIsZ0JBQWdCLEdBQUcsSUFBSTs7a0JBRXZCLE9BQU8sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1lBQ25FLElBQUksT0FBTyxFQUFFO2dCQUNYLGFBQWEsR0FBRyxJQUFJLENBQUE7Z0JBQ3BCLE9BQU07YUFDUDtRQUNILENBQUMsRUFBQyxDQUFBO1FBRUYsSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO1NBQy9DO1FBRUQsT0FBTyxhQUFhLENBQUE7SUFDdEIsQ0FBQzs7O1lBcEVGLFVBQVU7Ozs7WUFMRixxQkFBcUI7WUFDckIsb0JBQW9CO1lBRmlDLE1BQU07Ozs7Ozs7SUFTdEQsMENBQW9EOzs7OztJQUNwRCx5Q0FBa0Q7Ozs7O0lBQ2xELDJCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBDYW5BY3RpdmF0ZSwgRGF0YSwgUGFyYW1NYXAsIFJvdXRlciwgUm91dGVyU3RhdGVTbmFwc2hvdCB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcidcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZSdcclxuaW1wb3J0IHsgQXV0aG9yaXphdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRob3JpemF0aW9uLnNlcnZpY2UnXHJcblxyXG5jb25zdCBOT19QRVJNSVNTSU9OX1JPVVRFID0gJ25vLXBlcm1pc3Npb24nXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdXRoR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aGVudGljYXRpb25TZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBhdXRob3JpemF0aW9uU2VydmljZTogQXV0aG9yaXphdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tMb2dpbihzdGF0ZS51cmwpICYmIHRoaXMuY2hlY2tSb2xlcyhyb3V0ZS5kYXRhKSAmJiB0aGlzLmNoZWNrQm91bmRhcnlWYWx1ZShyb3V0ZS5kYXRhLCByb3V0ZS5wYXJhbU1hcClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tMb2dpbih1cmw6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmlzTG9nZ2VkSW4pIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLnJlZGlyZWN0VG9JZHBMb2dpbih1cmwpXHJcblxyXG4gICAgcmV0dXJuIGZhbHNlXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrQm91bmRhcnlWYWx1ZShkYXRhOiBEYXRhLCBwYXJhbU1hcDogUGFyYW1NYXApOiBib29sZWFuIHtcclxuICAgIGxldCBoYXNQZXJtaXNzaW9uID0gZmFsc2VcclxuXHJcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEuYm91bmRhcnlQYXJhbU5hbWUpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5hdXRob3JpemF0aW9uU2VydmljZS5oYXNEZXZvcHNSb2xlKCkpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRQYXlsb2FkKCkucm9sZXMuZm9yRWFjaChyb2xlID0+IHtcclxuICAgICAgaWYgKHRoaXMuYXV0aG9yaXphdGlvblNlcnZpY2UuaGFzUm9sZUZvckJvdW5kYXJ5KHJvbGUucm9sZSwgcGFyYW1NYXAuZ2V0KGRhdGEuYm91bmRhcnlQYXJhbU5hbWUpKSkge1xyXG4gICAgICAgIGhhc1Blcm1pc3Npb24gPSB0cnVlXHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICAgIH1cclxuICAgIH0pXHJcblxyXG4gICAgaWYgKCFoYXNQZXJtaXNzaW9uKSB7XHJcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoTk9fUEVSTUlTU0lPTl9ST1VURSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaGFzUGVybWlzc2lvblxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja1JvbGVzKGRhdGE6IERhdGEpOiBib29sZWFuIHtcclxuICAgIGxldCBoYXNQZXJtaXNzaW9uID0gZmFsc2VcclxuXHJcbiAgICBpZiAoIWRhdGEgfHwgIWRhdGEucm9sZXMpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBkYXRhLnJvbGVzLmZvckVhY2gocm9sZSA9PiB7XHJcbiAgICAgIGNvbnN0IHJlcXVpcmVkUm9sZU5hbWUgPSByb2xlXHJcblxyXG4gICAgICBjb25zdCBoYXNSb2xlID0gdGhpcy5hdXRob3JpemF0aW9uU2VydmljZS5oYXNSb2xlKHJlcXVpcmVkUm9sZU5hbWUpXHJcbiAgICAgIGlmIChoYXNSb2xlKSB7XHJcbiAgICAgICAgaGFzUGVybWlzc2lvbiA9IHRydWVcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoIWhhc1Blcm1pc3Npb24pIHtcclxuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChOT19QRVJNSVNTSU9OX1JPVVRFKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoYXNQZXJtaXNzaW9uXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=