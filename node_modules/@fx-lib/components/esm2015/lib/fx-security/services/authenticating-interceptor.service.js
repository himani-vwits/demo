/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { AuthenticationService } from './authentication.service';
export class AuthenticatingInterceptorService {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const authenticationService = this.injector.get(AuthenticationService);
        /** @type {?} */
        let newRequest = request;
        if (authenticationService.isLoggedIn) {
            newRequest = request.clone({
                setHeaders: {
                    Authorization: authenticationService.getAuthTokenHeaderString()
                }
            });
        }
        else {
            newRequest = request;
        }
        return next.handle(newRequest);
    }
}
AuthenticatingInterceptorService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthenticatingInterceptorService.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthenticatingInterceptorService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpbmctaW50ZXJjZXB0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1zZWN1cml0eS9zZXJ2aWNlcy9hdXRoZW50aWNhdGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUdwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUdoRSxNQUFNLE9BQU8sZ0NBQWdDOzs7O0lBRTNDLFlBQW9CLFFBQWtCO1FBQWxCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFBSSxDQUFDOzs7Ozs7SUFFcEMsU0FBUyxDQUFDLE9BQXlCLEVBQUUsSUFBaUI7O2NBQ3JELHFCQUFxQixHQUEwQixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQzs7WUFDekYsVUFBVSxHQUFHLE9BQU87UUFDeEIsSUFBSSxxQkFBcUIsQ0FBQyxVQUFVLEVBQUU7WUFDcEMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ3pCLFVBQVUsRUFBRTtvQkFDVixhQUFhLEVBQUUscUJBQXFCLENBQUMsd0JBQXdCLEVBQUU7aUJBQ2hFO2FBQ0YsQ0FBQyxDQUFBO1NBQ0g7YUFBTTtZQUNMLFVBQVUsR0FBRyxPQUFPLENBQUE7U0FDckI7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDaEMsQ0FBQzs7O1lBbEJGLFVBQVU7Ozs7WUFMVSxRQUFROzs7Ozs7O0lBUWYsb0RBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJ1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBBdXRoZW50aWNhdGluZ0ludGVyY2VwdG9yU2VydmljZSBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7IH1cclxuXHJcbiAgcHVibGljIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgIGNvbnN0IGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoQXV0aGVudGljYXRpb25TZXJ2aWNlKVxyXG4gICAgbGV0IG5ld1JlcXVlc3QgPSByZXF1ZXN0XHJcbiAgICBpZiAoYXV0aGVudGljYXRpb25TZXJ2aWNlLmlzTG9nZ2VkSW4pIHtcclxuICAgICAgbmV3UmVxdWVzdCA9IHJlcXVlc3QuY2xvbmUoe1xyXG4gICAgICAgIHNldEhlYWRlcnM6IHtcclxuICAgICAgICAgIEF1dGhvcml6YXRpb246IGF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRBdXRoVG9rZW5IZWFkZXJTdHJpbmcoKVxyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5ld1JlcXVlc3QgPSByZXF1ZXN0XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUobmV3UmVxdWVzdClcclxuICB9XHJcblxyXG59XHJcbiJdfQ==