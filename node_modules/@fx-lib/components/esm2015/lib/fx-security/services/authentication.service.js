/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { getBase64DecodeUrlSafe, getBase64EncodeUrlSafe } from '../../shared/helper/base64.helper';
import { SECURITY_CONFIG } from '../domain/security-config';
import { LoginService } from './login.service';
import { RedirectorService } from './redirector.service';
/**
 * @record
 */
function HashParams() { }
/** @type {?} */
export const TOKEN_KEY = 'URS_TOKEN';
/** @type {?} */
export const ID_TOKEN_KEY = 'URS_ID_TOKEN';
/**
 * @record
 */
export function IdpIdentityToken() { }
if (false) {
    /** @type {?} */
    IdpIdentityToken.prototype.token;
    /** @type {?} */
    IdpIdentityToken.prototype.state;
    /** @type {?} */
    IdpIdentityToken.prototype.app;
}
export class AuthenticationService {
    /**
     * @param {?} loginService
     * @param {?} router
     * @param {?} redirectorService
     * @param {?} securityConfig
     */
    constructor(loginService, router, redirectorService, securityConfig) {
        this.loginService = loginService;
        this.router = router;
        this.redirectorService = redirectorService;
        this.isLoggedIn = false;
        this.loginEvents = new BehaviorSubject('loggedout');
        this.initTokenFromStorage();
        this.securityConfig = securityConfig;
    }
    /**
     * @return {?}
     */
    get token() {
        return this._token || '';
    }
    /**
     * @param {?} token
     * @return {?}
     */
    set token(token) {
        this._token = token;
    }
    /**
     * @param {?} identityToken
     * @return {?}
     */
    login(identityToken) {
        return this.loginService.login(identityToken)
            .pipe(tap((/**
         * @param {?} token
         * @return {?}
         */
        (token) => {
            this.initLogin(token, identityToken);
            this.loginEvents.next('loggedin');
        }), (/**
         * @return {?}
         */
        () => {
            this.removeLoginInformation();
            this.router.navigateByUrl('/login-error');
        })), map((/**
         * @return {?}
         */
        () => identityToken)));
    }
    /**
     * @return {?}
     */
    logout() {
        // Check for ID token
        /** @type {?} */
        const idToken = localStorage.getItem(ID_TOKEN_KEY);
        this.removeLoginInformation();
        if (idToken) {
            this.redirectorService.redirectToUrl(this.buildIdpLogoutUrl(idToken));
        }
        else {
            this.router.navigateByUrl('/');
        }
    }
    /**
     * @return {?}
     */
    getAuthTokenHeaderString() {
        return 'Bearer ' + this.token;
    }
    /**
     * @return {?}
     */
    initTokenFromStorage() {
        /** @type {?} */
        const storedToken = localStorage.getItem(TOKEN_KEY);
        if (storedToken == null) {
            return;
        }
        try {
            /** @type {?} */
            const parts = storedToken.split('.');
            /** @type {?} */
            const payload = JSON.parse(atob(parts[1]));
            /** @type {?} */
            const until = new Date(payload.exp * 1000);
            /** @type {?} */
            const now = new Date();
            if (now < until) {
                this.token = storedToken;
                this.isLoggedIn = true;
                this.loginEvents.next('loggedin');
            }
        }
        catch (ex) {
            this.removeLoginInformation();
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loginFromUrlToken(url) {
        /** @type {?} */
        const identityToken = this.extractTokenFromUrl(url);
        return this.login(identityToken);
    }
    /**
     * @return {?}
     */
    getPayload() {
        if (this.isLoggedIn) {
            /** @type {?} */
            const token = this.token;
            /** @type {?} */
            const parts = token.split('.');
            if (parts.length >= 2) {
                return JSON.parse(atob(parts[1]));
            }
        }
        return { roles: [], username: '' };
    }
    /**
     * @return {?}
     */
    loginWithRedirectUrl() {
        this.redirectToIdpLogin(this.securityConfig.login_redirect_url);
    }
    /**
     * @param {?} targetUrl
     * @return {?}
     */
    redirectToIdpLogin(targetUrl) {
        this.redirectorService.redirectToUrl(this.buildIdpLoginUrl(targetUrl));
    }
    /**
     * @private
     * @param {?} token
     * @param {?} identityToken
     * @return {?}
     */
    initLogin(token, identityToken) {
        this.token = token;
        this.isLoggedIn = true;
        localStorage.setItem(TOKEN_KEY, token);
        localStorage.setItem(ID_TOKEN_KEY, identityToken.token);
    }
    /**
     * @private
     * @return {?}
     */
    removeLoginInformation() {
        this.token = undefined;
        this.isLoggedIn = false;
        localStorage.removeItem(TOKEN_KEY);
        localStorage.removeItem(ID_TOKEN_KEY);
        this.loginEvents.next('loggedout');
    }
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    buildIdpLoginUrl(state) {
        return this.securityConfig.idp_base_url + 'auth'
            + '?response_type=id_token'
            + '&scope=openid'
            + '&nonce=' + this.generateNonce()
            + '&client_id=' + encodeURIComponent(this.securityConfig.client_id)
            + '&redirect_uri=' + encodeURIComponent(this.securityConfig.login_redirect_url)
            + '&state=' + encodeURIComponent(getBase64EncodeUrlSafe(state));
    }
    /**
     * @private
     * @return {?}
     */
    mathFloorRandom() {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    }
    /**
     * @private
     * @return {?}
     */
    generateNonce() {
        /** @type {?} */
        let nonce = '';
        for (let i = 0; i < 8; i++) {
            nonce += this.mathFloorRandom();
        }
        return nonce;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    extractTokenFromUrl(url) {
        /** @type {?} */
        const hashPart = this.extractHashPart(url);
        /** @type {?} */
        const hashParams = this.extractParameters(decodeURIComponent(hashPart));
        if (hashParams && hashParams.state && hashParams.id_token) {
            return {
                state: hashParams.state,
                token: hashParams.id_token,
                app: this.securityConfig.app_name,
            };
        }
        return null;
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    extractHashPart(url) {
        /** @type {?} */
        const hashPosition = url.indexOf('#');
        if (hashPosition >= 0 && url.length > hashPosition) {
            return url.slice(hashPosition + 1);
        }
        else {
            return '';
        }
    }
    /**
     * @private
     * @param {?} paramString
     * @return {?}
     */
    extractParameters(paramString) {
        return paramString.split('&')
            .reduce((/**
         * @param {?} params
         * @param {?} keyValueText
         * @return {?}
         */
        (params, keyValueText) => {
            if (keyValueText) {
                /** @type {?} */
                const keyValue = keyValueText.split('=');
                if (keyValue.length === 2) {
                    /** @type {?} */
                    const key = keyValue[0];
                    /** @type {?} */
                    const value = keyValue[1];
                    /** @type {?} */
                    const decodedValue = key === 'state' ? getBase64DecodeUrlSafe(value) : value;
                    params[key] = decodeURIComponent(decodedValue);
                }
            }
            return params;
        }), {});
    }
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    buildIdpLogoutUrl(token) {
        return this.securityConfig.idp_base_url + 'logout'
            + '?id_token=' + token
            + '&post_logout_redirect_uri=' + encodeURIComponent(this.securityConfig.logout_redirect_url);
    }
}
AuthenticationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthenticationService.ctorParameters = () => [
    { type: LoginService },
    { type: Router },
    { type: RedirectorService },
    { type: undefined, decorators: [{ type: Inject, args: [SECURITY_CONFIG,] }] }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AuthenticationService.prototype.securityConfig;
    /** @type {?} */
    AuthenticationService.prototype.isLoggedIn;
    /**
     * @type {?}
     * @protected
     */
    AuthenticationService.prototype._token;
    /** @type {?} */
    AuthenticationService.prototype.loginEvents;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.loginService;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.redirectorService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1zZWN1cml0eS9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUNsRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDeEMsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQTtBQUNsRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQ3pDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFBO0FBRWxHLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQTtBQUUzRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDOUMsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sc0JBQXNCLENBQUE7Ozs7QUFFeEQseUJBRUM7O0FBR0QsTUFBTSxPQUFPLFNBQVMsR0FBRyxXQUFXOztBQUNwQyxNQUFNLE9BQU8sWUFBWSxHQUFHLGNBQWM7Ozs7QUFFMUMsc0NBSUM7OztJQUhDLGlDQUFhOztJQUNiLGlDQUFhOztJQUNiLCtCQUFXOztBQUliLE1BQU0sT0FBTyxxQkFBcUI7Ozs7Ozs7SUFpQmhDLFlBQW9CLFlBQTBCLEVBQzFCLE1BQWMsRUFDZCxpQkFBb0MsRUFDbkIsY0FBOEI7UUFIL0MsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNkLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFmakQsZUFBVSxHQUFHLEtBQUssQ0FBQTtRQWlCdkIsSUFBSSxDQUFDLFdBQVcs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LENBQUE7SUFDVixDQUFDOzs7Ozs7SUFFTyxpQkFBaUIsQ0FBQyxLQUFhO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEdBQUcsUUFBUTtjQUM5QyxZQUFZLEdBQUcsS0FBSztjQUNwQiw0QkFBNEIsR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLG1CQUFtQixDQUFDLENBQUE7SUFDaEcsQ0FBQzs7O1lBeExGLFVBQVU7Ozs7WUFqQkYsWUFBWTtZQVBaLE1BQU07WUFRTixpQkFBaUI7NENBcUNYLE1BQU0sU0FBQyxlQUFlOzs7Ozs7O0lBbEJuQywrQ0FBd0M7O0lBRXhDLDJDQUF5Qjs7Ozs7SUFFekIsdUNBQXlCOztJQVN6Qiw0Q0FBK0M7Ozs7O0lBRW5DLDZDQUFrQzs7Ozs7SUFDbEMsdUNBQXNCOzs7OztJQUN0QixrREFBNEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInXHJcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnXHJcbmltcG9ydCB7IG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnXHJcbmltcG9ydCB7IGdldEJhc2U2NERlY29kZVVybFNhZmUsIGdldEJhc2U2NEVuY29kZVVybFNhZmUgfSBmcm9tICcuLi8uLi9zaGFyZWQvaGVscGVyL2Jhc2U2NC5oZWxwZXInXHJcbmltcG9ydCB7IFBheWxvYWQgfSBmcm9tICcuLi9kb21haW4vcGF5bG9hZCdcclxuaW1wb3J0IHsgU0VDVVJJVFlfQ09ORklHIH0gZnJvbSAnLi4vZG9tYWluL3NlY3VyaXR5LWNvbmZpZydcclxuaW1wb3J0IHsgU2VjdXJpdHlDb25maWcgfSBmcm9tICcuLi9meC1zZWN1cml0eS5tb2R1bGUnXHJcbmltcG9ydCB7IExvZ2luU2VydmljZSB9IGZyb20gJy4vbG9naW4uc2VydmljZSdcclxuaW1wb3J0IHsgUmVkaXJlY3RvclNlcnZpY2UgfSBmcm9tICcuL3JlZGlyZWN0b3Iuc2VydmljZSdcclxuXHJcbmludGVyZmFjZSBIYXNoUGFyYW1zIHtcclxuICBba2V5OiBzdHJpbmddOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgTG9naW5FdmVudCA9ICdsb2dnZWRpbicgfCAnbG9nZ2Vkb3V0J1xyXG5leHBvcnQgY29uc3QgVE9LRU5fS0VZID0gJ1VSU19UT0tFTidcclxuZXhwb3J0IGNvbnN0IElEX1RPS0VOX0tFWSA9ICdVUlNfSURfVE9LRU4nXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIElkcElkZW50aXR5VG9rZW4ge1xyXG4gIHRva2VuOiBzdHJpbmdcclxuICBzdGF0ZTogc3RyaW5nXHJcbiAgYXBwOiBzdHJpbmdcclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpb25TZXJ2aWNlIHtcclxuXHJcbiAgcHJvdGVjdGVkIHNlY3VyaXR5Q29uZmlnOiBTZWN1cml0eUNvbmZpZ1xyXG5cclxuICBwdWJsaWMgaXNMb2dnZWRJbiA9IGZhbHNlXHJcblxyXG4gIHByb3RlY3RlZCBfdG9rZW4/OiBzdHJpbmdcclxuICBnZXQgdG9rZW4oKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLl90b2tlbiB8fCAnJ1xyXG4gIH1cclxuXHJcbiAgc2V0IHRva2VuKHRva2VuOiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX3Rva2VuID0gdG9rZW5cclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2dpbkV2ZW50czogQmVoYXZpb3JTdWJqZWN0PExvZ2luRXZlbnQ+XHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9naW5TZXJ2aWNlOiBMb2dpblNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcclxuICAgICAgICAgICAgICBwcml2YXRlIHJlZGlyZWN0b3JTZXJ2aWNlOiBSZWRpcmVjdG9yU2VydmljZSxcclxuICAgICAgICAgICAgICBASW5qZWN0KFNFQ1VSSVRZX0NPTkZJRykgc2VjdXJpdHlDb25maWc6IFNlY3VyaXR5Q29uZmlnKSB7XHJcbiAgICB0aGlzLmxvZ2luRXZlbnRzID0gbmV3IEJlaGF2aW9yU3ViamVjdDxMb2dpbkV2ZW50PignbG9nZ2Vkb3V0JylcclxuICAgIHRoaXMuaW5pdFRva2VuRnJvbVN0b3JhZ2UoKVxyXG4gICAgdGhpcy5zZWN1cml0eUNvbmZpZyA9IHNlY3VyaXR5Q29uZmlnXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbG9naW4oaWRlbnRpdHlUb2tlbjogSWRwSWRlbnRpdHlUb2tlbik6IE9ic2VydmFibGU8SWRwSWRlbnRpdHlUb2tlbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMubG9naW5TZXJ2aWNlLmxvZ2luKGlkZW50aXR5VG9rZW4pXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIHRhcCgodG9rZW46IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgdGhpcy5pbml0TG9naW4odG9rZW4sIGlkZW50aXR5VG9rZW4pXHJcbiAgICAgICAgICB0aGlzLmxvZ2luRXZlbnRzLm5leHQoJ2xvZ2dlZGluJylcclxuICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnJlbW92ZUxvZ2luSW5mb3JtYXRpb24oKVxyXG4gICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybCgnL2xvZ2luLWVycm9yJylcclxuICAgICAgICB9KSxcclxuICAgICAgICBtYXAoKCkgPT5cclxuICAgICAgICAgIGlkZW50aXR5VG9rZW4sXHJcbiAgICAgICAgKSxcclxuICAgICAgKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGxvZ291dCgpOiB2b2lkIHtcclxuICAgIC8vIENoZWNrIGZvciBJRCB0b2tlblxyXG4gICAgY29uc3QgaWRUb2tlbiA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKElEX1RPS0VOX0tFWSlcclxuICAgIHRoaXMucmVtb3ZlTG9naW5JbmZvcm1hdGlvbigpXHJcbiAgICBpZiAoaWRUb2tlbikge1xyXG4gICAgICB0aGlzLnJlZGlyZWN0b3JTZXJ2aWNlLnJlZGlyZWN0VG9VcmwodGhpcy5idWlsZElkcExvZ291dFVybChpZFRva2VuKSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoJy8nKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEF1dGhUb2tlbkhlYWRlclN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuICdCZWFyZXIgJyArIHRoaXMudG9rZW5cclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0VG9rZW5Gcm9tU3RvcmFnZSgpOiB2b2lkIHtcclxuICAgIGNvbnN0IHN0b3JlZFRva2VuOiBzdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShUT0tFTl9LRVkpXHJcbiAgICBpZiAoc3RvcmVkVG9rZW4gPT0gbnVsbCkge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IHBhcnRzOiBzdHJpbmdbXSA9IHN0b3JlZFRva2VuLnNwbGl0KCcuJylcclxuICAgICAgY29uc3QgcGF5bG9hZCA9IEpTT04ucGFyc2UoYXRvYihwYXJ0c1sxXSkpXHJcbiAgICAgIGNvbnN0IHVudGlsID0gbmV3IERhdGUocGF5bG9hZC5leHAgKiAxMDAwKVxyXG4gICAgICBjb25zdCBub3cgPSBuZXcgRGF0ZSgpXHJcblxyXG4gICAgICBpZiAobm93IDwgdW50aWwpIHtcclxuICAgICAgICB0aGlzLnRva2VuID0gc3RvcmVkVG9rZW5cclxuICAgICAgICB0aGlzLmlzTG9nZ2VkSW4gPSB0cnVlXHJcbiAgICAgICAgdGhpcy5sb2dpbkV2ZW50cy5uZXh0KCdsb2dnZWRpbicpXHJcbiAgICAgIH1cclxuICAgIH0gY2F0Y2ggKGV4KSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlTG9naW5JbmZvcm1hdGlvbigpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbG9naW5Gcm9tVXJsVG9rZW4odXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPElkcElkZW50aXR5VG9rZW4+IHtcclxuICAgIGNvbnN0IGlkZW50aXR5VG9rZW46IElkcElkZW50aXR5VG9rZW4gPSB0aGlzLmV4dHJhY3RUb2tlbkZyb21VcmwodXJsKVxyXG4gICAgcmV0dXJuIHRoaXMubG9naW4oaWRlbnRpdHlUb2tlbilcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQYXlsb2FkKCk6IFBheWxvYWQge1xyXG4gICAgaWYgKHRoaXMuaXNMb2dnZWRJbikge1xyXG4gICAgICBjb25zdCB0b2tlbiA9IHRoaXMudG9rZW5cclxuICAgICAgY29uc3QgcGFydHM6IHN0cmluZ1tdID0gdG9rZW4uc3BsaXQoJy4nKVxyXG4gICAgICBpZiAocGFydHMubGVuZ3RoID49IDIpIHtcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShhdG9iKHBhcnRzWzFdKSlcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtyb2xlczogW10sIHVzZXJuYW1lOiAnJ31cclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2dpbldpdGhSZWRpcmVjdFVybCgpOiB2b2lkIHtcclxuICAgIHRoaXMucmVkaXJlY3RUb0lkcExvZ2luKHRoaXMuc2VjdXJpdHlDb25maWcubG9naW5fcmVkaXJlY3RfdXJsKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlZGlyZWN0VG9JZHBMb2dpbih0YXJnZXRVcmw6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgdGhpcy5yZWRpcmVjdG9yU2VydmljZS5yZWRpcmVjdFRvVXJsKHRoaXMuYnVpbGRJZHBMb2dpblVybCh0YXJnZXRVcmwpKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBpbml0TG9naW4odG9rZW46IHN0cmluZywgaWRlbnRpdHlUb2tlbjogSWRwSWRlbnRpdHlUb2tlbik6IHZvaWQge1xyXG4gICAgdGhpcy50b2tlbiA9IHRva2VuXHJcbiAgICB0aGlzLmlzTG9nZ2VkSW4gPSB0cnVlXHJcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShUT0tFTl9LRVksIHRva2VuKVxyXG4gICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oSURfVE9LRU5fS0VZLCBpZGVudGl0eVRva2VuLnRva2VuKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZW1vdmVMb2dpbkluZm9ybWF0aW9uKCk6IHZvaWQge1xyXG4gICAgdGhpcy50b2tlbiA9IHVuZGVmaW5lZFxyXG4gICAgdGhpcy5pc0xvZ2dlZEluID0gZmFsc2VcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKFRPS0VOX0tFWSlcclxuICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKElEX1RPS0VOX0tFWSlcclxuICAgIHRoaXMubG9naW5FdmVudHMubmV4dCgnbG9nZ2Vkb3V0JylcclxuICB9XHJcblxyXG4gIHByaXZhdGUgYnVpbGRJZHBMb2dpblVybChzdGF0ZTogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnNlY3VyaXR5Q29uZmlnLmlkcF9iYXNlX3VybCArICdhdXRoJ1xyXG4gICAgICArICc/cmVzcG9uc2VfdHlwZT1pZF90b2tlbidcclxuICAgICAgKyAnJnNjb3BlPW9wZW5pZCdcclxuICAgICAgKyAnJm5vbmNlPScgKyB0aGlzLmdlbmVyYXRlTm9uY2UoKVxyXG4gICAgICArICcmY2xpZW50X2lkPScgKyBlbmNvZGVVUklDb21wb25lbnQodGhpcy5zZWN1cml0eUNvbmZpZy5jbGllbnRfaWQpXHJcbiAgICAgICsgJyZyZWRpcmVjdF91cmk9JyArIGVuY29kZVVSSUNvbXBvbmVudCh0aGlzLnNlY3VyaXR5Q29uZmlnLmxvZ2luX3JlZGlyZWN0X3VybClcclxuICAgICAgKyAnJnN0YXRlPScgKyBlbmNvZGVVUklDb21wb25lbnQoZ2V0QmFzZTY0RW5jb2RlVXJsU2FmZShzdGF0ZSkpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIG1hdGhGbG9vclJhbmRvbSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIE1hdGguZmxvb3IoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApXHJcbiAgICAgIC50b1N0cmluZygxNilcclxuICAgICAgLnN1YnN0cmluZygxKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZW5lcmF0ZU5vbmNlKCk6IHN0cmluZyB7XHJcbiAgICBsZXQgbm9uY2UgPSAnJ1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyBpKyspIHtcclxuICAgICAgbm9uY2UgKz0gdGhpcy5tYXRoRmxvb3JSYW5kb20oKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5vbmNlXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGV4dHJhY3RUb2tlbkZyb21VcmwodXJsOiBzdHJpbmcpOiBJZHBJZGVudGl0eVRva2VuIHtcclxuICAgIGNvbnN0IGhhc2hQYXJ0ID0gdGhpcy5leHRyYWN0SGFzaFBhcnQodXJsKVxyXG4gICAgY29uc3QgaGFzaFBhcmFtczogSGFzaFBhcmFtcyA9IHRoaXMuZXh0cmFjdFBhcmFtZXRlcnMoZGVjb2RlVVJJQ29tcG9uZW50KGhhc2hQYXJ0KSlcclxuICAgIGlmIChoYXNoUGFyYW1zICYmIGhhc2hQYXJhbXMuc3RhdGUgJiYgaGFzaFBhcmFtcy5pZF90b2tlbikge1xyXG4gICAgICByZXR1cm4ge1xyXG4gICAgICAgIHN0YXRlOiBoYXNoUGFyYW1zLnN0YXRlLFxyXG4gICAgICAgIHRva2VuOiBoYXNoUGFyYW1zLmlkX3Rva2VuLFxyXG4gICAgICAgIGFwcDogdGhpcy5zZWN1cml0eUNvbmZpZy5hcHBfbmFtZSxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGxcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZXh0cmFjdEhhc2hQYXJ0KHVybDogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGNvbnN0IGhhc2hQb3NpdGlvbiA9IHVybC5pbmRleE9mKCcjJylcclxuICAgIGlmIChoYXNoUG9zaXRpb24gPj0gMCAmJiB1cmwubGVuZ3RoID4gaGFzaFBvc2l0aW9uKSB7XHJcbiAgICAgIHJldHVybiB1cmwuc2xpY2UoaGFzaFBvc2l0aW9uICsgMSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBleHRyYWN0UGFyYW1ldGVycyhwYXJhbVN0cmluZzogc3RyaW5nKTogSGFzaFBhcmFtcyB7XHJcbiAgICByZXR1cm4gcGFyYW1TdHJpbmcuc3BsaXQoJyYnKVxyXG4gICAgICAucmVkdWNlKChwYXJhbXM6IEhhc2hQYXJhbXMsIGtleVZhbHVlVGV4dDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgaWYgKGtleVZhbHVlVGV4dCkge1xyXG4gICAgICAgICAgY29uc3Qga2V5VmFsdWUgPSBrZXlWYWx1ZVRleHQuc3BsaXQoJz0nKVxyXG4gICAgICAgICAgaWYgKGtleVZhbHVlLmxlbmd0aCA9PT0gMikge1xyXG4gICAgICAgICAgICBjb25zdCBrZXkgPSBrZXlWYWx1ZVswXVxyXG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGtleVZhbHVlWzFdXHJcbiAgICAgICAgICAgIGNvbnN0IGRlY29kZWRWYWx1ZSA9IGtleSA9PT0gJ3N0YXRlJyA/IGdldEJhc2U2NERlY29kZVVybFNhZmUodmFsdWUpIDogdmFsdWVcclxuICAgICAgICAgICAgcGFyYW1zW2tleV0gPSBkZWNvZGVVUklDb21wb25lbnQoZGVjb2RlZFZhbHVlKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcGFyYW1zXHJcbiAgICAgIH0sIHt9KVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBidWlsZElkcExvZ291dFVybCh0b2tlbjogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnNlY3VyaXR5Q29uZmlnLmlkcF9iYXNlX3VybCArICdsb2dvdXQnXHJcbiAgICAgICsgJz9pZF90b2tlbj0nICsgdG9rZW5cclxuICAgICAgKyAnJnBvc3RfbG9nb3V0X3JlZGlyZWN0X3VyaT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuc2VjdXJpdHlDb25maWcubG9nb3V0X3JlZGlyZWN0X3VybClcclxuICB9XHJcbn1cclxuIl19