/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { AuthenticationService } from './authentication.service';
import { SECURITY_CONFIG } from '../domain/security-config';
export class AuthorizationService {
    /**
     * @param {?} authenticationService
     * @param {?} securityConfig
     */
    constructor(authenticationService, securityConfig) {
        this.authenticationService = authenticationService;
        this.securityConfig = securityConfig;
    }
    /**
     * @return {?}
     */
    hasViewRole() {
        return this.checkMultipleRoles(this.securityConfig.roles.view);
    }
    /**
     * @param {?} boundaryValue
     * @return {?}
     */
    hasViewRoleForBoundary(boundaryValue) {
        return this.checkMultipleRolesForBoundary(this.securityConfig.roles.view, boundaryValue);
    }
    /**
     * @return {?}
     */
    hasEditRole() {
        return this.checkMultipleRoles(this.securityConfig.roles.edit);
    }
    /**
     * @param {?} boundaryValue
     * @return {?}
     */
    hasEditRoleForBoundary(boundaryValue) {
        return this.checkMultipleRolesForBoundary(this.securityConfig.roles.edit, boundaryValue);
    }
    /**
     * @return {?}
     */
    hasDevopsRole() {
        return this.checkMultipleRoles(this.securityConfig.roles.devops);
    }
    /**
     * @param {?} roleToCheck
     * @return {?}
     */
    hasRole(roleToCheck) {
        /** @type {?} */
        const payload = this.authenticationService.getPayload();
        return payload.roles.some((/**
         * @param {?} role
         * @return {?}
         */
        (role) => role.role === roleToCheck));
    }
    /**
     * @param {?} roleToCheck
     * @param {?} boundaryValue
     * @return {?}
     */
    hasRoleForBoundary(roleToCheck, boundaryValue) {
        /** @type {?} */
        const payload = this.authenticationService.getPayload();
        /** @type {?} */
        const foundRole = payload.roles.find((/**
         * @param {?} r
         * @return {?}
         */
        r => r.role === roleToCheck));
        if (!foundRole) {
            return false;
        }
        /** @type {?} */
        const devopsRole = this.securityConfig.roles.devops.find((/**
         * @param {?} r
         * @return {?}
         */
        r => r === foundRole.role));
        if (devopsRole) {
            return true;
        }
        /** @type {?} */
        const boundaries = foundRole.boundaries[this.securityConfig.boundary_name];
        return boundaries.some((/**
         * @param {?} boundary
         * @return {?}
         */
        (boundary) => boundary === boundaryValue));
    }
    /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    checkMultipleRoles(roles) {
        return roles.some((/**
         * @param {?} role
         * @return {?}
         */
        role => this.hasRole(role)));
    }
    /**
     * @private
     * @param {?} roles
     * @param {?} boundaryValue
     * @return {?}
     */
    checkMultipleRolesForBoundary(roles, boundaryValue) {
        return roles.some((/**
         * @param {?} role
         * @return {?}
         */
        role => this.hasRoleForBoundary(role, boundaryValue)));
    }
}
AuthorizationService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthorizationService.ctorParameters = () => [
    { type: AuthenticationService },
    { type: undefined, decorators: [{ type: Inject, args: [SECURITY_CONFIG,] }] }
];
if (false) {
    /** @type {?} */
    AuthorizationService.prototype.securityConfig;
    /**
     * @type {?}
     * @private
     */
    AuthorizationService.prototype.authenticationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXNlY3VyaXR5L3NlcnZpY2VzL2F1dGhvcml6YXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBSTNELE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBSS9CLFlBQW9CLHFCQUE0QyxFQUEyQixjQUE4QjtRQUFyRywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzlELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFBO0lBQ3RDLENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hFLENBQUM7Ozs7O0lBRU0sc0JBQXNCLENBQUMsYUFBcUI7UUFDakQsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBQzFGLENBQUM7Ozs7SUFFTSxXQUFXO1FBQ2hCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ2hFLENBQUM7Ozs7O0lBRU0sc0JBQXNCLENBQUMsYUFBcUI7UUFDakQsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBQzFGLENBQUM7Ozs7SUFFTSxhQUFhO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO0lBQ2xFLENBQUM7Ozs7O0lBRU0sT0FBTyxDQUFDLFdBQW1COztjQUMxQixPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRTtRQUN2RCxPQUFPLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztRQUFDLENBQUMsSUFBVSxFQUFFLEVBQUUsQ0FDdkMsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLEVBQzFCLENBQUE7SUFDSCxDQUFDOzs7Ozs7SUFFTSxrQkFBa0IsQ0FBQyxXQUFtQixFQUFFLGFBQXFCOztjQUM1RCxPQUFPLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRTs7Y0FDakQsU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxXQUFXLEVBQUM7UUFFakUsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLE9BQU8sS0FBSyxDQUFBO1NBQ2I7O2NBRUssVUFBVSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssU0FBUyxDQUFDLElBQUksRUFBQztRQUNuRixJQUFJLFVBQVUsRUFBRTtZQUNkLE9BQU8sSUFBSSxDQUFBO1NBQ1o7O2NBRUssVUFBVSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7UUFDMUUsT0FBTyxVQUFVLENBQUMsSUFBSTs7OztRQUFDLENBQUMsUUFBZ0IsRUFBRSxFQUFFLENBQUMsUUFBUSxLQUFLLGFBQWEsRUFBQyxDQUFBO0lBQzFFLENBQUM7Ozs7OztJQUVPLGtCQUFrQixDQUFDLEtBQVk7UUFDckMsT0FBTyxLQUFLLENBQUMsSUFBSTs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxDQUFBO0lBQy9DLENBQUM7Ozs7Ozs7SUFFTyw2QkFBNkIsQ0FBQyxLQUFZLEVBQUUsYUFBcUI7UUFDdkUsT0FBTyxLQUFLLENBQUMsSUFBSTs7OztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsRUFBQyxDQUFBO0lBQ3pFLENBQUM7OztZQTNERixVQUFVOzs7O1lBSkYscUJBQXFCOzRDQVN1QyxNQUFNLFNBQUMsZUFBZTs7OztJQUZ6Riw4Q0FBcUM7Ozs7O0lBRXpCLHFEQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IFNlY3VyaXR5Q29uZmlnIH0gZnJvbSAnLi4vZngtc2VjdXJpdHkubW9kdWxlJ1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnXHJcbmltcG9ydCB7IFNFQ1VSSVRZX0NPTkZJRyB9IGZyb20gJy4uL2RvbWFpbi9zZWN1cml0eS1jb25maWcnXHJcbmltcG9ydCB7IFJvbGUgfSBmcm9tICcuLi9kb21haW4vcm9sZSdcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEF1dGhvcml6YXRpb25TZXJ2aWNlIHtcclxuXHJcbiAgcHVibGljIHNlY3VyaXR5Q29uZmlnOiBTZWN1cml0eUNvbmZpZ1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlLCBASW5qZWN0KFNFQ1VSSVRZX0NPTkZJRykgc2VjdXJpdHlDb25maWc6IFNlY3VyaXR5Q29uZmlnKSB7XHJcbiAgICB0aGlzLnNlY3VyaXR5Q29uZmlnID0gc2VjdXJpdHlDb25maWdcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNWaWV3Um9sZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrTXVsdGlwbGVSb2xlcyh0aGlzLnNlY3VyaXR5Q29uZmlnLnJvbGVzLnZpZXcpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFzVmlld1JvbGVGb3JCb3VuZGFyeShib3VuZGFyeVZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrTXVsdGlwbGVSb2xlc0ZvckJvdW5kYXJ5KHRoaXMuc2VjdXJpdHlDb25maWcucm9sZXMudmlldywgYm91bmRhcnlWYWx1ZSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNFZGl0Um9sZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrTXVsdGlwbGVSb2xlcyh0aGlzLnNlY3VyaXR5Q29uZmlnLnJvbGVzLmVkaXQpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFzRWRpdFJvbGVGb3JCb3VuZGFyeShib3VuZGFyeVZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNoZWNrTXVsdGlwbGVSb2xlc0ZvckJvdW5kYXJ5KHRoaXMuc2VjdXJpdHlDb25maWcucm9sZXMuZWRpdCwgYm91bmRhcnlWYWx1ZSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNEZXZvcHNSb2xlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tNdWx0aXBsZVJvbGVzKHRoaXMuc2VjdXJpdHlDb25maWcucm9sZXMuZGV2b3BzKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc1JvbGUocm9sZVRvQ2hlY2s6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcGF5bG9hZCA9IHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmdldFBheWxvYWQoKVxyXG4gICAgcmV0dXJuIHBheWxvYWQucm9sZXMuc29tZSgocm9sZTogUm9sZSkgPT5cclxuICAgICAgcm9sZS5yb2xlID09PSByb2xlVG9DaGVja1xyXG4gICAgKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc1JvbGVGb3JCb3VuZGFyeShyb2xlVG9DaGVjazogc3RyaW5nLCBib3VuZGFyeVZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHBheWxvYWQgPSB0aGlzLmF1dGhlbnRpY2F0aW9uU2VydmljZS5nZXRQYXlsb2FkKClcclxuICAgIGNvbnN0IGZvdW5kUm9sZSA9IHBheWxvYWQucm9sZXMuZmluZChyID0+IHIucm9sZSA9PT0gcm9sZVRvQ2hlY2spXHJcblxyXG4gICAgaWYgKCFmb3VuZFJvbGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZGV2b3BzUm9sZSA9IHRoaXMuc2VjdXJpdHlDb25maWcucm9sZXMuZGV2b3BzLmZpbmQociA9PiByID09PSBmb3VuZFJvbGUucm9sZSlcclxuICAgIGlmIChkZXZvcHNSb2xlKSB7XHJcbiAgICAgIHJldHVybiB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgYm91bmRhcmllcyA9IGZvdW5kUm9sZS5ib3VuZGFyaWVzW3RoaXMuc2VjdXJpdHlDb25maWcuYm91bmRhcnlfbmFtZV1cclxuICAgIHJldHVybiBib3VuZGFyaWVzLnNvbWUoKGJvdW5kYXJ5OiBzdHJpbmcpID0+IGJvdW5kYXJ5ID09PSBib3VuZGFyeVZhbHVlKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja011bHRpcGxlUm9sZXMocm9sZXM6IGFueVtdKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gcm9sZXMuc29tZShyb2xlID0+IHRoaXMuaGFzUm9sZShyb2xlKSlcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tNdWx0aXBsZVJvbGVzRm9yQm91bmRhcnkocm9sZXM6IGFueVtdLCBib3VuZGFyeVZhbHVlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiByb2xlcy5zb21lKHJvbGUgPT4gdGhpcy5oYXNSb2xlRm9yQm91bmRhcnkocm9sZSwgYm91bmRhcnlWYWx1ZSkpXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=