/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LOCALE_ID, NgModule } from '@angular/core';
import { CommonModule, registerLocaleData } from '@angular/common';
import { FxTranslationComponent } from './components/fx-translation/fx-translation.component';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { BrowserModule } from '@angular/platform-browser';
import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';
import { HttpClient } from '@angular/common/http';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import localeDe from '@angular/common/locales/de';
import { FxLanguageSelectorComponent } from './components/fx-language-selector/fx-language-selector.component';
/** @type {?} */
export const FX_LANGUAGE = 'FX_LANGUAGE';
registerLocaleData(localeDe);
/**
 * @param {?} http
 * @return {?}
 */
export function HttpLoaderFactory(http) {
    return new TranslateHttpLoader(http, './assets/i18n/', '.json');
}
/**
 * @param {?} translate
 * @return {?}
 */
export function CurrentLanguageFactory(translate) {
    return translate.currentLang;
}
export class FxTranslationModule {
    /**
     * @param {?} translate
     */
    constructor(translate) {
        translate.setDefaultLang('de');
        /** @type {?} */
        const langFromLocalStorage = localStorage.getItem(FX_LANGUAGE);
        if (langFromLocalStorage) {
            translate.use(langFromLocalStorage);
        }
        else {
            /** @type {?} */
            const browserLanguage = FxTranslationModule.isLanguageSupported(translate.getBrowserLang()) ? translate.getBrowserLang() : 'de';
            translate.use(browserLanguage);
            localStorage.setItem(FX_LANGUAGE, browserLanguage);
        }
    }
    /**
     * @param {?} browserLanguage
     * @return {?}
     */
    static isLanguageSupported(browserLanguage) {
        return ['en', 'de'].indexOf(browserLanguage) >= 0;
    }
}
FxTranslationModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FxTranslationComponent,
                    FxLanguageSelectorComponent
                ],
                exports: [
                    TranslateModule,
                    FxTranslationComponent,
                    FxLanguageSelectorComponent
                ],
                imports: [
                    BrowserModule,
                    CommonModule,
                    NgbModule,
                    TranslateModule.forRoot({
                        loader: {
                            provide: TranslateLoader,
                            useFactory: HttpLoaderFactory,
                            deps: [HttpClient]
                        }
                    })
                ],
                providers: [{ provide: LOCALE_ID, useFactory: CurrentLanguageFactory, deps: [TranslateService] }
                ],
                bootstrap: [FxTranslationComponent, FxLanguageSelectorComponent]
            },] }
];
/** @nocollapse */
FxTranslationModule.ctorParameters = () => [
    { type: TranslateService }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtdHJhbnNsYXRpb24ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXRyYW5zbGF0aW9uL2Z4LXRyYW5zbGF0aW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFBO0FBQzdGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUN4RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDaEUsT0FBTyxRQUFRLE1BQU0sNEJBQTRCLENBQUE7QUFDakQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0VBQWtFLENBQUE7O0FBRTlHLE1BQU0sT0FBTyxXQUFXLEdBQUcsYUFBYTtBQUV4QyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTs7Ozs7QUFFNUIsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWdCO0lBQ2hELE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDakUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsU0FBMkI7SUFDaEUsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFBO0FBQzlCLENBQUM7QUEyQkQsTUFBTSxPQUFPLG1CQUFtQjs7OztJQUk5QixZQUFZLFNBQTJCO1FBQ3JDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLENBQUE7O2NBQ3hCLG9CQUFvQixHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO1FBQzlELElBQUksb0JBQW9CLEVBQUU7WUFDeEIsU0FBUyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFBO1NBQ3BDO2FBQU07O2tCQUNDLGVBQWUsR0FBRyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJO1lBQy9ILFNBQVMsQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUE7WUFDOUIsWUFBWSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUE7U0FDbkQ7SUFDSCxDQUFDOzs7OztJQWJNLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxlQUF1QjtRQUN2RCxPQUFPLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDbkQsQ0FBQzs7O1lBNUJGLFFBQVEsU0FBQztnQkFDUixZQUFZLEVBQUUsQ0FBQyxzQkFBc0I7b0JBQ3ZCLDJCQUEyQjtpQkFDeEM7Z0JBQ0QsT0FBTyxFQUFFO29CQUNQLGVBQWU7b0JBQ2Ysc0JBQXNCO29CQUN0QiwyQkFBMkI7aUJBQzVCO2dCQUNELE9BQU8sRUFBRTtvQkFDUCxhQUFhO29CQUNiLFlBQVk7b0JBQ1osU0FBUztvQkFDVCxlQUFlLENBQUMsT0FBTyxDQUFDO3dCQUN0QixNQUFNLEVBQUU7NEJBQ04sT0FBTyxFQUFFLGVBQWU7NEJBQ3hCLFVBQVUsRUFBRSxpQkFBaUI7NEJBQzdCLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQzt5QkFDbkI7cUJBQ0YsQ0FBQztpQkFBQztnQkFDSCxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLHNCQUFzQixFQUFFLElBQUksRUFBRSxDQUFDLGdCQUFnQixDQUFDLEVBQUM7aUJBQzdGO2dCQUNELFNBQVMsRUFBRSxDQUFDLHNCQUFzQixFQUFFLDJCQUEyQixDQUFDO2FBQ25FOzs7O1lBekMwQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMT0NBTEVfSUQsIE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlLCByZWdpc3RlckxvY2FsZURhdGEgfSBmcm9tICdAYW5ndWxhci9jb21tb24nXHJcbmltcG9ydCB7IEZ4VHJhbnNsYXRpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZngtdHJhbnNsYXRpb24vZngtdHJhbnNsYXRpb24uY29tcG9uZW50J1xyXG5pbXBvcnQgeyBOZ2JNb2R1bGUgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInXHJcbmltcG9ydCB7IFRyYW5zbGF0ZUxvYWRlciwgVHJhbnNsYXRlTW9kdWxlLCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSdcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJ1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVIdHRwTG9hZGVyIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvaHR0cC1sb2FkZXInXHJcbmltcG9ydCBsb2NhbGVEZSBmcm9tICdAYW5ndWxhci9jb21tb24vbG9jYWxlcy9kZSdcclxuaW1wb3J0IHsgRnhMYW5ndWFnZVNlbGVjdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Z4LWxhbmd1YWdlLXNlbGVjdG9yL2Z4LWxhbmd1YWdlLXNlbGVjdG9yLmNvbXBvbmVudCdcclxuXHJcbmV4cG9ydCBjb25zdCBGWF9MQU5HVUFHRSA9ICdGWF9MQU5HVUFHRSdcclxuXHJcbnJlZ2lzdGVyTG9jYWxlRGF0YShsb2NhbGVEZSlcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBIdHRwTG9hZGVyRmFjdG9yeShodHRwOiBIdHRwQ2xpZW50KTogVHJhbnNsYXRlSHR0cExvYWRlciB7XHJcbiAgcmV0dXJuIG5ldyBUcmFuc2xhdGVIdHRwTG9hZGVyKGh0dHAsICcuL2Fzc2V0cy9pMThuLycsICcuanNvbicpXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDdXJyZW50TGFuZ3VhZ2VGYWN0b3J5KHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHRyYW5zbGF0ZS5jdXJyZW50TGFuZ1xyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGRlY2xhcmF0aW9uczogW0Z4VHJhbnNsYXRpb25Db21wb25lbnQsXHJcbiAgICAgICAgICAgICAgICBGeExhbmd1YWdlU2VsZWN0b3JDb21wb25lbnRcclxuICBdLFxyXG4gIGV4cG9ydHM6IFtcclxuICAgIFRyYW5zbGF0ZU1vZHVsZSxcclxuICAgIEZ4VHJhbnNsYXRpb25Db21wb25lbnQsXHJcbiAgICBGeExhbmd1YWdlU2VsZWN0b3JDb21wb25lbnRcclxuICBdLFxyXG4gIGltcG9ydHM6IFtcclxuICAgIEJyb3dzZXJNb2R1bGUsXHJcbiAgICBDb21tb25Nb2R1bGUsXHJcbiAgICBOZ2JNb2R1bGUsXHJcbiAgICBUcmFuc2xhdGVNb2R1bGUuZm9yUm9vdCh7XHJcbiAgICAgIGxvYWRlcjoge1xyXG4gICAgICAgIHByb3ZpZGU6IFRyYW5zbGF0ZUxvYWRlcixcclxuICAgICAgICB1c2VGYWN0b3J5OiBIdHRwTG9hZGVyRmFjdG9yeSxcclxuICAgICAgICBkZXBzOiBbSHR0cENsaWVudF1cclxuICAgICAgfVxyXG4gICAgfSldLFxyXG4gICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IExPQ0FMRV9JRCwgdXNlRmFjdG9yeTogQ3VycmVudExhbmd1YWdlRmFjdG9yeSwgZGVwczogW1RyYW5zbGF0ZVNlcnZpY2VdfVxyXG4gICAgXSxcclxuICAgIGJvb3RzdHJhcDogW0Z4VHJhbnNsYXRpb25Db21wb25lbnQsIEZ4TGFuZ3VhZ2VTZWxlY3RvckNvbXBvbmVudF1cclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBGeFRyYW5zbGF0aW9uTW9kdWxlIHtcclxuICBwdWJsaWMgc3RhdGljIGlzTGFuZ3VhZ2VTdXBwb3J0ZWQoYnJvd3Nlckxhbmd1YWdlOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgIHJldHVybiBbJ2VuJywgJ2RlJ10uaW5kZXhPZihicm93c2VyTGFuZ3VhZ2UpID49IDBcclxuICB9XHJcbiAgY29uc3RydWN0b3IodHJhbnNsYXRlOiBUcmFuc2xhdGVTZXJ2aWNlKSB7XHJcbiAgICB0cmFuc2xhdGUuc2V0RGVmYXVsdExhbmcoJ2RlJylcclxuICAgIGNvbnN0IGxhbmdGcm9tTG9jYWxTdG9yYWdlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oRlhfTEFOR1VBR0UpXHJcbiAgICBpZiAobGFuZ0Zyb21Mb2NhbFN0b3JhZ2UpIHtcclxuICAgICAgdHJhbnNsYXRlLnVzZShsYW5nRnJvbUxvY2FsU3RvcmFnZSlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnN0IGJyb3dzZXJMYW5ndWFnZSA9IEZ4VHJhbnNsYXRpb25Nb2R1bGUuaXNMYW5ndWFnZVN1cHBvcnRlZCh0cmFuc2xhdGUuZ2V0QnJvd3NlckxhbmcoKSkgPyB0cmFuc2xhdGUuZ2V0QnJvd3NlckxhbmcoKSA6ICdkZSdcclxuICAgICAgdHJhbnNsYXRlLnVzZShicm93c2VyTGFuZ3VhZ2UpXHJcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKEZYX0xBTkdVQUdFLCBicm93c2VyTGFuZ3VhZ2UpXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5cclxuIl19