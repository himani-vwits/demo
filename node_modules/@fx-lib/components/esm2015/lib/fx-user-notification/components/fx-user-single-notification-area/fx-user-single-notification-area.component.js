/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
export class FxUserSingleNotificationAreaComponent {
    constructor() {
        this.charsOfShortText = 150;
        this.isMessageShorted = false;
        this.visibleMessage = '';
        this.show = false;
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    set notification(notification) {
        this.completeNotification = notification;
        this.updateVisibleMessageText();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateVisibleMessageText();
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    getSeverityStyle(notification) {
        if (!notification) {
            return '';
        }
        if (!notification.read) {
            if (notification.severity === 'ERROR') {
                return 'alert alert-danger';
            }
            else if (notification.severity === 'WARNING') {
                return 'alert alert-warning';
            }
            else {
                return 'alert alert-info';
            }
        }
        else {
            return 'alert alert-secondary';
        }
    }
    /**
     * @return {?}
     */
    showToggle() {
        this.show = !this.show;
        this.updateVisibleMessageText();
    }
    /**
     * @param {?} notification
     * @return {?}
     */
    getSeverityIcon(notification) {
        if (!notification) {
            return '';
        }
        if (notification.severity === 'ERROR') {
            return 'fas fa-exclamation-circle';
        }
        else if (notification.severity === 'WARNING') {
            return 'fas fa-exclamation-triangle';
        }
        else {
            return 'fas fa-info-circle';
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateVisibleMessageText() {
        if (!this.completeNotification) {
            return;
        }
        if (this.completeNotification.messageText.length > this.charsOfShortText && !this.show) {
            this.visibleMessage = this.completeNotification.messageText.slice(0, this.charsOfShortText);
            this.isMessageShorted = true;
        }
        else {
            this.visibleMessage = this.completeNotification.messageText;
        }
    }
}
FxUserSingleNotificationAreaComponent.decorators = [
    { type: Component, args: [{
                selector: 'app-fx-user-single-notification-area',
                template: "<div [ngClass]=\"getSeverityStyle(completeNotification)\" class=\"container\">\r\n  <div>\r\n    <span class=\"msg-title\">{{completeNotification?.messageHeadline}}</span>\r\n    <span><i class=\"notificationIcon\" [ngClass]=\"getSeverityIcon(completeNotification)\"></i></span>\r\n  </div>\r\n  <div>\r\n    <span class=\"msg-datetime\">{{completeNotification?.updateTimestamp | date:'yyyy-MM-dd HH:mm'}}</span>\r\n  </div>\r\n  <div class=\"message-text\" [class.show-more]=\"show\">\r\n    {{ visibleMessage }}<span *ngIf=\"isMessageShorted && !show\">...</span>\r\n    <div class=\"showMoreLink\"\r\n         *ngIf=\"isMessageShorted\"\r\n    >\r\n      <a\r\n        (click)=\"showToggle()\"\r\n      >{{ (show ? 'i18n.user-notifications.showLess' : 'i18n.user-notifications.showMore') | translate}}</a>\r\n    </div>\r\n  </div>\r\n</div>\r\n",
                styles: [".notificationIcon{float:right;margin:.25em;font-size:xx-large}.showMoreLink{color:#003f5b;font-size:small;text-align:right;padding-top:5px}.showMoreLink a{cursor:pointer}.message-text{margin:.25em .25em .25em 0}.show-more{overflow:visible;word-wrap:break-spaces;white-space:normal}.msg-title{font-weight:700}.msg-datetime{font-size:smaller;margin-top:0}.container{padding:.25em;margin:0 0 .5em}"]
            }] }
];
/** @nocollapse */
FxUserSingleNotificationAreaComponent.ctorParameters = () => [];
FxUserSingleNotificationAreaComponent.propDecorators = {
    notification: [{ type: Input }],
    charsOfShortText: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FxUserSingleNotificationAreaComponent.prototype.completeNotification;
    /** @type {?} */
    FxUserSingleNotificationAreaComponent.prototype.charsOfShortText;
    /** @type {?} */
    FxUserSingleNotificationAreaComponent.prototype.isMessageShorted;
    /** @type {?} */
    FxUserSingleNotificationAreaComponent.prototype.visibleMessage;
    /** @type {?} */
    FxUserSingleNotificationAreaComponent.prototype.show;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtdXNlci1zaW5nbGUtbm90aWZpY2F0aW9uLWFyZWEuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXVzZXItbm90aWZpY2F0aW9uL2NvbXBvbmVudHMvZngtdXNlci1zaW5nbGUtbm90aWZpY2F0aW9uLWFyZWEvZngtdXNlci1zaW5nbGUtbm90aWZpY2F0aW9uLWFyZWEuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQTtBQVF4RCxNQUFNLE9BQU8scUNBQXFDO0lBaUJoRDtRQU5PLHFCQUFnQixHQUFHLEdBQUcsQ0FBQTtRQUV0QixxQkFBZ0IsR0FBRyxLQUFLLENBQUE7UUFDeEIsbUJBQWMsR0FBRyxFQUFFLENBQUE7UUFDbkIsU0FBSSxHQUFHLEtBQUssQ0FBQTtJQUduQixDQUFDOzs7OztJQWRELElBQ1csWUFBWSxDQUFDLFlBQWdDO1FBQ3RELElBQUksQ0FBQyxvQkFBb0IsR0FBRyxZQUFZLENBQUE7UUFDeEMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUE7SUFDakMsQ0FBQzs7OztJQVlNLFFBQVE7UUFDYixJQUFJLENBQUMsd0JBQXdCLEVBQUUsQ0FBQTtJQUNqQyxDQUFDOzs7OztJQUVNLGdCQUFnQixDQUFDLFlBQWdDO1FBQ3RELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxFQUFFLENBQUE7U0FDVjtRQUNELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFO1lBQ3RCLElBQUksWUFBWSxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7Z0JBQ3JDLE9BQU8sb0JBQW9CLENBQUE7YUFDNUI7aUJBQU0sSUFBSSxZQUFZLENBQUMsUUFBUSxLQUFLLFNBQVMsRUFBRTtnQkFDOUMsT0FBTyxxQkFBcUIsQ0FBQTthQUM3QjtpQkFBTTtnQkFDTCxPQUFPLGtCQUFrQixDQUFBO2FBQzFCO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sdUJBQXVCLENBQUE7U0FDL0I7SUFDSCxDQUFDOzs7O0lBRU0sVUFBVTtRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFBO1FBQ3RCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFBO0lBQ2pDLENBQUM7Ozs7O0lBRU0sZUFBZSxDQUFDLFlBQWdDO1FBQ3JELElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDakIsT0FBTyxFQUFFLENBQUE7U0FDVjtRQUNELElBQUksWUFBWSxDQUFDLFFBQVEsS0FBSyxPQUFPLEVBQUU7WUFDckMsT0FBTywyQkFBMkIsQ0FBQTtTQUNuQzthQUFNLElBQUksWUFBWSxDQUFDLFFBQVEsS0FBSyxTQUFTLEVBQUU7WUFDOUMsT0FBTyw2QkFBNkIsQ0FBQTtTQUNyQzthQUFNO1lBQ0wsT0FBTyxvQkFBb0IsQ0FBQTtTQUM1QjtJQUNILENBQUM7Ozs7O0lBRU8sd0JBQXdCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsb0JBQW9CLEVBQUU7WUFDOUIsT0FBTTtTQUNQO1FBQ0QsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsV0FBVyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ3RGLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQzNGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUE7U0FDN0I7YUFBTTtZQUNMLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFdBQVcsQ0FBQTtTQUM1RDtJQUNILENBQUM7OztZQTFFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHNDQUFzQztnQkFDaEQsNDFCQUFnRTs7YUFFakU7Ozs7OzJCQUtFLEtBQUs7K0JBTUwsS0FBSzs7OztJQVJOLHFFQUErQzs7SUFRL0MsaUVBQzZCOztJQUU3QixpRUFBK0I7O0lBQy9CLCtEQUEwQjs7SUFDMUIscURBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgRnhVc2VyTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vLi4vZG9tYWluL2Z4LXVzZXItbm90aWZpY2F0aW9uJ1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtZngtdXNlci1zaW5nbGUtbm90aWZpY2F0aW9uLWFyZWEnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9meC11c2VyLXNpbmdsZS1ub3RpZmljYXRpb24tYXJlYS5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZngtdXNlci1zaW5nbGUtbm90aWZpY2F0aW9uLWFyZWEuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRnhVc2VyU2luZ2xlTm90aWZpY2F0aW9uQXJlYUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gIHB1YmxpYyBjb21wbGV0ZU5vdGlmaWNhdGlvbjogRnhVc2VyTm90aWZpY2F0aW9uXHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHNldCBub3RpZmljYXRpb24obm90aWZpY2F0aW9uOiBGeFVzZXJOb3RpZmljYXRpb24pIHtcclxuICAgIHRoaXMuY29tcGxldGVOb3RpZmljYXRpb24gPSBub3RpZmljYXRpb25cclxuICAgIHRoaXMudXBkYXRlVmlzaWJsZU1lc3NhZ2VUZXh0KClcclxuICB9XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGNoYXJzT2ZTaG9ydFRleHQgPSAxNTBcclxuXHJcbiAgcHVibGljIGlzTWVzc2FnZVNob3J0ZWQgPSBmYWxzZVxyXG4gIHB1YmxpYyB2aXNpYmxlTWVzc2FnZSA9ICcnXHJcbiAgcHVibGljIHNob3cgPSBmYWxzZVxyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMudXBkYXRlVmlzaWJsZU1lc3NhZ2VUZXh0KClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRTZXZlcml0eVN0eWxlKG5vdGlmaWNhdGlvbjogRnhVc2VyTm90aWZpY2F0aW9uKTogc3RyaW5nIHtcclxuICAgIGlmICghbm90aWZpY2F0aW9uKSB7XHJcbiAgICAgIHJldHVybiAnJ1xyXG4gICAgfVxyXG4gICAgaWYgKCFub3RpZmljYXRpb24ucmVhZCkge1xyXG4gICAgICBpZiAobm90aWZpY2F0aW9uLnNldmVyaXR5ID09PSAnRVJST1InKSB7XHJcbiAgICAgICAgcmV0dXJuICdhbGVydCBhbGVydC1kYW5nZXInXHJcbiAgICAgIH0gZWxzZSBpZiAobm90aWZpY2F0aW9uLnNldmVyaXR5ID09PSAnV0FSTklORycpIHtcclxuICAgICAgICByZXR1cm4gJ2FsZXJ0IGFsZXJ0LXdhcm5pbmcnXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuICdhbGVydCBhbGVydC1pbmZvJ1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gJ2FsZXJ0IGFsZXJ0LXNlY29uZGFyeSdcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzaG93VG9nZ2xlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5zaG93ID0gIXRoaXMuc2hvd1xyXG4gICAgdGhpcy51cGRhdGVWaXNpYmxlTWVzc2FnZVRleHQoKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFNldmVyaXR5SWNvbihub3RpZmljYXRpb246IEZ4VXNlck5vdGlmaWNhdGlvbik6IHN0cmluZyB7XHJcbiAgICBpZiAoIW5vdGlmaWNhdGlvbikge1xyXG4gICAgICByZXR1cm4gJydcclxuICAgIH1cclxuICAgIGlmIChub3RpZmljYXRpb24uc2V2ZXJpdHkgPT09ICdFUlJPUicpIHtcclxuICAgICAgcmV0dXJuICdmYXMgZmEtZXhjbGFtYXRpb24tY2lyY2xlJ1xyXG4gICAgfSBlbHNlIGlmIChub3RpZmljYXRpb24uc2V2ZXJpdHkgPT09ICdXQVJOSU5HJykge1xyXG4gICAgICByZXR1cm4gJ2ZhcyBmYS1leGNsYW1hdGlvbi10cmlhbmdsZSdcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnZmFzIGZhLWluZm8tY2lyY2xlJ1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVWaXNpYmxlTWVzc2FnZVRleHQoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuY29tcGxldGVOb3RpZmljYXRpb24pIHtcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5jb21wbGV0ZU5vdGlmaWNhdGlvbi5tZXNzYWdlVGV4dC5sZW5ndGggPiB0aGlzLmNoYXJzT2ZTaG9ydFRleHQgJiYgIXRoaXMuc2hvdykge1xyXG4gICAgICB0aGlzLnZpc2libGVNZXNzYWdlID0gdGhpcy5jb21wbGV0ZU5vdGlmaWNhdGlvbi5tZXNzYWdlVGV4dC5zbGljZSgwLCB0aGlzLmNoYXJzT2ZTaG9ydFRleHQpXHJcbiAgICAgIHRoaXMuaXNNZXNzYWdlU2hvcnRlZCA9IHRydWVcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudmlzaWJsZU1lc3NhZ2UgPSB0aGlzLmNvbXBsZXRlTm90aWZpY2F0aW9uLm1lc3NhZ2VUZXh0XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==