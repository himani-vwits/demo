/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of, timer } from 'rxjs';
/**
 * A implementation of IFxUserNotificationLocalDevelopmentService just without server, it generates all data offline.
 * <b>Purpose:</b>
 * Ease of development and demonstration in a showcase.
 */
export class FxUserNotificationLocalDevelopmentService {
    constructor() {
        this.notifications = [];
        this.idCounterForMessages = 0;
        this.startTimer();
    }
    /**
     * @return {?}
     */
    getNotifications() {
        return of(this.notifications);
    }
    /**
     * @return {?}
     */
    postUserReadLog() {
        this.notifications.forEach((/**
         * @param {?} message
         * @return {?}
         */
        (message) => message.read = true));
        return of({});
    }
    /**
     * @private
     * @return {?}
     */
    startTimer() {
        // this timer is on purpose not stopped or unsubscribed as it simulates a server that is generating messages,
        // it will not be stopped by the client.
        timer(0, 5000).subscribe((/**
         * @return {?}
         */
        () => {
            this.notifications.push(this.generateNewMessage());
        }));
    }
    /**
     * @private
     * @return {?}
     */
    generateNewMessage() {
        this.idCounterForMessages++;
        /** @type {?} */
        const severity = this.getRandomSeverity();
        /** @type {?} */
        const messageText = Math.random() > 0.5
            ? `This is ${severity} message ${this.idCounterForMessages.toString()} locally generated.`
            : `This is ${severity} message ${this.idCounterForMessages.toString()} locally generated. With a text which is longer than expected. This way a collapsible message can be demonstrated.`;
        return {
            messageHeadline: `Dummy ${severity} Message ${this.idCounterForMessages.toString()}`,
            updatedByUser: 'dummy',
            severity: severity,
            read: false,
            messageText: messageText,
            id: this.idCounterForMessages.toString(),
            audience: undefined,
            updateTimestamp: new Date()
        };
    }
    /**
     * @private
     * @return {?}
     */
    getRandomSeverity() {
        /** @type {?} */
        const rnd = Math.random();
        if (rnd > 0.66) {
            return 'INFO';
        }
        else if (rnd > 0.33) {
            return 'WARNING';
        }
        else {
            return 'ERROR';
        }
    }
}
FxUserNotificationLocalDevelopmentService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FxUserNotificationLocalDevelopmentService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    FxUserNotificationLocalDevelopmentService.prototype.notifications;
    /**
     * @type {?}
     * @private
     */
    FxUserNotificationLocalDevelopmentService.prototype.idCounterForMessages;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtdXNlci1ub3RpZmljYXRpb24tbG9jYWwtZGV2ZWxvcG1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC11c2VyLW5vdGlmaWNhdGlvbi9zZXJ2aWNlcy9meC11c2VyLW5vdGlmaWNhdGlvbi1sb2NhbC1kZXZlbG9wbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBSzVDOzs7O0dBSUc7QUFDSCxNQUFNLE9BQU8seUNBQXlDO0lBTXBEO1FBSk8sa0JBQWEsR0FBOEIsRUFBRSxDQUFBO1FBRTVDLHlCQUFvQixHQUFHLENBQUMsQ0FBQTtRQUc5QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDbkIsQ0FBQzs7OztJQUVNLGdCQUFnQjtRQUNyQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDL0IsQ0FBQzs7OztJQUVNLGVBQWU7UUFDcEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFDLENBQUE7UUFDNUQsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixDQUFDOzs7OztJQUVPLFVBQVU7UUFDaEIsNkdBQTZHO1FBQzdHLHdDQUF3QztRQUN4QyxLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUM1QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFBO1FBQ3BELENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQzs7Ozs7SUFFTyxrQkFBa0I7UUFDeEIsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUE7O2NBRXJCLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7O2NBQ25DLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRztZQUNyQyxDQUFDLENBQUMsV0FBVyxRQUFRLFlBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxxQkFBcUI7WUFDMUYsQ0FBQyxDQUFDLFdBQVcsUUFBUSxZQUFZLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsb0hBQW9IO1FBRTNMLE9BQU87WUFDTCxlQUFlLEVBQUUsU0FBUyxRQUFRLFlBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BGLGFBQWEsRUFBRSxPQUFPO1lBQ3RCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLElBQUksRUFBRSxLQUFLO1lBQ1gsV0FBVyxFQUFFLFdBQVc7WUFDeEIsRUFBRSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUU7WUFDeEMsUUFBUSxFQUFFLFNBQVM7WUFDbkIsZUFBZSxFQUFFLElBQUksSUFBSSxFQUFFO1NBQzVCLENBQUE7SUFDSCxDQUFDOzs7OztJQUVPLGlCQUFpQjs7Y0FDakIsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDekIsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ2QsT0FBTyxNQUFNLENBQUE7U0FDZDthQUFNLElBQUksR0FBRyxHQUFHLElBQUksRUFBRTtZQUNyQixPQUFPLFNBQVMsQ0FBQTtTQUNqQjthQUFNO1lBQ0wsT0FBTyxPQUFPLENBQUE7U0FDbEI7SUFDQSxDQUFDOzs7WUE5REYsVUFBVTs7Ozs7O0lBUVQsa0VBQW9EOzs7OztJQUVwRCx5RUFBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIHRpbWVyIH0gZnJvbSAncnhqcydcclxuaW1wb3J0IHsgRnhVc2VyTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vZG9tYWluL2Z4LXVzZXItbm90aWZpY2F0aW9uJ1xyXG5pbXBvcnQgeyBJRnhVc2VyTm90aWZpY2F0aW9uTG9jYWxEZXZlbG9wbWVudFNlcnZpY2UgfSBmcm9tICcuL2ktZngtdXNlci1ub3RpZmljYXRpb24uc2VydmljZSdcclxuXHJcbkBJbmplY3RhYmxlKClcclxuLyoqXHJcbiAqIEEgaW1wbGVtZW50YXRpb24gb2YgSUZ4VXNlck5vdGlmaWNhdGlvbkxvY2FsRGV2ZWxvcG1lbnRTZXJ2aWNlIGp1c3Qgd2l0aG91dCBzZXJ2ZXIsIGl0IGdlbmVyYXRlcyBhbGwgZGF0YSBvZmZsaW5lLlxyXG4gKiA8Yj5QdXJwb3NlOjwvYj5cclxuICogRWFzZSBvZiBkZXZlbG9wbWVudCBhbmQgZGVtb25zdHJhdGlvbiBpbiBhIHNob3djYXNlLlxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEZ4VXNlck5vdGlmaWNhdGlvbkxvY2FsRGV2ZWxvcG1lbnRTZXJ2aWNlICBpbXBsZW1lbnRzIElGeFVzZXJOb3RpZmljYXRpb25Mb2NhbERldmVsb3BtZW50U2VydmljZSB7XHJcblxyXG4gIHB1YmxpYyBub3RpZmljYXRpb25zOiBBcnJheTxGeFVzZXJOb3RpZmljYXRpb24+ID0gW11cclxuXHJcbiAgcHJpdmF0ZSBpZENvdW50ZXJGb3JNZXNzYWdlcyA9IDBcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnN0YXJ0VGltZXIoKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE5vdGlmaWNhdGlvbnMoKTogT2JzZXJ2YWJsZTxBcnJheTxGeFVzZXJOb3RpZmljYXRpb24+PiB7XHJcbiAgICByZXR1cm4gb2YodGhpcy5ub3RpZmljYXRpb25zKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHBvc3RVc2VyUmVhZExvZygpOiBPYnNlcnZhYmxlPE9iamVjdD4ge1xyXG4gICAgdGhpcy5ub3RpZmljYXRpb25zLmZvckVhY2goKG1lc3NhZ2UpID0+IG1lc3NhZ2UucmVhZCA9IHRydWUpXHJcbiAgICByZXR1cm4gb2Yoe30pXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHN0YXJ0VGltZXIoKTogdm9pZCB7XHJcbiAgICAvLyB0aGlzIHRpbWVyIGlzIG9uIHB1cnBvc2Ugbm90IHN0b3BwZWQgb3IgdW5zdWJzY3JpYmVkIGFzIGl0IHNpbXVsYXRlcyBhIHNlcnZlciB0aGF0IGlzIGdlbmVyYXRpbmcgbWVzc2FnZXMsXHJcbiAgICAvLyBpdCB3aWxsIG5vdCBiZSBzdG9wcGVkIGJ5IHRoZSBjbGllbnQuXHJcbiAgICB0aW1lcigwLCA1MDAwKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLm5vdGlmaWNhdGlvbnMucHVzaCh0aGlzLmdlbmVyYXRlTmV3TWVzc2FnZSgpKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2VuZXJhdGVOZXdNZXNzYWdlKCk6IEZ4VXNlck5vdGlmaWNhdGlvbiB7XHJcbiAgICB0aGlzLmlkQ291bnRlckZvck1lc3NhZ2VzKytcclxuXHJcbiAgICBjb25zdCBzZXZlcml0eSA9IHRoaXMuZ2V0UmFuZG9tU2V2ZXJpdHkoKVxyXG4gICAgY29uc3QgbWVzc2FnZVRleHQgPSBNYXRoLnJhbmRvbSgpID4gMC41XHJcbiAgICAgID8gYFRoaXMgaXMgJHtzZXZlcml0eX0gbWVzc2FnZSAke3RoaXMuaWRDb3VudGVyRm9yTWVzc2FnZXMudG9TdHJpbmcoKX0gbG9jYWxseSBnZW5lcmF0ZWQuYFxyXG4gICAgICA6IGBUaGlzIGlzICR7c2V2ZXJpdHl9IG1lc3NhZ2UgJHt0aGlzLmlkQ291bnRlckZvck1lc3NhZ2VzLnRvU3RyaW5nKCl9IGxvY2FsbHkgZ2VuZXJhdGVkLiBXaXRoIGEgdGV4dCB3aGljaCBpcyBsb25nZXIgdGhhbiBleHBlY3RlZC4gVGhpcyB3YXkgYSBjb2xsYXBzaWJsZSBtZXNzYWdlIGNhbiBiZSBkZW1vbnN0cmF0ZWQuYFxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIG1lc3NhZ2VIZWFkbGluZTogYER1bW15ICR7c2V2ZXJpdHl9IE1lc3NhZ2UgJHt0aGlzLmlkQ291bnRlckZvck1lc3NhZ2VzLnRvU3RyaW5nKCl9YCxcclxuICAgICAgdXBkYXRlZEJ5VXNlcjogJ2R1bW15JyxcclxuICAgICAgc2V2ZXJpdHk6IHNldmVyaXR5LFxyXG4gICAgICByZWFkOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZVRleHQ6IG1lc3NhZ2VUZXh0LFxyXG4gICAgICBpZDogdGhpcy5pZENvdW50ZXJGb3JNZXNzYWdlcy50b1N0cmluZygpLFxyXG4gICAgICBhdWRpZW5jZTogdW5kZWZpbmVkLFxyXG4gICAgICB1cGRhdGVUaW1lc3RhbXA6IG5ldyBEYXRlKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0UmFuZG9tU2V2ZXJpdHkoKTogJ0lORk8nIHwgJ1dBUk5JTkcnIHwgJ0VSUk9SJyB7XHJcbiAgICBjb25zdCBybmQgPSBNYXRoLnJhbmRvbSgpXHJcbiAgICBpZiAocm5kID4gMC42Nikge1xyXG4gICAgICByZXR1cm4gJ0lORk8nXHJcbiAgICB9IGVsc2UgaWYgKHJuZCA+IDAuMzMpIHtcclxuICAgICAgcmV0dXJuICdXQVJOSU5HJ1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuICdFUlJPUidcclxuIH1cclxuICB9XHJcbn1cclxuXHJcbiJdfQ==