/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NgbDatepickerI18n } from '@ng-bootstrap/ng-bootstrap';
import { TranslateService } from '@ngx-translate/core';
/** @type {?} */
const I18N_VALUES = {
    de: {
        weekdays: ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'],
        months_long: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
        months_short: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
    },
    en: {
        weekdays: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
        months_long: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        months_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dez'],
    }
};
export class I18n {
    /**
     * @param {?} translateService
     */
    constructor(translateService) {
        this.translateService = translateService;
        this.language = 'en';
        translateService.onLangChange.subscribe((/**
         * @param {?} langChangeEvent
         * @return {?}
         */
        (langChangeEvent) => {
            this.language = langChangeEvent.lang;
        }));
    }
}
I18n.decorators = [
    { type: Injectable }
];
/** @nocollapse */
I18n.ctorParameters = () => [
    { type: TranslateService }
];
if (false) {
    /** @type {?} */
    I18n.prototype.language;
    /**
     * @type {?}
     * @private
     */
    I18n.prototype.translateService;
}
export class FxWeekSelectorI18n extends NgbDatepickerI18n {
    /**
     * @param {?} i18n
     */
    constructor(i18n) {
        super();
        this.i18n = i18n;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayAriaLabel(date) {
        return `${date.year}-${date.month}-${date.day}`;
    }
    /**
     * @param {?} month
     * @return {?}
     */
    getMonthFullName(month) {
        return I18N_VALUES[this.i18n.language].months_long[month - 1];
    }
    /**
     * @param {?} month
     * @return {?}
     */
    getMonthShortName(month) {
        return this.getMonthFullName(month);
    }
    /**
     * @param {?} weekday
     * @return {?}
     */
    getWeekdayShortName(weekday) {
        return I18N_VALUES[this.i18n.language].weekdays[weekday - 1];
    }
}
FxWeekSelectorI18n.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FxWeekSelectorI18n.ctorParameters = () => [
    { type: I18n }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FxWeekSelectorI18n.prototype.i18n;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtd2Vlay1zZWxlY3Rvci1pMThuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXdlZWstc2VsZWN0b3IvZngtd2Vlay1zZWxlY3Rvci1pMThuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBaUIsTUFBTSw0QkFBNEIsQ0FBQTtBQUM3RSxPQUFPLEVBQW1CLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUE7O01BR2pFLFdBQVcsR0FBRztJQUNsQixFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7UUFDcEQsV0FBVyxFQUFFLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7UUFDcEksWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7S0FDbkc7SUFDRCxFQUFFLEVBQUU7UUFDRixRQUFRLEVBQUUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7UUFDcEQsV0FBVyxFQUFFLENBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUM7UUFDdkksWUFBWSxFQUFFLENBQUMsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLENBQUM7S0FDbkc7Q0FDRjtBQUdELE1BQU0sT0FBTyxJQUFJOzs7O0lBR2YsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFGL0MsYUFBUSxHQUFHLElBQUksQ0FBQTtRQUdwQixnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsU0FBUzs7OztRQUFFLENBQUMsZUFBZ0MsRUFBRSxFQUFFO1lBQzVFLElBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQTtRQUN0QyxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7OztZQVJGLFVBQVU7Ozs7WUFoQmUsZ0JBQWdCOzs7O0lBa0J4Qyx3QkFBc0I7Ozs7O0lBRVYsZ0NBQTBDOztBQVF4RCxNQUFNLE9BQU8sa0JBQW1CLFNBQVEsaUJBQWlCOzs7O0lBRXZELFlBQW9CLElBQVU7UUFDNUIsS0FBSyxFQUFFLENBQUE7UUFEVyxTQUFJLEdBQUosSUFBSSxDQUFNO0lBRTlCLENBQUM7Ozs7O0lBRU0sZUFBZSxDQUFDLElBQW1CO1FBQ3hDLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO0lBQ2pELENBQUM7Ozs7O0lBRU0sZ0JBQWdCLENBQUMsS0FBYTtRQUNuQyxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDL0QsQ0FBQzs7Ozs7SUFFTSxpQkFBaUIsQ0FBQyxLQUFhO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3JDLENBQUM7Ozs7O0lBRU0sbUJBQW1CLENBQUMsT0FBZTtRQUN4QyxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUE7SUFDOUQsQ0FBQzs7O1lBckJGLFVBQVU7Ozs7WUFHaUIsSUFBSTs7Ozs7OztJQUFsQixrQ0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgTmdiRGF0ZXBpY2tlckkxOG4sIE5nYkRhdGVTdHJ1Y3QgfSBmcm9tICdAbmctYm9vdHN0cmFwL25nLWJvb3RzdHJhcCdcclxuaW1wb3J0IHsgTGFuZ0NoYW5nZUV2ZW50LCBUcmFuc2xhdGVTZXJ2aWNlIH0gZnJvbSAnQG5neC10cmFuc2xhdGUvY29yZSdcclxuXHJcblxyXG5jb25zdCBJMThOX1ZBTFVFUyA9IHtcclxuICBkZToge1xyXG4gICAgd2Vla2RheXM6IFsnTW8nLCAnRGknLCAnTWknLCAnRG8nLCAnRnInLCAnU2EnLCAnU28nXSxcclxuICAgIG1vbnRoc19sb25nOiBbJ0phbnVhcicsICdGZWJydWFyJywgJ03DpHJ6JywgJ0FwcmlsJywgJ01haScsICdKdW5pJywgJ0p1bGknLCAnQXVndXN0JywgJ1NlcHRlbWJlcicsICdPa3RvYmVyJywgJ05vdmVtYmVyJywgJ0RlemVtYmVyJ10sXHJcbiAgICBtb250aHNfc2hvcnQ6IFsnSmFuJywgJ0ZlYicsICdNw6RyJywgJ0FwcicsICdNYWknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09rdCcsICdOb3YnLCAnRGV6J10sXHJcbiAgfSxcclxuICBlbjoge1xyXG4gICAgd2Vla2RheXM6IFsnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnLCAnU3UnXSxcclxuICAgIG1vbnRoc19sb25nOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXSxcclxuICAgIG1vbnRoc19zaG9ydDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RleiddLFxyXG4gIH1cclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSTE4biB7XHJcbiAgcHVibGljIGxhbmd1YWdlID0gJ2VuJ1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRyYW5zbGF0ZVNlcnZpY2U6IFRyYW5zbGF0ZVNlcnZpY2UpIHtcclxuICAgIHRyYW5zbGF0ZVNlcnZpY2Uub25MYW5nQ2hhbmdlLnN1YnNjcmliZSggKGxhbmdDaGFuZ2VFdmVudDogTGFuZ0NoYW5nZUV2ZW50KSA9PiB7XHJcbiAgICAgIHRoaXMubGFuZ3VhZ2UgPSBsYW5nQ2hhbmdlRXZlbnQubGFuZ1xyXG4gICAgfSlcclxuICB9XHJcbn1cclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEZ4V2Vla1NlbGVjdG9ySTE4biBleHRlbmRzIE5nYkRhdGVwaWNrZXJJMThuIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpMThuOiBJMThuKSB7XHJcbiAgICBzdXBlcigpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGF5QXJpYUxhYmVsKGRhdGU6IE5nYkRhdGVTdHJ1Y3QpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke2RhdGUueWVhcn0tJHtkYXRlLm1vbnRofS0ke2RhdGUuZGF5fWBcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRNb250aEZ1bGxOYW1lKG1vbnRoOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIEkxOE5fVkFMVUVTW3RoaXMuaTE4bi5sYW5ndWFnZV0ubW9udGhzX2xvbmdbbW9udGggLSAxXVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE1vbnRoU2hvcnROYW1lKG1vbnRoOiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0TW9udGhGdWxsTmFtZShtb250aClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRXZWVrZGF5U2hvcnROYW1lKHdlZWtkYXk6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSTE4Tl9WQUxVRVNbdGhpcy5pMThuLmxhbmd1YWdlXS53ZWVrZGF5c1t3ZWVrZGF5IC0gMV1cclxuICB9XHJcblxyXG59XHJcbiJdfQ==