/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { AuthenticationService } from '../../../fx-security/services/authentication.service';
import { isDebugMode } from '../../helper/local-storage.helper';
export class DebugDataInterceptor {
    /**
     * @param {?} authService
     * @param {?} route
     */
    constructor(authService, route) {
        this.authService = authService;
        this.route = route;
    }
    /**
     * interceptor for debug data instead of real data
     * [example:
     *  api call https://fx-part-demand-gateway-service-integration/ccs/api/v1/11/vehicle/
     *  redirects to ./assets/mock-data/fx-part-demand-gateway-service-integration/ccs/api/v1/11/vehicle.json
     * ]
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const queryParams = this.route.snapshot.queryParams;
        /** @type {?} */
        const debug = (queryParams['debug'] === 'true' || isDebugMode()) && queryParams['debug'] !== 'false';
        /** @type {?} */
        const isLoggedIn = this.authService.isLoggedIn;
        /** @type {?} */
        let newRequest = request;
        /** @type {?} */
        const searchString = '.apps.emea.vwapps.io';
        /** @type {?} */
        const index = request.url.indexOf(searchString);
        if (isLoggedIn && debug && index > -1) {
            /** @type {?} */
            const apiName = request.url.substring(request.url.indexOf('//') + 2, index);
            /** @type {?} */
            let newUrl = request.url.substring(index + searchString.length).replace(/\/\s*$/, '');
            newUrl = `./assets/mock-data/${apiName}${newUrl}.json`;
            newRequest = request.clone({
                url: newUrl,
                method: 'Get',
            });
        }
        return next.handle(newRequest);
    }
}
DebugDataInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DebugDataInterceptor.ctorParameters = () => [
    { type: AuthenticationService },
    { type: ActivatedRoute }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DebugDataInterceptor.prototype.authService;
    /**
     * @type {?}
     * @private
     */
    DebugDataInterceptor.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctZGF0YS1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvYXBpLWNsaWVudC9pbnRlcmNlcHRvcnMvZGVidWctZGF0YS1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFHaEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sc0RBQXNELENBQUE7QUFDNUYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1DQUFtQyxDQUFBO0FBRy9ELE1BQU0sT0FBTyxvQkFBb0I7Ozs7O0lBQy9CLFlBQW9CLFdBQWtDLEVBQ2xDLEtBQXFCO1FBRHJCLGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtRQUNsQyxVQUFLLEdBQUwsS0FBSyxDQUFnQjtJQUN6QyxDQUFDOzs7Ozs7Ozs7OztJQVNNLFNBQVMsQ0FBQyxPQUF5QixFQUFFLElBQWlCOztjQUNyRCxXQUFXLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsV0FBVzs7Y0FDN0MsS0FBSyxHQUFHLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLE1BQU0sSUFBSSxXQUFXLEVBQUUsQ0FBQyxJQUFJLFdBQVcsQ0FBQyxPQUFPLENBQUMsS0FBSyxPQUFPOztjQUM5RixVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVOztZQUUxQyxVQUFVLEdBQUcsT0FBTzs7Y0FDbEIsWUFBWSxHQUFHLHNCQUFzQjs7Y0FDckMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztRQUUvQyxJQUFJLFVBQVUsSUFBSSxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFOztrQkFDL0IsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUM7O2dCQUN2RSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsS0FBSyxHQUFHLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLEVBQUUsQ0FBQztZQUNyRixNQUFNLEdBQUcsc0JBQXNCLE9BQU8sR0FBRyxNQUFNLE9BQU8sQ0FBQTtZQUN0RCxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDekIsR0FBRyxFQUFFLE1BQU07Z0JBQ1gsTUFBTSxFQUFFLEtBQUs7YUFDZCxDQUFDLENBQUE7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNoQyxDQUFDOzs7WUFoQ0YsVUFBVTs7OztZQUhGLHFCQUFxQjtZQUhyQixjQUFjOzs7Ozs7O0lBUVQsMkNBQTBDOzs7OztJQUMxQyxxQ0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcidcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJ1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9meC1zZWN1cml0eS9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBpc0RlYnVnTW9kZSB9IGZyb20gJy4uLy4uL2hlbHBlci9sb2NhbC1zdG9yYWdlLmhlbHBlcidcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIERlYnVnRGF0YUludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUpIHtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGludGVyY2VwdG9yIGZvciBkZWJ1ZyBkYXRhIGluc3RlYWQgb2YgcmVhbCBkYXRhXHJcbiAgICogW2V4YW1wbGU6XHJcbiAgICogIGFwaSBjYWxsIGh0dHBzOi8vZngtcGFydC1kZW1hbmQtZ2F0ZXdheS1zZXJ2aWNlLWludGVncmF0aW9uL2Njcy9hcGkvdjEvMTEvdmVoaWNsZS9cclxuICAgKiAgcmVkaXJlY3RzIHRvIC4vYXNzZXRzL21vY2stZGF0YS9meC1wYXJ0LWRlbWFuZC1nYXRld2F5LXNlcnZpY2UtaW50ZWdyYXRpb24vY2NzL2FwaS92MS8xMS92ZWhpY2xlLmpzb25cclxuICAgKiBdXHJcbiAgICovXHJcbiAgcHVibGljIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gdGhpcy5yb3V0ZS5zbmFwc2hvdC5xdWVyeVBhcmFtc1xyXG4gICAgY29uc3QgZGVidWcgPSAocXVlcnlQYXJhbXNbJ2RlYnVnJ10gPT09ICd0cnVlJyB8fCBpc0RlYnVnTW9kZSgpKSAmJiBxdWVyeVBhcmFtc1snZGVidWcnXSAhPT0gJ2ZhbHNlJ1xyXG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IHRoaXMuYXV0aFNlcnZpY2UuaXNMb2dnZWRJblxyXG5cclxuICAgIGxldCBuZXdSZXF1ZXN0ID0gcmVxdWVzdFxyXG4gICAgY29uc3Qgc2VhcmNoU3RyaW5nID0gJy5hcHBzLmVtZWEudndhcHBzLmlvJ1xyXG4gICAgY29uc3QgaW5kZXggPSByZXF1ZXN0LnVybC5pbmRleE9mKHNlYXJjaFN0cmluZylcclxuXHJcbiAgICBpZiAoaXNMb2dnZWRJbiAmJiBkZWJ1ZyAmJiBpbmRleCA+IC0xKSB7XHJcbiAgICAgIGNvbnN0IGFwaU5hbWUgPSByZXF1ZXN0LnVybC5zdWJzdHJpbmcocmVxdWVzdC51cmwuaW5kZXhPZignLy8nKSArIDIsIGluZGV4KVxyXG4gICAgICBsZXQgbmV3VXJsID0gcmVxdWVzdC51cmwuc3Vic3RyaW5nKGluZGV4ICsgc2VhcmNoU3RyaW5nLmxlbmd0aCkucmVwbGFjZSgvXFwvXFxzKiQvLCAnJylcclxuICAgICAgbmV3VXJsID0gYC4vYXNzZXRzL21vY2stZGF0YS8ke2FwaU5hbWV9JHtuZXdVcmx9Lmpzb25gXHJcbiAgICAgIG5ld1JlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICB1cmw6IG5ld1VybCxcclxuICAgICAgICBtZXRob2Q6ICdHZXQnLFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKG5ld1JlcXVlc3QpXHJcbiAgfVxyXG59XHJcbiJdfQ==