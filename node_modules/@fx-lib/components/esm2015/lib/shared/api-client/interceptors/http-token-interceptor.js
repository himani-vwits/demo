/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AuthenticationService } from '../../../fx-security/services/authentication.service';
export class HttpTokenInterceptor {
    /**
     * @param {?} authService
     */
    constructor(authService) {
        this.authService = authService;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    intercept(request, next) {
        /** @type {?} */
        const bearerToken = this.authService.getAuthTokenHeaderString();
        /** @type {?} */
        const isLoggedIn = this.authService.isLoggedIn;
        /** @type {?} */
        let newRequest = request;
        if (isLoggedIn && bearerToken && request.url.indexOf('.apps.emea.vwapps.io') > -1) {
            /** @type {?} */
            let url = newRequest.url;
            url = this.replaceHttpOrPrefixUrlWithHttps(url);
            newRequest = request.clone({
                setHeaders: {
                    Authorization: bearerToken,
                },
                url: url,
            });
        }
        return next.handle(newRequest);
    }
    /**
     * @private
     * @param {?} originalUrl
     * @return {?}
     */
    replaceHttpOrPrefixUrlWithHttps(originalUrl) {
        /** @type {?} */
        let url = originalUrl;
        if (!url.startsWith('https')) {
            if (url.startsWith('http:')) {
                url = url.replace('http:', 'https:');
            }
            else if (url.startsWith('//')) {
                url = 'https:' + url;
            }
            else {
                url = 'https://' + url;
            }
        }
        return url;
    }
}
HttpTokenInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
HttpTokenInterceptor.ctorParameters = () => [
    { type: AuthenticationService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpTokenInterceptor.prototype.authService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC10b2tlbi1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvYXBpLWNsaWVudC9pbnRlcmNlcHRvcnMvaHR0cC10b2tlbi1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUUxQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQTtBQUc1RixNQUFNLE9BQU8sb0JBQW9COzs7O0lBQy9CLFlBQW9CLFdBQWtDO1FBQWxDLGdCQUFXLEdBQVgsV0FBVyxDQUF1QjtJQUN0RCxDQUFDOzs7Ozs7SUFFTSxTQUFTLENBQUMsT0FBeUIsRUFBRSxJQUFpQjs7Y0FDckQsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsd0JBQXdCLEVBQUU7O2NBQ3pELFVBQVUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFVBQVU7O1lBQzFDLFVBQVUsR0FBRyxPQUFPO1FBQ3hCLElBQUksVUFBVSxJQUFJLFdBQVcsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxzQkFBc0IsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFOztnQkFDN0UsR0FBRyxHQUFHLFVBQVUsQ0FBQyxHQUFHO1lBQ3hCLEdBQUcsR0FBRyxJQUFJLENBQUMsK0JBQStCLENBQUMsR0FBRyxDQUFDLENBQUE7WUFDL0MsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUM7Z0JBQ3pCLFVBQVUsRUFBRTtvQkFDVixhQUFhLEVBQUUsV0FBVztpQkFDM0I7Z0JBQ0QsR0FBRyxFQUFFLEdBQUc7YUFDVCxDQUFDLENBQUE7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQTtJQUNoQyxDQUFDOzs7Ozs7SUFFTywrQkFBK0IsQ0FBQyxXQUFtQjs7WUFDckQsR0FBRyxHQUFHLFdBQVc7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7YUFDckM7aUJBQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMvQixHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQTthQUNyQjtpQkFBTTtnQkFDTCxHQUFHLEdBQUcsVUFBVSxHQUFHLEdBQUcsQ0FBQTthQUN2QjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDOzs7WUFsQ0YsVUFBVTs7OztZQUZGLHFCQUFxQjs7Ozs7OztJQUloQiwyQ0FBMEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBIYW5kbGVyLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBSZXF1ZXN0IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vLi4vZngtc2VjdXJpdHkvc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZSdcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEh0dHBUb2tlbkludGVyY2VwdG9yIGltcGxlbWVudHMgSHR0cEludGVyY2VwdG9yIHtcclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhTZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UpIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICBjb25zdCBiZWFyZXJUb2tlbiA9IHRoaXMuYXV0aFNlcnZpY2UuZ2V0QXV0aFRva2VuSGVhZGVyU3RyaW5nKClcclxuICAgIGNvbnN0IGlzTG9nZ2VkSW4gPSB0aGlzLmF1dGhTZXJ2aWNlLmlzTG9nZ2VkSW5cclxuICAgIGxldCBuZXdSZXF1ZXN0ID0gcmVxdWVzdFxyXG4gICAgaWYgKGlzTG9nZ2VkSW4gJiYgYmVhcmVyVG9rZW4gJiYgcmVxdWVzdC51cmwuaW5kZXhPZignLmFwcHMuZW1lYS52d2FwcHMuaW8nKSA+IC0xKSB7XHJcbiAgICAgIGxldCB1cmwgPSBuZXdSZXF1ZXN0LnVybFxyXG4gICAgICB1cmwgPSB0aGlzLnJlcGxhY2VIdHRwT3JQcmVmaXhVcmxXaXRoSHR0cHModXJsKVxyXG4gICAgICBuZXdSZXF1ZXN0ID0gcmVxdWVzdC5jbG9uZSh7XHJcbiAgICAgICAgc2V0SGVhZGVyczoge1xyXG4gICAgICAgICAgQXV0aG9yaXphdGlvbjogYmVhcmVyVG9rZW4sXHJcbiAgICAgICAgfSxcclxuICAgICAgICB1cmw6IHVybCxcclxuICAgICAgfSlcclxuICAgIH1cclxuICAgIHJldHVybiBuZXh0LmhhbmRsZShuZXdSZXF1ZXN0KVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZXBsYWNlSHR0cE9yUHJlZml4VXJsV2l0aEh0dHBzKG9yaWdpbmFsVXJsOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgbGV0IHVybCA9IG9yaWdpbmFsVXJsXHJcbiAgICBpZiAoIXVybC5zdGFydHNXaXRoKCdodHRwcycpKSB7XHJcbiAgICAgIGlmICh1cmwuc3RhcnRzV2l0aCgnaHR0cDonKSkge1xyXG4gICAgICAgIHVybCA9IHVybC5yZXBsYWNlKCdodHRwOicsICdodHRwczonKVxyXG4gICAgICB9IGVsc2UgaWYgKHVybC5zdGFydHNXaXRoKCcvLycpKSB7XHJcbiAgICAgICAgdXJsID0gJ2h0dHBzOicgKyB1cmxcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB1cmwgPSAnaHR0cHM6Ly8nICsgdXJsXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB1cmxcclxuICB9XHJcbn1cclxuIl19