/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @template T
 * @param {?} clazz
 * @return {?}
 */
export function getAllFunctionNames(clazz) {
    if (typeof clazz === 'function') {
        clazz = clazz.prototype;
    }
    /** @type {?} */
    let foundedFunctionNames = Reflect.ownKeys(clazz);
    /** @type {?} */
    const parentClass = Object.getPrototypeOf(clazz);
    if (!!parentClass && parentClass.constructor.name !== 'Object') {
        foundedFunctionNames = [...foundedFunctionNames, ...getAllFunctionNames(parentClass)];
    }
    return foundedFunctionNames;
}
/** @type {?} */
const createSpyObjWithFunctionArray = (/**
 * @template K, T
 * @param {?} originalFunctions
 * @return {?}
 */
(originalFunctions) => {
    /** @type {?} */
    let spyObject = {};
    for (const originalFunction of originalFunctions) {
        if (!!((/** @type {?} */ (originalFunction))).originalFnName) {
            /** @type {?} */
            const jestFunction = (/** @type {?} */ (originalFunction));
            spyObject = Object.assign({}, spyObject, { [jestFunction.originalFnName]: !!jestFunction.mockFunction ? jest.fn(jestFunction.mockFunction) : jest.fn() });
        }
        else {
            spyObject = Object.assign({}, spyObject, { [originalFunction]: jest.fn() });
        }
    }
    return (/** @type {?} */ (spyObject));
});
const ɵ0 = createSpyObjWithFunctionArray;
/** @type {?} */
export const createSpyObjFromClass = (/**
 * @template K, T
 * @param {?} clazz
 * @param {...?} originalFunctions
 * @return {?}
 */
(clazz, ...originalFunctions) => {
    /** @type {?} */
    const functionNames = getAllFunctionNames(clazz).sort();
    if (functionNames && functionNames.length > 0) {
        /** @type {?} */
        let functions = (/** @type {?} */ (functionNames.filter((/**
         * @param {?} functionName
         * @return {?}
         */
        functionName => functionName !== 'constructor'))));
        if (originalFunctions && originalFunctions.length > 0) {
            functions =
                [
                    ...functions.filter((/**
                     * @param {?} functionName
                     * @return {?}
                     */
                    functionName => originalFunctions.find((/**
                     * @param {?} original
                     * @return {?}
                     */
                    original => original.originalFnName === functionName)) === undefined)),
                    ...originalFunctions,
                ];
        }
        return createSpyObjWithFunctionArray(functions);
    }
    return null;
});
/** @type {?} */
export const createSpyObj = (/**
 * @template K, T
 * @param {...?} originalFunctions
 * @return {?}
 */
(...originalFunctions) => {
    return createSpyObjWithFunctionArray(originalFunctions);
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jcmVhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvdGVzdC9jcmVhdG9ycy90ZXN0LmNyZWF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUlBLE1BQU0sVUFBVSxtQkFBbUIsQ0FBc0IsS0FBUTtJQUMvRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFVBQVUsRUFBRTtRQUMvQixLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQTtLQUN4Qjs7UUFDRyxvQkFBb0IsR0FBa0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUM7O1VBQzFELFdBQVcsR0FBRyxNQUFNLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQztJQUNoRCxJQUFJLENBQUMsQ0FBQyxXQUFXLElBQUksV0FBVyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQzlELG9CQUFvQixHQUFHLENBQUMsR0FBRyxvQkFBb0IsRUFBRSxHQUFHLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUE7S0FDdEY7SUFDRCxPQUFPLG9CQUFvQixDQUFBO0FBQzdCLENBQUM7O01BRUssNkJBQTZCOzs7OztBQUFHLENBQXlCLGlCQUF5QyxFQUFvQixFQUFFOztRQUN4SCxTQUFTLEdBQUcsRUFBRTtJQUVsQixLQUFLLE1BQU0sZ0JBQWdCLElBQUksaUJBQWlCLEVBQUU7UUFDaEQsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBQSxnQkFBZ0IsRUFBZ0IsQ0FBQyxDQUFDLGNBQWMsRUFBRTs7a0JBQ2pELFlBQVksR0FBRyxtQkFBQSxnQkFBZ0IsRUFBZ0I7WUFDckQsU0FBUyxxQkFDSixTQUFTLElBRVosQ0FBQyxZQUFZLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLEdBQzVHLENBQUE7U0FDRjthQUFNO1lBQ0wsU0FBUyxxQkFDSixTQUFTLElBRVosQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLElBQUksQ0FBQyxFQUFFLEVBQUUsR0FDOUIsQ0FBQTtTQUNGO0tBQ0Y7SUFDRCxPQUFPLG1CQUFBLFNBQVMsRUFBTyxDQUFBO0FBQ3pCLENBQUMsQ0FBQTs7O0FBRUQsTUFBTSxPQUFPLHFCQUFxQjs7Ozs7O0FBQUcsQ0FBeUIsS0FBUSxFQUFFLEdBQUcsaUJBQWlDLEVBQW9CLEVBQUU7O1VBQzFILGFBQWEsR0FBRyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLEVBQUU7SUFDdkQsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O1lBQ3pDLFNBQVMsR0FBMkIsbUJBQUEsYUFBYSxDQUFDLE1BQU07Ozs7UUFBQyxZQUFZLENBQUMsRUFBRSxDQUFDLFlBQVksS0FBSyxhQUFhLEVBQUMsRUFBWTtRQUN4SCxJQUFJLGlCQUFpQixJQUFJLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDckQsU0FBUztnQkFDUDtvQkFDRSxHQUFHLFNBQVMsQ0FBQyxNQUFNOzs7O29CQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsaUJBQWlCLENBQUMsSUFBSTs7OztvQkFBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEtBQUssWUFBWSxFQUFDLEtBQUssU0FBUyxFQUFDO29CQUMvSCxHQUFHLGlCQUFpQjtpQkFDckIsQ0FBQTtTQUNKO1FBRUQsT0FBTyw2QkFBNkIsQ0FBTyxTQUFTLENBQUMsQ0FBQTtLQUN0RDtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBOztBQUVELE1BQU0sT0FBTyxZQUFZOzs7OztBQUFHLENBQXlCLEdBQUcsaUJBQXlDLEVBQW9CLEVBQUU7SUFDckgsT0FBTyw2QkFBNkIsQ0FBTyxpQkFBaUIsQ0FBQyxDQUFBO0FBQy9ELENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBKZXN0T3JpZ2luYWxGdW5jdGlvbiB9IGZyb20gJy4uLy4uLy4uL3NoYXJlZC90eXBlcy9qZXN0LnR5cGVzJ1xyXG5pbXBvcnQgeyBKZXN0RXh0ZW5kZWQsIEplc3RTcHlPYmplY3QgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzL2plc3QtZXh0ZW5kZWQnXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsRnVuY3Rpb25OYW1lczxUIGV4dGVuZHMgVHlwZTxhbnk+PihjbGF6ejogVCk6IFByb3BlcnR5S2V5W10ge1xyXG4gIGlmICh0eXBlb2YgY2xhenogPT09ICdmdW5jdGlvbicpIHtcclxuICAgIGNsYXp6ID0gY2xhenoucHJvdG90eXBlXHJcbiAgfVxyXG4gIGxldCBmb3VuZGVkRnVuY3Rpb25OYW1lczogUHJvcGVydHlLZXlbXSA9IFJlZmxlY3Qub3duS2V5cyhjbGF6eilcclxuICBjb25zdCBwYXJlbnRDbGFzcyA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihjbGF6eilcclxuICBpZiAoISFwYXJlbnRDbGFzcyAmJiBwYXJlbnRDbGFzcy5jb25zdHJ1Y3Rvci5uYW1lICE9PSAnT2JqZWN0Jykge1xyXG4gICAgZm91bmRlZEZ1bmN0aW9uTmFtZXMgPSBbLi4uZm91bmRlZEZ1bmN0aW9uTmFtZXMsIC4uLmdldEFsbEZ1bmN0aW9uTmFtZXMocGFyZW50Q2xhc3MpXVxyXG4gIH1cclxuICByZXR1cm4gZm91bmRlZEZ1bmN0aW9uTmFtZXNcclxufVxyXG5cclxuY29uc3QgY3JlYXRlU3B5T2JqV2l0aEZ1bmN0aW9uQXJyYXkgPSA8SywgVCBleHRlbmRzIFR5cGU8YW55Pj4ob3JpZ2luYWxGdW5jdGlvbnM6IEplc3RPcmlnaW5hbEZ1bmN0aW9uW10pOiBKZXN0U3B5T2JqZWN0PEs+ID0+IHtcclxuICBsZXQgc3B5T2JqZWN0ID0ge31cclxuXHJcbiAgZm9yIChjb25zdCBvcmlnaW5hbEZ1bmN0aW9uIG9mIG9yaWdpbmFsRnVuY3Rpb25zKSB7XHJcbiAgICBpZiAoISEob3JpZ2luYWxGdW5jdGlvbiBhcyBKZXN0RXh0ZW5kZWQpLm9yaWdpbmFsRm5OYW1lKSB7XHJcbiAgICAgIGNvbnN0IGplc3RGdW5jdGlvbiA9IG9yaWdpbmFsRnVuY3Rpb24gYXMgSmVzdEV4dGVuZGVkXHJcbiAgICAgIHNweU9iamVjdCA9IHtcclxuICAgICAgICAuLi5zcHlPYmplY3QsXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIFtqZXN0RnVuY3Rpb24ub3JpZ2luYWxGbk5hbWVdOiAhIWplc3RGdW5jdGlvbi5tb2NrRnVuY3Rpb24gPyBqZXN0LmZuKGplc3RGdW5jdGlvbi5tb2NrRnVuY3Rpb24pIDogamVzdC5mbigpLFxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzcHlPYmplY3QgPSB7XHJcbiAgICAgICAgLi4uc3B5T2JqZWN0LFxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBbb3JpZ2luYWxGdW5jdGlvbl06IGplc3QuZm4oKSxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gc3B5T2JqZWN0IGFzIGFueVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlU3B5T2JqRnJvbUNsYXNzID0gPEssIFQgZXh0ZW5kcyBUeXBlPGFueT4+KGNsYXp6OiBULCAuLi5vcmlnaW5hbEZ1bmN0aW9uczogSmVzdEV4dGVuZGVkW10pOiBKZXN0U3B5T2JqZWN0PEs+ID0+IHtcclxuICBjb25zdCBmdW5jdGlvbk5hbWVzID0gZ2V0QWxsRnVuY3Rpb25OYW1lcyhjbGF6eikuc29ydCgpXHJcbiAgaWYgKGZ1bmN0aW9uTmFtZXMgJiYgZnVuY3Rpb25OYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICBsZXQgZnVuY3Rpb25zOiBKZXN0T3JpZ2luYWxGdW5jdGlvbltdID0gZnVuY3Rpb25OYW1lcy5maWx0ZXIoZnVuY3Rpb25OYW1lID0+IGZ1bmN0aW9uTmFtZSAhPT0gJ2NvbnN0cnVjdG9yJykgYXMgc3RyaW5nW11cclxuICAgIGlmIChvcmlnaW5hbEZ1bmN0aW9ucyAmJiBvcmlnaW5hbEZ1bmN0aW9ucy5sZW5ndGggPiAwKSB7XHJcbiAgICAgIGZ1bmN0aW9ucyA9XHJcbiAgICAgICAgW1xyXG4gICAgICAgICAgLi4uZnVuY3Rpb25zLmZpbHRlcihmdW5jdGlvbk5hbWUgPT4gb3JpZ2luYWxGdW5jdGlvbnMuZmluZChvcmlnaW5hbCA9PiBvcmlnaW5hbC5vcmlnaW5hbEZuTmFtZSA9PT0gZnVuY3Rpb25OYW1lKSA9PT0gdW5kZWZpbmVkKSxcclxuICAgICAgICAgIC4uLm9yaWdpbmFsRnVuY3Rpb25zLFxyXG4gICAgICAgIF1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3JlYXRlU3B5T2JqV2l0aEZ1bmN0aW9uQXJyYXk8SywgVD4oZnVuY3Rpb25zKVxyXG4gIH1cclxuICByZXR1cm4gbnVsbFxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY3JlYXRlU3B5T2JqID0gPEssIFQgZXh0ZW5kcyBUeXBlPGFueT4+KC4uLm9yaWdpbmFsRnVuY3Rpb25zOiBKZXN0T3JpZ2luYWxGdW5jdGlvbltdKTogSmVzdFNweU9iamVjdDxLPiA9PiB7XHJcbiAgcmV0dXJuIGNyZWF0ZVNweU9ialdpdGhGdW5jdGlvbkFycmF5PEssIFQ+KG9yaWdpbmFsRnVuY3Rpb25zKVxyXG59XHJcbiJdfQ==