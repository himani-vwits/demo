/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject } from 'rxjs';
export class ActivatedRouteMock {
    constructor() {
        this.fragment = new BehaviorSubject(this.testFragment);
        this.params = new BehaviorSubject(this.testParams);
        this.queryParams = new BehaviorSubject(this.testQueryParams);
    }
    /**
     * @return {?}
     */
    get testParams() {
        return this._testParams;
    }
    /**
     * @param {?} params
     * @return {?}
     */
    set testParams(params) {
        this._testParams = params;
        this.params.next(params);
    }
    /**
     * @return {?}
     */
    get testFragment() {
        return this._fragment;
    }
    /**
     * @param {?} fragment
     * @return {?}
     */
    set testFragment(fragment) {
        this._fragment = fragment;
        this.fragment.next(fragment);
    }
    /**
     * @return {?}
     */
    get testQueryParams() {
        return this._queryParams;
    }
    /**
     * @param {?} queryParams
     * @return {?}
     */
    set testQueryParams(queryParams) {
        this._queryParams = queryParams;
        this.queryParams.next(queryParams);
    }
    /**
     * @return {?}
     */
    get snapshot() {
        return {
            params: this.testParams,
            queryParams: this.testQueryParams,
            fragment: this.testFragment,
        };
    }
    /**
     * @return {?}
     */
    get parent() {
        return {
            fragment: this.fragment,
            params: this.params,
            queryParams: this.queryParams,
        };
    }
}
if (false) {
    /** @type {?} */
    ActivatedRouteMock.prototype.fragment;
    /** @type {?} */
    ActivatedRouteMock.prototype.params;
    /** @type {?} */
    ActivatedRouteMock.prototype.queryParams;
    /**
     * @type {?}
     * @private
     */
    ActivatedRouteMock.prototype._testParams;
    /**
     * @type {?}
     * @private
     */
    ActivatedRouteMock.prototype._fragment;
    /**
     * @type {?}
     * @private
     */
    ActivatedRouteMock.prototype._queryParams;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZhdGVkLXJvdXRlLW1vY2suanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZngtbGliL2NvbXBvbmVudHMvIiwic291cmNlcyI6WyJsaWIvc2hhcmVkL3Rlc3QvbW9ja3MvYWN0aXZhdGVkLXJvdXRlLW1vY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFFdEMsTUFBTSxPQUFPLGtCQUFrQjtJQUEvQjtRQTZDUyxhQUFRLEdBQUcsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1FBQ2pELFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDN0MsZ0JBQVcsR0FBRyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUE7SUFRaEUsQ0FBQzs7OztJQXJEQyxJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFBO0lBQ3pCLENBQUM7Ozs7O0lBRUQsSUFBVyxVQUFVLENBQUMsTUFBVTtRQUM5QixJQUFJLENBQUMsV0FBVyxHQUFHLE1BQU0sQ0FBQTtRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMxQixDQUFDOzs7O0lBRUQsSUFBVyxZQUFZO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQTtJQUN2QixDQUFDOzs7OztJQUVELElBQVcsWUFBWSxDQUFDLFFBQWdCO1FBQ3RDLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFBO1FBQ3pCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQzlCLENBQUM7Ozs7SUFFRCxJQUFXLGVBQWU7UUFDeEIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFBO0lBQzFCLENBQUM7Ozs7O0lBRUQsSUFBVyxlQUFlLENBQUMsV0FBZTtRQUN4QyxJQUFJLENBQUMsWUFBWSxHQUFHLFdBQVcsQ0FBQTtRQUMvQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUNwQyxDQUFDOzs7O0lBRUQsSUFBVyxRQUFRO1FBQ2pCLE9BQU87WUFDTCxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDdkIsV0FBVyxFQUFFLElBQUksQ0FBQyxlQUFlO1lBQ2pDLFFBQVEsRUFBRSxJQUFJLENBQUMsWUFBWTtTQUM1QixDQUFBO0lBQ0gsQ0FBQzs7OztJQUVELElBQVcsTUFBTTtRQUNmLE9BQU87WUFDTCxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVztTQUM5QixDQUFBO0lBQ0gsQ0FBQztDQVlGOzs7SUFWQyxzQ0FBd0Q7O0lBQ3hELG9DQUFvRDs7SUFDcEQseUNBQThEOzs7OztJQUU5RCx5Q0FBdUI7Ozs7O0lBRXZCLHVDQUF5Qjs7Ozs7SUFFekIsMENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0IH0gZnJvbSAncnhqcydcclxuXHJcbmV4cG9ydCBjbGFzcyBBY3RpdmF0ZWRSb3V0ZU1vY2sge1xyXG5cclxuICBwdWJsaWMgZ2V0IHRlc3RQYXJhbXMoKToge30ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Rlc3RQYXJhbXNcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdGVzdFBhcmFtcyhwYXJhbXM6IHt9KSB7XHJcbiAgICB0aGlzLl90ZXN0UGFyYW1zID0gcGFyYW1zXHJcbiAgICB0aGlzLnBhcmFtcy5uZXh0KHBhcmFtcylcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdGVzdEZyYWdtZW50KCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5fZnJhZ21lbnRcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgdGVzdEZyYWdtZW50KGZyYWdtZW50OiBzdHJpbmcpIHtcclxuICAgIHRoaXMuX2ZyYWdtZW50ID0gZnJhZ21lbnRcclxuICAgIHRoaXMuZnJhZ21lbnQubmV4dChmcmFnbWVudClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdGVzdFF1ZXJ5UGFyYW1zKCk6IHt9IHtcclxuICAgIHJldHVybiB0aGlzLl9xdWVyeVBhcmFtc1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCB0ZXN0UXVlcnlQYXJhbXMocXVlcnlQYXJhbXM6IHt9KSB7XHJcbiAgICB0aGlzLl9xdWVyeVBhcmFtcyA9IHF1ZXJ5UGFyYW1zXHJcbiAgICB0aGlzLnF1ZXJ5UGFyYW1zLm5leHQocXVlcnlQYXJhbXMpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHNuYXBzaG90KCk6IHt9IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHBhcmFtczogdGhpcy50ZXN0UGFyYW1zLFxyXG4gICAgICBxdWVyeVBhcmFtczogdGhpcy50ZXN0UXVlcnlQYXJhbXMsXHJcbiAgICAgIGZyYWdtZW50OiB0aGlzLnRlc3RGcmFnbWVudCxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgcGFyZW50KCk6IHt9IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGZyYWdtZW50OiB0aGlzLmZyYWdtZW50LFxyXG4gICAgICBwYXJhbXM6IHRoaXMucGFyYW1zLFxyXG4gICAgICBxdWVyeVBhcmFtczogdGhpcy5xdWVyeVBhcmFtcyxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBmcmFnbWVudCA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy50ZXN0RnJhZ21lbnQpXHJcbiAgcHVibGljIHBhcmFtcyA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy50ZXN0UGFyYW1zKVxyXG4gIHB1YmxpYyBxdWVyeVBhcmFtcyA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy50ZXN0UXVlcnlQYXJhbXMpXHJcblxyXG4gIHByaXZhdGUgX3Rlc3RQYXJhbXM6IHt9XHJcblxyXG4gIHByaXZhdGUgX2ZyYWdtZW50OiBzdHJpbmdcclxuXHJcbiAgcHJpdmF0ZSBfcXVlcnlQYXJhbXM6IHt9XHJcblxyXG59XHJcbiJdfQ==