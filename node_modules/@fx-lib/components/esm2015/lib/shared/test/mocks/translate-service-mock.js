/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { get } from 'lodash';
import { of, Subject } from 'rxjs';
/**
 * @record
 */
export function ITranslateServiceMock() { }
if (false) {
    /** @type {?} */
    ITranslateServiceMock.prototype.onTranslationChange;
    /** @type {?} */
    ITranslateServiceMock.prototype.onLangChange;
    /** @type {?} */
    ITranslateServiceMock.prototype.onDefaultLangChange;
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    ITranslateServiceMock.prototype.get = function (key, param) { };
    /**
     * @param {?} key
     * @return {?}
     */
    ITranslateServiceMock.prototype.instant = function (key) { };
    /**
     * @return {?}
     */
    ITranslateServiceMock.prototype.getBrowserLang = function () { };
    /**
     * @return {?}
     */
    ITranslateServiceMock.prototype.getBrowserCultureLang = function () { };
    /**
     * @param {?} lang
     * @return {?}
     */
    ITranslateServiceMock.prototype.getTranslation = function (lang) { };
}
/**
 * @record
 */
export function ITranslateServiceMockConfig() { }
if (false) {
    /** @type {?|undefined} */
    ITranslateServiceMockConfig.prototype.browserCulterLang;
    /** @type {?|undefined} */
    ITranslateServiceMockConfig.prototype.currentLang;
    /** @type {?|undefined} */
    ITranslateServiceMockConfig.prototype.translation;
    /** @type {?|undefined} */
    ITranslateServiceMockConfig.prototype.translations;
}
export class TranslateServiceMockImpl {
    /**
     * @param {?} _config
     */
    constructor(_config) {
        this._config = _config;
        this.onLangChange = new Subject();
    }
    /**
     * @return {?}
     */
    get currentLang() {
        return get(this._config, 'currentLang', this.getBrowserCultureLang().substr(0, 2));
    }
    /**
     * @param {?} key
     * @param {?=} param
     * @return {?}
     */
    get(key, param) {
        if (Array.isArray(key)) {
            /** @type {?} */
            const keyMap = {};
            key.forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => {
                keyMap[k] = this.instant(k);
            }));
            return of(keyMap);
        }
        return of(this.instant(key));
    }
    /**
     * @param {?} language
     * @return {?}
     */
    switchLanguage(language) {
        this.onLangChange.next(language);
    }
    /**
     * @return {?}
     */
    getBrowserCultureLang() {
        return get(this._config, 'browserCultureLang', 'de-DE');
    }
    /**
     * @return {?}
     */
    getBrowserLang() {
        const [browserLang] = this.getBrowserCultureLang().split('-');
        return browserLang;
    }
    /**
     * @param {?} lang
     * @return {?}
     */
    getTranslation(lang) {
        return of(get(this._config, `translation.${lang}`, lang));
    }
    /**
     * @param {?} key
     * @return {?}
     */
    instant(key) {
        return get(this._config, `translations.${key}`, key);
    }
}
if (false) {
    /** @type {?} */
    TranslateServiceMockImpl.prototype.onDefaultLangChange;
    /** @type {?} */
    TranslateServiceMockImpl.prototype.onLangChange;
    /** @type {?} */
    TranslateServiceMockImpl.prototype.onTranslationChange;
    /**
     * @type {?}
     * @private
     */
    TranslateServiceMockImpl.prototype._config;
}
/** @type {?} */
export const translateServiceMock = new TranslateServiceMockImpl({});
/**
 * @param {?} config
 * @return {?}
 */
export function createTranslateServiceMock(config) {
    return new TranslateServiceMockImpl(config);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLXNlcnZpY2UtbW9jay5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvdGVzdC9tb2Nrcy90cmFuc2xhdGUtc2VydmljZS1tb2NrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sUUFBUSxDQUFBO0FBQzVCLE9BQU8sRUFBYyxFQUFFLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFBOzs7O0FBRTlDLDJDQWNDOzs7SUFiQyxvREFBb0M7O0lBQ3BDLDZDQUE2Qjs7SUFDN0Isb0RBQW9DOzs7Ozs7SUFFcEMsZ0VBQWlFOzs7OztJQUVqRSw2REFBeUI7Ozs7SUFFekIsaUVBQXdCOzs7O0lBRXhCLHdFQUErQjs7Ozs7SUFFL0IscUVBQTZDOzs7OztBQUcvQyxpREFLQzs7O0lBSkMsd0RBQTBCOztJQUMxQixrREFBb0I7O0lBQ3BCLGtEQUFvQzs7SUFDcEMsbURBQXFDOztBQUd2QyxNQUFNLE9BQU8sd0JBQXdCOzs7O0lBU25DLFlBQTJCLE9BQW9DO1FBQXBDLFlBQU8sR0FBUCxPQUFPLENBQTZCO1FBQzdELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxPQUFPLEVBQU8sQ0FBQTtJQUN4QyxDQUFDOzs7O0lBTkQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNwRixDQUFDOzs7Ozs7SUFNTSxHQUFHLENBQUMsR0FBMkIsRUFBRSxLQUFjO1FBQ3BELElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTs7a0JBQ2hCLE1BQU0sR0FBRyxFQUFFO1lBQ2pCLEdBQUcsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ2QsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDN0IsQ0FBQyxFQUFDLENBQUE7WUFDRixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQTtTQUNsQjtRQUNELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUM5QixDQUFDOzs7OztJQUVNLGNBQWMsQ0FBQyxRQUFhO1FBQ2pDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2xDLENBQUM7Ozs7SUFFTSxxQkFBcUI7UUFDMUIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN6RCxDQUFDOzs7O0lBRU0sY0FBYztjQUNiLENBQUMsV0FBVyxDQUFDLEdBQWEsSUFBSSxDQUFDLHFCQUFxQixFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN2RSxPQUFPLFdBQVcsQ0FBQTtJQUNwQixDQUFDOzs7OztJQUVNLGNBQWMsQ0FBQyxJQUFZO1FBQ2hDLE9BQU8sRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLGVBQWUsSUFBSSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQTtJQUMzRCxDQUFDOzs7OztJQUVNLE9BQU8sQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsZ0JBQWdCLEdBQUcsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3RELENBQUM7Q0FFRjs7O0lBNUNDLHVEQUEyQzs7SUFDM0MsZ0RBQWlDOztJQUNqQyx1REFBMkM7Ozs7O0lBTXhCLDJDQUE0Qzs7O0FBc0NqRSxNQUFNLE9BQU8sb0JBQW9CLEdBQUcsSUFBSSx3QkFBd0IsQ0FBQyxFQUFFLENBQUM7Ozs7O0FBRXBFLE1BQU0sVUFBVSwwQkFBMEIsQ0FBQyxNQUFtQztJQUM1RSxPQUFPLElBQUksd0JBQXdCLENBQUMsTUFBTSxDQUFDLENBQUE7QUFDN0MsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldCB9IGZyb20gJ2xvZGFzaCdcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3QgfSBmcm9tICdyeGpzJ1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBJVHJhbnNsYXRlU2VydmljZU1vY2sge1xyXG4gIG9uVHJhbnNsYXRpb25DaGFuZ2U6IE9ic2VydmFibGU8YW55PlxyXG4gIG9uTGFuZ0NoYW5nZTogT2JzZXJ2YWJsZTxhbnk+XHJcbiAgb25EZWZhdWx0TGFuZ0NoYW5nZTogT2JzZXJ2YWJsZTxhbnk+XHJcblxyXG4gIGdldChrZXk6IHN0cmluZyB8IEFycmF5PHN0cmluZz4sIHBhcmFtPzogT2JqZWN0KTogT2JzZXJ2YWJsZTxhbnk+XHJcblxyXG4gIGluc3RhbnQoa2V5OiBzdHJpbmcpOiBhbnlcclxuXHJcbiAgZ2V0QnJvd3NlckxhbmcoKTogc3RyaW5nXHJcblxyXG4gIGdldEJyb3dzZXJDdWx0dXJlTGFuZygpOiBzdHJpbmdcclxuXHJcbiAgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgSVRyYW5zbGF0ZVNlcnZpY2VNb2NrQ29uZmlnIHtcclxuICBicm93c2VyQ3VsdGVyTGFuZz86IHN0cmluZ1xyXG4gIGN1cnJlbnRMYW5nPzogc3RyaW5nXHJcbiAgdHJhbnNsYXRpb24/OiB7IFtrZXk6IHN0cmluZ106IGFueSB9XHJcbiAgdHJhbnNsYXRpb25zPzogeyBba2V5OiBzdHJpbmddOiBhbnkgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlU2VydmljZU1vY2tJbXBsIGltcGxlbWVudHMgSVRyYW5zbGF0ZVNlcnZpY2VNb2NrIHtcclxuICBwdWJsaWMgb25EZWZhdWx0TGFuZ0NoYW5nZTogT2JzZXJ2YWJsZTxhbnk+XHJcbiAgcHVibGljIG9uTGFuZ0NoYW5nZTogU3ViamVjdDxhbnk+XHJcbiAgcHVibGljIG9uVHJhbnNsYXRpb25DaGFuZ2U6IE9ic2VydmFibGU8YW55PlxyXG5cclxuICBwdWJsaWMgZ2V0IGN1cnJlbnRMYW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gZ2V0KHRoaXMuX2NvbmZpZywgJ2N1cnJlbnRMYW5nJywgdGhpcy5nZXRCcm93c2VyQ3VsdHVyZUxhbmcoKS5zdWJzdHIoMCwgMikpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IocHJpdmF0ZSBfY29uZmlnOiBJVHJhbnNsYXRlU2VydmljZU1vY2tDb25maWcpIHtcclxuICAgIHRoaXMub25MYW5nQ2hhbmdlID0gbmV3IFN1YmplY3Q8YW55PigpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPiwgcGFyYW0/OiBPYmplY3QpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoa2V5KSkge1xyXG4gICAgICBjb25zdCBrZXlNYXAgPSB7fVxyXG4gICAgICBrZXkuZm9yRWFjaChrID0+IHtcclxuICAgICAgICBrZXlNYXBba10gPSB0aGlzLmluc3RhbnQoaylcclxuICAgICAgfSlcclxuICAgICAgcmV0dXJuIG9mKGtleU1hcClcclxuICAgIH1cclxuICAgIHJldHVybiBvZih0aGlzLmluc3RhbnQoa2V5KSlcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzd2l0Y2hMYW5ndWFnZShsYW5ndWFnZTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLm9uTGFuZ0NoYW5nZS5uZXh0KGxhbmd1YWdlKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEJyb3dzZXJDdWx0dXJlTGFuZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGdldCh0aGlzLl9jb25maWcsICdicm93c2VyQ3VsdHVyZUxhbmcnLCAnZGUtREUnKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEJyb3dzZXJMYW5nKCk6IHN0cmluZyB7XHJcbiAgICBjb25zdCBbYnJvd3NlckxhbmddOiBzdHJpbmdbXSA9IHRoaXMuZ2V0QnJvd3NlckN1bHR1cmVMYW5nKCkuc3BsaXQoJy0nKVxyXG4gICAgcmV0dXJuIGJyb3dzZXJMYW5nXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0VHJhbnNsYXRpb24obGFuZzogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIHJldHVybiBvZihnZXQodGhpcy5fY29uZmlnLCBgdHJhbnNsYXRpb24uJHtsYW5nfWAsIGxhbmcpKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGluc3RhbnQoa2V5OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgcmV0dXJuIGdldCh0aGlzLl9jb25maWcsIGB0cmFuc2xhdGlvbnMuJHtrZXl9YCwga2V5KVxyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0cmFuc2xhdGVTZXJ2aWNlTW9jayA9IG5ldyBUcmFuc2xhdGVTZXJ2aWNlTW9ja0ltcGwoe30pXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVHJhbnNsYXRlU2VydmljZU1vY2soY29uZmlnOiBJVHJhbnNsYXRlU2VydmljZU1vY2tDb25maWcpOiBJVHJhbnNsYXRlU2VydmljZU1vY2sge1xyXG4gIHJldHVybiBuZXcgVHJhbnNsYXRlU2VydmljZU1vY2tJbXBsKGNvbmZpZylcclxufVxyXG4iXX0=