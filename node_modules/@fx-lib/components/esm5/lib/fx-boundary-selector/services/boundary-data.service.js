/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { AuthenticationService } from '../../fx-security/services/authentication.service';
import { SECURITY_CONFIG } from '../../fx-security/domain/security-config';
import { AuthorizationService } from '../../fx-security/services/authorization.service';
import { map } from 'rxjs/operators';
var BoundaryDataService = /** @class */ (function () {
    function BoundaryDataService(http, authenticationService, authorizationService, securityConfig) {
        this.http = http;
        this.authenticationService = authenticationService;
        this.authorizationService = authorizationService;
        this.securityConfig = securityConfig;
    }
    /**
     * @return {?}
     */
    BoundaryDataService.prototype.getBoundariesForUserScope = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.http.get(this.getApiUrl()).pipe(map((/**
         * @param {?} boundarySelectorResources
         * @return {?}
         */
        function (boundarySelectorResources) {
            return _this.filterBoundariesForUserScope(boundarySelectorResources);
        })));
    };
    /**
     * @param {?} boundarySelectorResources
     * @return {?}
     */
    BoundaryDataService.prototype.filterBoundariesForUserScope = /**
     * @param {?} boundarySelectorResources
     * @return {?}
     */
    function (boundarySelectorResources) {
        var _this = this;
        /** @type {?} */
        var filteredBoundarySelectorResources = [];
        if (this.authorizationService.hasDevopsRole()) {
            return boundarySelectorResources;
        }
        this.authenticationService.getPayload().roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            if (role.boundaries[_this.securityConfig.boundary_name]) {
                role.boundaries[_this.securityConfig.boundary_name].forEach((/**
                 * @param {?} scope
                 * @return {?}
                 */
                function (scope) {
                    /** @type {?} */
                    var boundaryFound = boundarySelectorResources.find((/**
                     * @param {?} boundary
                     * @return {?}
                     */
                    function (boundary) { return boundary.boundaryValueKey === scope; }));
                    if (boundaryFound) {
                        filteredBoundarySelectorResources.push(boundaryFound);
                    }
                }));
            }
        }));
        return filteredBoundarySelectorResources;
    };
    /**
     * @private
     * @return {?}
     */
    BoundaryDataService.prototype.getApiUrl = /**
     * @private
     * @return {?}
     */
    function () {
        return this.securityConfig.authorization_service_url + "/api/v1/domains/" + this.securityConfig.app_domain + "/apps/" + this.securityConfig.app_name + "/boundaryvaluesminified/";
    };
    BoundaryDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BoundaryDataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: AuthenticationService },
        { type: AuthorizationService },
        { type: undefined, decorators: [{ type: Inject, args: [SECURITY_CONFIG,] }] }
    ]; };
    return BoundaryDataService;
}());
export { BoundaryDataService };
if (false) {
    /** @type {?} */
    BoundaryDataService.prototype.securityConfig;
    /**
     * @type {?}
     * @private
     */
    BoundaryDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    BoundaryDataService.prototype.authenticationService;
    /**
     * @type {?}
     * @private
     */
    BoundaryDataService.prototype.authorizationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRhcnktZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LWJvdW5kYXJ5LXNlbGVjdG9yL3NlcnZpY2VzL2JvdW5kYXJ5LWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDbEQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFBO0FBR3pGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQTtBQUMxRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrREFBa0QsQ0FBQTtBQUV2RixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUE7QUFHcEM7SUFLSSw2QkFDWSxJQUFnQixFQUNoQixxQkFBNEMsRUFDNUMsb0JBQTBDLEVBQ3pCLGNBQThCO1FBSC9DLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBRWxELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFBO0lBQ3hDLENBQUM7Ozs7SUFFTSx1REFBeUI7OztJQUFoQztRQUFBLGlCQUlDO1FBSEcsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBNkIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFDLHlCQUFxRDtZQUM5SCxPQUFPLEtBQUksQ0FBQyw0QkFBNEIsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFBO1FBQ3ZFLENBQUMsRUFBQyxDQUFDLENBQUE7SUFDUCxDQUFDOzs7OztJQUVNLDBEQUE0Qjs7OztJQUFuQyxVQUFvQyx5QkFBcUQ7UUFBekYsaUJBbUJDOztZQWxCUyxpQ0FBaUMsR0FBK0IsRUFBRTtRQUV4RSxJQUFJLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUMzQyxPQUFPLHlCQUF5QixDQUFBO1NBQ25DO1FBRUQsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQyxJQUFVO1lBQzdELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUNwRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTzs7OztnQkFBQyxVQUFDLEtBQWE7O3dCQUMvRCxhQUFhLEdBQUcseUJBQXlCLENBQUMsSUFBSTs7OztvQkFBQyxVQUFBLFFBQVEsSUFBSSxPQUFBLFFBQVEsQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLLEVBQW5DLENBQW1DLEVBQUM7b0JBQ3JHLElBQUksYUFBYSxFQUFFO3dCQUNmLGlDQUFpQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQTtxQkFDeEQ7Z0JBQ0wsQ0FBQyxFQUFDLENBQUE7YUFDTDtRQUNMLENBQUMsRUFBQyxDQUFBO1FBRUYsT0FBTyxpQ0FBaUMsQ0FBQTtJQUM1QyxDQUFDOzs7OztJQUVPLHVDQUFTOzs7O0lBQWpCO1FBQ0ksT0FBVSxJQUFJLENBQUMsY0FBYyxDQUFDLHlCQUF5Qix3QkFBbUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLGNBQVMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLDZCQUEwQixDQUFBO0lBQzNLLENBQUM7O2dCQTFDSixVQUFVOzs7O2dCQVZGLFVBQVU7Z0JBQ1YscUJBQXFCO2dCQUlyQixvQkFBb0I7Z0RBY3BCLE1BQU0sU0FBQyxlQUFlOztJQWtDL0IsMEJBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTFDWSxtQkFBbUI7OztJQUU1Qiw2Q0FBcUM7Ozs7O0lBR2pDLG1DQUF3Qjs7Ozs7SUFDeEIsb0RBQW9EOzs7OztJQUNwRCxtREFBa0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL2Z4LXNlY3VyaXR5L3NlcnZpY2VzL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnXHJcbmltcG9ydCB7IFJvbGUgfSBmcm9tICcuLi8uLi9meC1zZWN1cml0eS9kb21haW4vcm9sZSdcclxuaW1wb3J0IHsgU2VjdXJpdHlDb25maWcgfSBmcm9tICcuLi8uLi9meC1zZWN1cml0eS9meC1zZWN1cml0eS5tb2R1bGUnXHJcbmltcG9ydCB7IFNFQ1VSSVRZX0NPTkZJRyB9IGZyb20gJy4uLy4uL2Z4LXNlY3VyaXR5L2RvbWFpbi9zZWN1cml0eS1jb25maWcnXHJcbmltcG9ydCB7IEF1dGhvcml6YXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vZngtc2VjdXJpdHkvc2VydmljZXMvYXV0aG9yaXphdGlvbi5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2UgfSBmcm9tICcuLi9kb21haW4vYm91bmRhcnktc2VsZWN0b3ItcmVzb3VyY2UnXHJcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJ1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEJvdW5kYXJ5RGF0YVNlcnZpY2Uge1xyXG5cclxuICAgIHB1YmxpYyBzZWN1cml0eUNvbmZpZzogU2VjdXJpdHlDb25maWdcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXHJcbiAgICAgICAgcHJpdmF0ZSBhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSxcclxuICAgICAgICBwcml2YXRlIGF1dGhvcml6YXRpb25TZXJ2aWNlOiBBdXRob3JpemF0aW9uU2VydmljZSxcclxuICAgICAgICBASW5qZWN0KFNFQ1VSSVRZX0NPTkZJRykgc2VjdXJpdHlDb25maWc6IFNlY3VyaXR5Q29uZmlnKSB7XHJcbiAgICAgICAgdGhpcy5zZWN1cml0eUNvbmZpZyA9IHNlY3VyaXR5Q29uZmlnXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEJvdW5kYXJpZXNGb3JVc2VyU2NvcGUoKTogT2JzZXJ2YWJsZTxCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2VbXT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0PEJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZVtdPih0aGlzLmdldEFwaVVybCgpKS5waXBlKG1hcCgoYm91bmRhcnlTZWxlY3RvclJlc291cmNlczogQm91bmRhcnlTZWxlY3RvclJlc291cmNlW10pID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyQm91bmRhcmllc0ZvclVzZXJTY29wZShib3VuZGFyeVNlbGVjdG9yUmVzb3VyY2VzKVxyXG4gICAgICAgIH0pKVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBmaWx0ZXJCb3VuZGFyaWVzRm9yVXNlclNjb3BlKGJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZXM6IEJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZVtdKTogQm91bmRhcnlTZWxlY3RvclJlc291cmNlW10ge1xyXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkQm91bmRhcnlTZWxlY3RvclJlc291cmNlczogQm91bmRhcnlTZWxlY3RvclJlc291cmNlW10gPSBbXVxyXG5cclxuICAgICAgICBpZiAodGhpcy5hdXRob3JpemF0aW9uU2VydmljZS5oYXNEZXZvcHNSb2xlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmdldFBheWxvYWQoKS5yb2xlcy5mb3JFYWNoKChyb2xlOiBSb2xlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChyb2xlLmJvdW5kYXJpZXNbdGhpcy5zZWN1cml0eUNvbmZpZy5ib3VuZGFyeV9uYW1lXSkge1xyXG4gICAgICAgICAgICAgICAgcm9sZS5ib3VuZGFyaWVzW3RoaXMuc2VjdXJpdHlDb25maWcuYm91bmRhcnlfbmFtZV0uZm9yRWFjaCgoc2NvcGU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJvdW5kYXJ5Rm91bmQgPSBib3VuZGFyeVNlbGVjdG9yUmVzb3VyY2VzLmZpbmQoYm91bmRhcnkgPT4gYm91bmRhcnkuYm91bmRhcnlWYWx1ZUtleSA9PT0gc2NvcGUpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJvdW5kYXJ5Rm91bmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyZWRCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2VzLnB1c2goYm91bmRhcnlGb3VuZClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgcmV0dXJuIGZpbHRlcmVkQm91bmRhcnlTZWxlY3RvclJlc291cmNlc1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0QXBpVXJsKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuc2VjdXJpdHlDb25maWcuYXV0aG9yaXphdGlvbl9zZXJ2aWNlX3VybH0vYXBpL3YxL2RvbWFpbnMvJHt0aGlzLnNlY3VyaXR5Q29uZmlnLmFwcF9kb21haW59L2FwcHMvJHt0aGlzLnNlY3VyaXR5Q29uZmlnLmFwcF9uYW1lfS9ib3VuZGFyeXZhbHVlc21pbmlmaWVkL2BcclxuICAgIH1cclxufVxyXG4iXX0=