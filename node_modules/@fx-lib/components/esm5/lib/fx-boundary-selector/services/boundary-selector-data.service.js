/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var BoundarySelectorDataService = /** @class */ (function () {
    function BoundarySelectorDataService() {
        this.boundaryResourceList$ = new BehaviorSubject([]);
        this.selectedBoundary$ = new BehaviorSubject(null);
    }
    /**
     * @param {?} boundaryResourceList
     * @return {?}
     */
    BoundarySelectorDataService.prototype.setBoundaryResourceList = /**
     * @param {?} boundaryResourceList
     * @return {?}
     */
    function (boundaryResourceList) {
        if (this.boundaryResourceList$.getValue() === boundaryResourceList) {
            return;
        }
        this.boundaryResourceList$.next(boundaryResourceList);
        if (this.cachedBoundary != null) {
            this.setSelectedBoundaryByKey(this.cachedBoundary);
            this.cachedBoundary = null;
        }
        if (this.selectedBoundary$.getValue() == null) {
            this.setSelectedBoundaryToDefault();
        }
    };
    /**
     * @param {?} boundaryKey
     * @return {?}
     */
    BoundarySelectorDataService.prototype.setSelectedBoundaryByKey = /**
     * @param {?} boundaryKey
     * @return {?}
     */
    function (boundaryKey) {
        /** @type {?} */
        var foundBoundary = this.getBoundaryByKey(boundaryKey);
        if (this.boundaryResourceList$.getValue().length < 1) {
            this.setSelectedBoundaryToDefault();
            this.cacheBoundaryKey(boundaryKey);
            return;
        }
        if (!foundBoundary) {
            this.setSelectedBoundaryToDefault();
            return;
        }
        if (this.selectedBoundary$.getValue() === foundBoundary) {
            return;
        }
        this.selectedBoundary$.next(foundBoundary);
    };
    /**
     * @param {?} boundary
     * @return {?}
     */
    BoundarySelectorDataService.prototype.setSelectedBoundary = /**
     * @param {?} boundary
     * @return {?}
     */
    function (boundary) {
        this.setSelectedBoundaryByKey(boundary.boundaryValueKey);
    };
    /**
     * @private
     * @param {?} boundaryKey
     * @return {?}
     */
    BoundarySelectorDataService.prototype.getBoundaryByKey = /**
     * @private
     * @param {?} boundaryKey
     * @return {?}
     */
    function (boundaryKey) {
        return this.boundaryResourceList$.getValue().find((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.boundaryValueKey === boundaryKey; }));
    };
    /**
     * @private
     * @return {?}
     */
    BoundarySelectorDataService.prototype.setSelectedBoundaryToDefault = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.boundaryResourceList$.getValue() == null || this.boundaryResourceList$.getValue().length < 1) {
            this.selectedBoundary$.next(null);
            return;
        }
        this.selectedBoundary$.next(this.boundaryResourceList$.getValue()[0]);
    };
    /**
     * @private
     * @param {?} boundaryKey
     * @return {?}
     */
    BoundarySelectorDataService.prototype.cacheBoundaryKey = /**
     * @private
     * @param {?} boundaryKey
     * @return {?}
     */
    function (boundaryKey) {
        if (this.cachedBoundary === boundaryKey) {
            return;
        }
        this.cachedBoundary = boundaryKey;
    };
    BoundarySelectorDataService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BoundarySelectorDataService.ctorParameters = function () { return []; };
    return BoundarySelectorDataService;
}());
export { BoundarySelectorDataService };
if (false) {
    /** @type {?} */
    BoundarySelectorDataService.prototype.boundaryResourceList$;
    /** @type {?} */
    BoundarySelectorDataService.prototype.selectedBoundary$;
    /**
     * @type {?}
     * @private
     */
    BoundarySelectorDataService.prototype.cachedBoundary;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRhcnktc2VsZWN0b3ItZGF0YS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LWJvdW5kYXJ5LXNlbGVjdG9yL3NlcnZpY2VzL2JvdW5kYXJ5LXNlbGVjdG9yLWRhdGEuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBR3RDO0lBT0k7UUFKTywwQkFBcUIsR0FBRyxJQUFJLGVBQWUsQ0FBNkIsRUFBRSxDQUFDLENBQUE7UUFDM0Usc0JBQWlCLEdBQUcsSUFBSSxlQUFlLENBQTJCLElBQUksQ0FBQyxDQUFBO0lBSTlFLENBQUM7Ozs7O0lBRU0sNkRBQXVCOzs7O0lBQTlCLFVBQStCLG9CQUFnRDtRQUMzRSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsS0FBSyxvQkFBb0IsRUFBRTtZQUNoRSxPQUFNO1NBQ1Q7UUFFRCxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUE7UUFFckQsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksRUFBRTtZQUM3QixJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFBO1lBQ2xELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFBO1NBQzdCO1FBRUQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxFQUFFO1lBQzNDLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFBO1NBQ3RDO0lBQ0wsQ0FBQzs7Ozs7SUFFTSw4REFBd0I7Ozs7SUFBL0IsVUFBZ0MsV0FBbUI7O1lBQ3pDLGFBQWEsR0FBNkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQztRQUNsRixJQUFJLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ2xELElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFBO1lBQ25DLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUNsQyxPQUFNO1NBQ1Q7UUFFRCxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2hCLElBQUksQ0FBQyw0QkFBNEIsRUFBRSxDQUFBO1lBQ25DLE9BQU07U0FDVDtRQUVELElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxLQUFLLGFBQWEsRUFBRTtZQUNyRCxPQUFNO1NBQ1Q7UUFFRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzlDLENBQUM7Ozs7O0lBRU0seURBQW1COzs7O0lBQTFCLFVBQTJCLFFBQWtDO1FBQ3pELElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUM1RCxDQUFDOzs7Ozs7SUFFTyxzREFBZ0I7Ozs7O0lBQXhCLFVBQXlCLFdBQW1CO1FBQ3hDLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxnQkFBZ0IsS0FBSyxXQUFXLEVBQWxDLENBQWtDLEVBQUMsQ0FBQTtJQUM5RixDQUFDOzs7OztJQUVPLGtFQUE0Qjs7OztJQUFwQztRQUNJLElBQUksSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsUUFBUSxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNuRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFBO1lBQ2pDLE9BQU07U0FDVDtRQUVELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDekUsQ0FBQzs7Ozs7O0lBRU8sc0RBQWdCOzs7OztJQUF4QixVQUF5QixXQUFtQjtRQUN4QyxJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssV0FBVyxFQUFFO1lBQ3JDLE9BQU07U0FDVDtRQUVELElBQUksQ0FBQyxjQUFjLEdBQUcsV0FBVyxDQUFBO0lBQ3JDLENBQUM7O2dCQXRFSixVQUFVOzs7O0lBdUVYLGtDQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0F0RVksMkJBQTJCOzs7SUFFcEMsNERBQWtGOztJQUNsRix3REFBOEU7Ozs7O0lBQzlFLHFEQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJ1xyXG5pbXBvcnQgeyBCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2UgfSBmcm9tICcuLi9kb21haW4vYm91bmRhcnktc2VsZWN0b3ItcmVzb3VyY2UnXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCb3VuZGFyeVNlbGVjdG9yRGF0YVNlcnZpY2Uge1xyXG5cclxuICAgIHB1YmxpYyBib3VuZGFyeVJlc291cmNlTGlzdCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PEJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZVtdPihbXSlcclxuICAgIHB1YmxpYyBzZWxlY3RlZEJvdW5kYXJ5JCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Qm91bmRhcnlTZWxlY3RvclJlc291cmNlPihudWxsKVxyXG4gICAgcHJpdmF0ZSBjYWNoZWRCb3VuZGFyeVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzZXRCb3VuZGFyeVJlc291cmNlTGlzdChib3VuZGFyeVJlc291cmNlTGlzdDogQm91bmRhcnlTZWxlY3RvclJlc291cmNlW10pOiB2b2lkIHtcclxuICAgICAgICBpZiAodGhpcy5ib3VuZGFyeVJlc291cmNlTGlzdCQuZ2V0VmFsdWUoKSA9PT0gYm91bmRhcnlSZXNvdXJjZUxpc3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJvdW5kYXJ5UmVzb3VyY2VMaXN0JC5uZXh0KGJvdW5kYXJ5UmVzb3VyY2VMaXN0KVxyXG5cclxuICAgICAgICBpZiAodGhpcy5jYWNoZWRCb3VuZGFyeSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRCb3VuZGFyeUJ5S2V5KHRoaXMuY2FjaGVkQm91bmRhcnkpXHJcbiAgICAgICAgICAgIHRoaXMuY2FjaGVkQm91bmRhcnkgPSBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEJvdW5kYXJ5JC5nZXRWYWx1ZSgpID09IG51bGwpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEJvdW5kYXJ5VG9EZWZhdWx0KClcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFNlbGVjdGVkQm91bmRhcnlCeUtleShib3VuZGFyeUtleTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgZm91bmRCb3VuZGFyeTogQm91bmRhcnlTZWxlY3RvclJlc291cmNlID0gdGhpcy5nZXRCb3VuZGFyeUJ5S2V5KGJvdW5kYXJ5S2V5KVxyXG4gICAgICAgIGlmICh0aGlzLmJvdW5kYXJ5UmVzb3VyY2VMaXN0JC5nZXRWYWx1ZSgpLmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEJvdW5kYXJ5VG9EZWZhdWx0KClcclxuICAgICAgICAgICAgdGhpcy5jYWNoZUJvdW5kYXJ5S2V5KGJvdW5kYXJ5S2V5KVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghZm91bmRCb3VuZGFyeSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkQm91bmRhcnlUb0RlZmF1bHQoKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkQm91bmRhcnkkLmdldFZhbHVlKCkgPT09IGZvdW5kQm91bmRhcnkpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNlbGVjdGVkQm91bmRhcnkkLm5leHQoZm91bmRCb3VuZGFyeSlcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0U2VsZWN0ZWRCb3VuZGFyeShib3VuZGFyeTogQm91bmRhcnlTZWxlY3RvclJlc291cmNlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEJvdW5kYXJ5QnlLZXkoYm91bmRhcnkuYm91bmRhcnlWYWx1ZUtleSlcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEJvdW5kYXJ5QnlLZXkoYm91bmRhcnlLZXk6IHN0cmluZyk6IEJvdW5kYXJ5U2VsZWN0b3JSZXNvdXJjZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRhcnlSZXNvdXJjZUxpc3QkLmdldFZhbHVlKCkuZmluZCh4ID0+IHguYm91bmRhcnlWYWx1ZUtleSA9PT0gYm91bmRhcnlLZXkpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRTZWxlY3RlZEJvdW5kYXJ5VG9EZWZhdWx0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLmJvdW5kYXJ5UmVzb3VyY2VMaXN0JC5nZXRWYWx1ZSgpID09IG51bGwgfHwgdGhpcy5ib3VuZGFyeVJlc291cmNlTGlzdCQuZ2V0VmFsdWUoKS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRCb3VuZGFyeSQubmV4dChudWxsKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRCb3VuZGFyeSQubmV4dCh0aGlzLmJvdW5kYXJ5UmVzb3VyY2VMaXN0JC5nZXRWYWx1ZSgpWzBdKVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2FjaGVCb3VuZGFyeUtleShib3VuZGFyeUtleTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FjaGVkQm91bmRhcnkgPT09IGJvdW5kYXJ5S2V5KSB7XHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jYWNoZWRCb3VuZGFyeSA9IGJvdW5kYXJ5S2V5XHJcbiAgICB9XHJcbn1cclxuIl19