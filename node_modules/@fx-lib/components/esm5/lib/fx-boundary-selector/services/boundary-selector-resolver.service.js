/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BoundarySelectorDataService } from './boundary-selector-data.service';
var BoundarySelectorResolver = /** @class */ (function () {
    function BoundarySelectorResolver(router, boundarySelectorDataService) {
        this.router = router;
        this.boundarySelectorDataService = boundarySelectorDataService;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    BoundarySelectorResolver.prototype.resolve = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var boundaryKey = route.paramMap.get(route.data.boundaryParamName);
        if (!boundaryKey) {
            console.warn('no boundary key param found');
            return;
        }
        this.boundarySelectorDataService.setSelectedBoundaryByKey(boundaryKey);
        return this.boundarySelectorDataService.selectedBoundary$.getValue();
    };
    BoundarySelectorResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    BoundarySelectorResolver.ctorParameters = function () { return [
        { type: Router },
        { type: BoundarySelectorDataService }
    ]; };
    return BoundarySelectorResolver;
}());
export { BoundarySelectorResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    BoundarySelectorResolver.prototype.router;
    /**
     * @type {?}
     * @private
     */
    BoundarySelectorResolver.prototype.boundarySelectorDataService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm91bmRhcnktc2VsZWN0b3ItcmVzb2x2ZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1ib3VuZGFyeS1zZWxlY3Rvci9zZXJ2aWNlcy9ib3VuZGFyeS1zZWxlY3Rvci1yZXNvbHZlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFBK0MsTUFBTSxFQUFXLE1BQU0saUJBQWlCLENBQUE7QUFDOUYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFHOUU7SUFHSSxrQ0FBb0IsTUFBYyxFQUFVLDJCQUF3RDtRQUFoRixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsZ0NBQTJCLEdBQTNCLDJCQUEyQixDQUE2QjtJQUNwRyxDQUFDOzs7Ozs7SUFFTSwwQ0FBTzs7Ozs7SUFBZCxVQUFlLEtBQTZCLEVBQUUsS0FBMEI7O1lBQzlELFdBQVcsR0FBVyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDO1FBRTVFLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDZCxPQUFPLENBQUMsSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUE7WUFDM0MsT0FBTTtTQUNUO1FBRUQsSUFBSSxDQUFDLDJCQUEyQixDQUFDLHdCQUF3QixDQUFDLFdBQVcsQ0FBQyxDQUFBO1FBRXRFLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxDQUFBO0lBQ3hFLENBQUM7O2dCQWpCSixVQUFVOzs7O2dCQUoyQyxNQUFNO2dCQUNuRCwyQkFBMkI7O0lBc0JwQywrQkFBQztDQUFBLEFBbkJELElBbUJDO1NBbEJZLHdCQUF3Qjs7Ozs7O0lBRXJCLDBDQUFzQjs7Ozs7SUFBRSwrREFBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCwgUm91dGVyLCBSZXNvbHZlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJ1xyXG5pbXBvcnQgeyBCb3VuZGFyeVNlbGVjdG9yRGF0YVNlcnZpY2UgfSBmcm9tICcuL2JvdW5kYXJ5LXNlbGVjdG9yLWRhdGEuc2VydmljZSdcclxuaW1wb3J0IHsgQm91bmRhcnlTZWxlY3RvclJlc291cmNlIH0gZnJvbSAnLi4vZG9tYWluL2JvdW5kYXJ5LXNlbGVjdG9yLXJlc291cmNlJ1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQm91bmRhcnlTZWxlY3RvclJlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2U+IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyLCBwcml2YXRlIGJvdW5kYXJ5U2VsZWN0b3JEYXRhU2VydmljZTogQm91bmRhcnlTZWxlY3RvckRhdGFTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc29sdmUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogQm91bmRhcnlTZWxlY3RvclJlc291cmNlIHwgaW1wb3J0KCdyeGpzJykuT2JzZXJ2YWJsZTxCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2U+IHwgUHJvbWlzZTxCb3VuZGFyeVNlbGVjdG9yUmVzb3VyY2U+IHtcclxuICAgICAgICBjb25zdCBib3VuZGFyeUtleTogc3RyaW5nID0gcm91dGUucGFyYW1NYXAuZ2V0KHJvdXRlLmRhdGEuYm91bmRhcnlQYXJhbU5hbWUpXHJcblxyXG4gICAgICAgIGlmICghYm91bmRhcnlLZXkpIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKCdubyBib3VuZGFyeSBrZXkgcGFyYW0gZm91bmQnKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYm91bmRhcnlTZWxlY3RvckRhdGFTZXJ2aWNlLnNldFNlbGVjdGVkQm91bmRhcnlCeUtleShib3VuZGFyeUtleSlcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYm91bmRhcnlTZWxlY3RvckRhdGFTZXJ2aWNlLnNlbGVjdGVkQm91bmRhcnkkLmdldFZhbHVlKClcclxuICAgIH1cclxuXHJcbn1cclxuIl19