/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
var FxHeaderConfigValidatorService = /** @class */ (function () {
    function FxHeaderConfigValidatorService() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    FxHeaderConfigValidatorService.prototype.validate = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (!config.components) {
            return true;
        }
        return this.checkForUniqueEventNames(config.components);
    };
    /**
     * @private
     * @param {?} components
     * @return {?}
     */
    FxHeaderConfigValidatorService.prototype.checkForUniqueEventNames = /**
     * @private
     * @param {?} components
     * @return {?}
     */
    function (components) {
        /** @type {?} */
        var isUnique = true;
        /** @type {?} */
        var eventNames = [];
        components.forEach((/**
         * @param {?} component
         * @return {?}
         */
        function (component) {
            if (!component.config || !component.config.outputEvents || !isUnique) {
                return;
            }
            component.config.outputEvents.forEach((/**
             * @param {?} outputEvent
             * @return {?}
             */
            function (outputEvent) {
                if (eventNames.some((/**
                 * @param {?} x
                 * @return {?}
                 */
                function (x) { return x === outputEvent; }))) {
                    console.error('the fx-header config contains duplicate event names (' + outputEvent + '). all event names need to be unique.');
                    isUnique = false;
                }
                eventNames.push(outputEvent);
            }));
        }));
        return isUnique;
    };
    FxHeaderConfigValidatorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FxHeaderConfigValidatorService.ctorParameters = function () { return []; };
    return FxHeaderConfigValidatorService;
}());
export { FxHeaderConfigValidatorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtaGVhZGVyLWNvbmZpZy12YWxpZGF0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1oZWFkZXIvc2VydmljZXMvZngtaGVhZGVyLWNvbmZpZy12YWxpZGF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUkxQztJQUdJO0lBQWdCLENBQUM7Ozs7O0lBRVYsaURBQVE7Ozs7SUFBZixVQUFnQixNQUEyQjtRQUN2QyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUNwQixPQUFPLElBQUksQ0FBQTtTQUNkO1FBRUQsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQzNELENBQUM7Ozs7OztJQUVPLGlFQUF3Qjs7Ozs7SUFBaEMsVUFBaUMsVUFBMEM7O1lBQ25FLFFBQVEsR0FBRyxJQUFJOztZQUNiLFVBQVUsR0FBYSxFQUFFO1FBRS9CLFVBQVUsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxTQUFTO1lBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2xFLE9BQU07YUFDVDtZQUVELFNBQVMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLFdBQVc7Z0JBQzdDLElBQUksVUFBVSxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssV0FBVyxFQUFqQixDQUFpQixFQUFDLEVBQUU7b0JBQ3pDLE9BQU8sQ0FBQyxLQUFLLENBQUMsdURBQXVELEdBQUcsV0FBVyxHQUFHLHVDQUF1QyxDQUFDLENBQUE7b0JBQzlILFFBQVEsR0FBRyxLQUFLLENBQUE7aUJBQ25CO2dCQUVELFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDaEMsQ0FBQyxFQUFDLENBQUE7UUFDTixDQUFDLEVBQUMsQ0FBQTtRQUVGLE9BQU8sUUFBUSxDQUFBO0lBQ25CLENBQUM7O2dCQWpDSixVQUFVOzs7O0lBbUNYLHFDQUFDO0NBQUEsQUFuQ0QsSUFtQ0M7U0FsQ1ksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IEZ4SGVhZGVyQ29uZmlnTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2Z4LWhlYWRlci1jb25maWcubW9kZWwnXHJcbmltcG9ydCB7IEZ4SGVhZGVyQ29tcG9uZW50Q29uZmlnTW9kZWwgfSBmcm9tICcuLi9tb2RlbHMvY29uZmlnL2Z4LWhlYWRlci1jb21wb25lbnQtY29uZmlnLm1vZGVsJ1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnhIZWFkZXJDb25maWdWYWxpZGF0b3JTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyB2YWxpZGF0ZShjb25maWc6IEZ4SGVhZGVyQ29uZmlnTW9kZWwpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAoIWNvbmZpZy5jb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja0ZvclVuaXF1ZUV2ZW50TmFtZXMoY29uZmlnLmNvbXBvbmVudHMpXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0ZvclVuaXF1ZUV2ZW50TmFtZXMoY29tcG9uZW50czogRnhIZWFkZXJDb21wb25lbnRDb25maWdNb2RlbFtdKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGlzVW5pcXVlID0gdHJ1ZVxyXG4gICAgICAgIGNvbnN0IGV2ZW50TmFtZXM6IHN0cmluZ1tdID0gW11cclxuXHJcbiAgICAgICAgY29tcG9uZW50cy5mb3JFYWNoKGNvbXBvbmVudCA9PiB7XHJcbiAgICAgICAgICAgIGlmICghY29tcG9uZW50LmNvbmZpZyB8fCAhY29tcG9uZW50LmNvbmZpZy5vdXRwdXRFdmVudHMgfHwgIWlzVW5pcXVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29tcG9uZW50LmNvbmZpZy5vdXRwdXRFdmVudHMuZm9yRWFjaChvdXRwdXRFdmVudCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lcy5zb21lKHggPT4geCA9PT0gb3V0cHV0RXZlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcigndGhlIGZ4LWhlYWRlciBjb25maWcgY29udGFpbnMgZHVwbGljYXRlIGV2ZW50IG5hbWVzICgnICsgb3V0cHV0RXZlbnQgKyAnKS4gYWxsIGV2ZW50IG5hbWVzIG5lZWQgdG8gYmUgdW5pcXVlLicpXHJcbiAgICAgICAgICAgICAgICAgICAgaXNVbmlxdWUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGV2ZW50TmFtZXMucHVzaChvdXRwdXRFdmVudClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICByZXR1cm4gaXNVbmlxdWVcclxuICAgIH1cclxuXHJcbn1cclxuIl19