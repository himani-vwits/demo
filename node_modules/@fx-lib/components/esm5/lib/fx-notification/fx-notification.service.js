/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { NotificationsService, NotificationType } from 'angular2-notifications';
import { forkJoin, Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { NavigationEnd, Router } from '@angular/router';
import { filter } from 'rxjs/operators';
/** @type {?} */
var i18nPrefix = 'i18n.fx-components.notification.';
/** @type {?} */
var configurations = {
    error: {
        timeOut: 5000
    },
    warn: {
        timeOut: 5000
    },
    info: {
        timeOut: 3000
    },
    success: {
        timeOut: 3000
    }
};
var FxNotificationService = /** @class */ (function () {
    function FxNotificationService(notifications, translate, router) {
        var _this = this;
        this.notifications = notifications;
        this.translate = translate;
        this.errorNotifications = [];
        router.events
            .pipe(filter((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return event instanceof NavigationEnd; })))
            .subscribe((/**
         * @return {?}
         */
        function () {
            _this.errorNotifications.forEach((/**
             * @param {?} notification
             * @return {?}
             */
            function (notification) {
                return notifications.remove(notification.id);
            }));
            _this.errorNotifications = [];
        }));
    }
    /**
     * @param {?} messageType
     * @return {?}
     */
    FxNotificationService.prototype.error = /**
     * @param {?} messageType
     * @return {?}
     */
    function (messageType) {
        var _this = this;
        this.create(NotificationType.Error, messageType)
            .subscribe((/**
         * @param {?} notification
         * @return {?}
         */
        function (notification) {
            return _this.errorNotifications.push(notification);
        }));
    };
    /**
     * @param {?} messageType
     * @return {?}
     */
    FxNotificationService.prototype.warn = /**
     * @param {?} messageType
     * @return {?}
     */
    function (messageType) {
        this.create(NotificationType.Warn, messageType).subscribe();
    };
    /**
     * @param {?} messageType
     * @return {?}
     */
    FxNotificationService.prototype.info = /**
     * @param {?} messageType
     * @return {?}
     */
    function (messageType) {
        this.create(NotificationType.Info, messageType).subscribe();
    };
    /**
     * @param {?} messageType
     * @return {?}
     */
    FxNotificationService.prototype.success = /**
     * @param {?} messageType
     * @return {?}
     */
    function (messageType) {
        this.create(NotificationType.Success, messageType).subscribe();
    };
    /**
     * @param {?} statusCode
     * @param {?=} statusCodeDescriptionsType
     * @return {?}
     */
    FxNotificationService.prototype.httpError = /**
     * @param {?} statusCode
     * @param {?=} statusCodeDescriptionsType
     * @return {?}
     */
    function (statusCode, statusCodeDescriptionsType) {
        if (!statusCodeDescriptionsType) {
            statusCodeDescriptionsType = 'default';
        }
        /** @type {?} */
        var titleObservable = this.translateMessage(NotificationType.Error, 'type');
        /** @type {?} */
        var errorMessageObservable = this.translateMessage(NotificationType.Error, 'http.' + statusCodeDescriptionsType + '.' + statusCode);
        this.generateNotification(NotificationType.Error, titleObservable, errorMessageObservable).subscribe();
    };
    /**
     * @private
     * @param {?} type
     * @param {?} messageType
     * @return {?}
     */
    FxNotificationService.prototype.create = /**
     * @private
     * @param {?} type
     * @param {?} messageType
     * @return {?}
     */
    function (type, messageType) {
        /** @type {?} */
        var titleObservable = this.translateMessage(type, messageType + '.title');
        /** @type {?} */
        var messageObservable = this.translateMessage(type, messageType + '.message');
        return this.generateNotification(type, titleObservable, messageObservable);
    };
    /**
     * @private
     * @param {?} type
     * @param {?} titleObservable
     * @param {?} messageObservable
     * @return {?}
     */
    FxNotificationService.prototype.generateNotification = /**
     * @private
     * @param {?} type
     * @param {?} titleObservable
     * @param {?} messageObservable
     * @return {?}
     */
    function (type, titleObservable, messageObservable) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            forkJoin([titleObservable, messageObservable]).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                /** @type {?} */
                var title = result[0];
                /** @type {?} */
                var message = result[1];
                /** @type {?} */
                var notification = _this.notifications.create(title, message, type, configurations[type]);
                observer.next(notification);
                observer.complete();
            }));
        }));
    };
    /**
     * @private
     * @param {?} type
     * @param {?} i18nMessage
     * @return {?}
     */
    FxNotificationService.prototype.translateMessage = /**
     * @private
     * @param {?} type
     * @param {?} i18nMessage
     * @return {?}
     */
    function (type, i18nMessage) {
        return this.translate.get(i18nPrefix + type + '.' + i18nMessage);
    };
    FxNotificationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FxNotificationService.ctorParameters = function () { return [
        { type: NotificationsService },
        { type: TranslateService },
        { type: Router }
    ]; };
    return FxNotificationService;
}());
export { FxNotificationService };
if (false) {
    /** @type {?} */
    FxNotificationService.prototype.errorNotifications;
    /**
     * @type {?}
     * @private
     */
    FxNotificationService.prototype.notifications;
    /**
     * @type {?}
     * @private
     */
    FxNotificationService.prototype.translate;
}
//# sourceMappingURL=data:application/json;base64,