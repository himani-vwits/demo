/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { NotificationsService } from 'angular2-notifications';
import { NEVER, Subscription } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { AuthenticationService } from '../../services/authentication.service';
var IdpLoginComponent = /** @class */ (function () {
    function IdpLoginComponent(authenticationService, router, notificationService) {
        this.authenticationService = authenticationService;
        this.router = router;
        this.notificationService = notificationService;
        this.subscription = new Subscription();
    }
    /**
     * @return {?}
     */
    IdpLoginComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription.add(this.authenticationService.loginFromUrlToken(window.location.href)
            .pipe(catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.notificationService.error(error);
            return NEVER;
        })))
            .subscribe((/**
         * @param {?} identityToken
         * @return {?}
         */
        function (identityToken) {
            _this.router.navigateByUrl(identityToken.state);
        })));
    };
    /**
     * @return {?}
     */
    IdpLoginComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    IdpLoginComponent.decorators = [
        { type: Component, args: [{
                    template: ''
                }] }
    ];
    /** @nocollapse */
    IdpLoginComponent.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: Router },
        { type: NotificationsService }
    ]; };
    return IdpLoginComponent;
}());
export { IdpLoginComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    IdpLoginComponent.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    IdpLoginComponent.prototype.authenticationService;
    /**
     * @type {?}
     * @private
     */
    IdpLoginComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    IdpLoginComponent.prototype.notificationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRwLWxvZ2luLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1zZWN1cml0eS9jb21wb25lbnRzL2lkcC1sb2dpbi9pZHAtbG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFxQixNQUFNLGVBQWUsQ0FBQTtBQUM1RCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFDeEMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUE7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDMUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGdCQUFnQixDQUFBO0FBQzNDLE9BQU8sRUFBRSxxQkFBcUIsRUFBb0IsTUFBTSx1Q0FBdUMsQ0FBQTtBQUUvRjtJQU9FLDJCQUFvQixxQkFBNEMsRUFDNUMsTUFBYyxFQUNkLG1CQUF5QztRQUZ6QywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzVDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCx3QkFBbUIsR0FBbkIsbUJBQW1CLENBQXNCO1FBSnJELGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQTtJQU16QyxDQUFDOzs7O0lBRU0sb0NBQVE7OztJQUFmO1FBQUEsaUJBYUM7UUFYQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMscUJBQXFCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7YUFDckYsSUFBSSxDQUNILFVBQVU7Ozs7UUFBQyxVQUFBLEtBQUs7WUFDZCxLQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1lBQ3JDLE9BQU8sS0FBSyxDQUFBO1FBQ2QsQ0FBQyxFQUFDLENBQ0g7YUFDQSxTQUFTOzs7O1FBQUMsVUFBQyxhQUErQjtZQUN6QyxLQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDaEQsQ0FBQyxFQUFDLENBQ0gsQ0FBQTtJQUNILENBQUM7Ozs7SUFFTSx1Q0FBVzs7O0lBQWxCO1FBQ0UsSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsQ0FBQTtJQUNqQyxDQUFDOztnQkE5QkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxFQUFFO2lCQUNiOzs7O2dCQUpRLHFCQUFxQjtnQkFKckIsTUFBTTtnQkFDTixvQkFBb0I7O0lBcUM3Qix3QkFBQztDQUFBLEFBaENELElBZ0NDO1NBN0JZLGlCQUFpQjs7Ozs7O0lBRTVCLHlDQUF5Qzs7Ozs7SUFFN0Isa0RBQW9EOzs7OztJQUNwRCxtQ0FBc0I7Ozs7O0lBQ3RCLGdEQUFpRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25EZXN0cm95LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInXHJcbmltcG9ydCB7IE5vdGlmaWNhdGlvbnNTZXJ2aWNlIH0gZnJvbSAnYW5ndWxhcjItbm90aWZpY2F0aW9ucydcclxuaW1wb3J0IHsgTkVWRVIsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnXHJcbmltcG9ydCB7IGNhdGNoRXJyb3IgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlLCBJZHBJZGVudGl0eVRva2VuIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvYXV0aGVudGljYXRpb24uc2VydmljZSdcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHRlbXBsYXRlOiAnJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIElkcExvZ2luQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG5cclxuICBwcml2YXRlIHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb24oKVxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGF1dGhlbnRpY2F0aW9uU2VydmljZTogQXV0aGVudGljYXRpb25TZXJ2aWNlLFxyXG4gICAgICAgICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBub3RpZmljYXRpb25TZXJ2aWNlOiBOb3RpZmljYXRpb25zU2VydmljZSxcclxuICApIHtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBuZ09uSW5pdCgpOiB2b2lkIHtcclxuXHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi5hZGQodGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UubG9naW5Gcm9tVXJsVG9rZW4od2luZG93LmxvY2F0aW9uLmhyZWYpXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIGNhdGNoRXJyb3IoZXJyb3IgPT4ge1xyXG4gICAgICAgICAgdGhpcy5ub3RpZmljYXRpb25TZXJ2aWNlLmVycm9yKGVycm9yKVxyXG4gICAgICAgICAgcmV0dXJuIE5FVkVSXHJcbiAgICAgICAgfSksXHJcbiAgICAgIClcclxuICAgICAgLnN1YnNjcmliZSgoaWRlbnRpdHlUb2tlbjogSWRwSWRlbnRpdHlUb2tlbikgPT4ge1xyXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlQnlVcmwoaWRlbnRpdHlUb2tlbi5zdGF0ZSlcclxuICAgICAgfSksXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=