/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Directive, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { AuthenticationService } from '../services/authentication.service';
import { AuthorizationService } from '../services/authorization.service';
var HasRoleDirective = /** @class */ (function () {
    function HasRoleDirective(_viewContainer, templateRef, authService, authorizationService, changeDetector) {
        var _this = this;
        this._viewContainer = _viewContainer;
        this.authorizationService = authorizationService;
        this.changeDetector = changeDetector;
        this._context = new HasRoleContext();
        this._thenTemplateRef = null;
        this._elseTemplateRef = null;
        this._thenViewRef = null;
        this._elseViewRef = null;
        this._thenTemplateRef = templateRef;
        this.loginEventsSubscription = authService.loginEvents.subscribe((/**
         * @return {?}
         */
        function () {
            _this._updateView();
            _this.changeDetector.markForCheck();
        }));
    }
    /**
     * @return {?}
     */
    HasRoleDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.loginEventsSubscription) {
            this.loginEventsSubscription.unsubscribe();
        }
    };
    Object.defineProperty(HasRoleDirective.prototype, "hasRole", {
        set: /**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            this._context.$implicit = this._context.hasRole = condition;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HasRoleDirective.prototype, "hasRoleFactory", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._context.factory = value;
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HasRoleDirective.prototype, "hasRoleThen", {
        set: /**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            this._thenTemplateRef = templateRef;
            this._thenViewRef = null; // clear previous view if any.
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HasRoleDirective.prototype, "hasRoleElse", {
        set: /**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            this._elseTemplateRef = templateRef;
            this._elseViewRef = null; // clear previous view if any.
            this._updateView();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    HasRoleDirective.prototype._updateView = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hasRole = false;
        if (this._context && this._context.$implicit) {
            if (typeof this._context.factory === 'string' && this._context.factory.length > 0) {
                hasRole = this.authorizationService.hasRoleForBoundary(this._context.$implicit, this._context.factory);
            }
            else {
                hasRole = this._context && this._context.$implicit && this.authorizationService.hasRole(this._context.$implicit);
            }
        }
        if (hasRole) {
            if (!this._thenViewRef) {
                this._viewContainer.clear();
                this._elseViewRef = null;
                if (this._thenTemplateRef) {
                    this._thenViewRef =
                        this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
                }
            }
        }
        else {
            if (!this._elseViewRef) {
                this._viewContainer.clear();
                this._thenViewRef = null;
                if (this._elseTemplateRef) {
                    this._elseViewRef =
                        this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
                }
            }
        }
    };
    HasRoleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[appHasRole]'
                },] }
    ];
    /** @nocollapse */
    HasRoleDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: TemplateRef },
        { type: AuthenticationService },
        { type: AuthorizationService },
        { type: ChangeDetectorRef }
    ]; };
    HasRoleDirective.propDecorators = {
        hasRole: [{ type: Input }],
        hasRoleFactory: [{ type: Input }],
        hasRoleThen: [{ type: Input }],
        hasRoleElse: [{ type: Input }]
    };
    return HasRoleDirective;
}());
export { HasRoleDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._context;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._thenTemplateRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._elseTemplateRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._thenViewRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._elseViewRef;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype.loginEventsSubscription;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype._viewContainer;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype.authorizationService;
    /**
     * @type {?}
     * @private
     */
    HasRoleDirective.prototype.changeDetector;
}
var HasRoleContext = /** @class */ (function () {
    function HasRoleContext() {
        this.$implicit = null;
        this.hasRole = null;
        this.factory = null;
    }
    return HasRoleContext;
}());
export { HasRoleContext };
if (false) {
    /** @type {?} */
    HasRoleContext.prototype.$implicit;
    /** @type {?} */
    HasRoleContext.prototype.hasRole;
    /** @type {?} */
    HasRoleContext.prototype.factory;
}
//# sourceMappingURL=data:application/json;base64,