/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FxUserSelectorComponent } from './components/fx-user-selector/fx-user-selector.component';
import { FxTranslationModule } from '../fx-translation/fx-translation.module';
import { NgbDropdownModule } from '@ng-bootstrap/ng-bootstrap';
import { IdpLoginComponent } from './components/idp-login/idp-login.component';
import { LoginErrorComponent } from './components/login-error/login-error.component';
import { LoggedOutComponent } from './components/logged-out/logged-out.component';
import { IsLoggedInDirective } from './directives/is-logged-in.directive';
import { HasRoleDirective } from './directives/has-role.directive';
import { LogoutDirective } from './directives/logout.directive';
import { AuthGuard } from './guards/auth-guard.service';
import { AuthenticationService } from './services/authentication.service';
import { NotLoggedInAuthGuard } from './guards/not-logged-in-auth-guard.service';
import { RedirectorService } from './services/redirector.service';
import { AuthenticatingInterceptorService } from './services/authenticating-interceptor.service';
import { HTTP_INTERCEPTORS } from '@angular/common/http';
import { SECURITY_CONFIG } from './domain/security-config';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
import { library } from '@fortawesome/fontawesome-svg-core';
import { faSignOutAlt as fasSignOutAlt } from '@fortawesome/free-solid-svg-icons/faSignOutAlt';
import { faBan as fasBan } from '@fortawesome/free-solid-svg-icons/faBan';
import { faAngry as farAngry } from '@fortawesome/free-regular-svg-icons/faAngry';
import { faExclamation as fasExclamation } from '@fortawesome/free-solid-svg-icons/faExclamation';
import { faUser as fasUser } from '@fortawesome/free-solid-svg-icons/faUser';
import { AuthorizationService } from './services/authorization.service';
import { LoginService } from './services/login.service';
import { UserService } from './services/user.service';
import { FxLoginComponent } from './components/fx-login/fx-login.component';
import { NoPermissionsComponent } from './components/no-permissions/no-permissions.component';
library.add(fasUser, fasSignOutAlt, fasBan, farAngry, fasExclamation);
var FxSecurityModule = /** @class */ (function () {
    function FxSecurityModule() {
    }
    /**
     * @param {?} securityConfig
     * @return {?}
     */
    FxSecurityModule.forRoot = /**
     * @param {?} securityConfig
     * @return {?}
     */
    function (securityConfig) {
        return {
            ngModule: FxSecurityModule,
            providers: [{
                    provide: SECURITY_CONFIG,
                    useValue: securityConfig
                },
                AuthenticationService,
                AuthorizationService,
                LoginService,
                UserService
            ]
        };
    };
    FxSecurityModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FxUserSelectorComponent,
                        IdpLoginComponent,
                        LoginErrorComponent,
                        LoggedOutComponent,
                        NoPermissionsComponent,
                        IsLoggedInDirective,
                        HasRoleDirective,
                        LogoutDirective,
                        FxLoginComponent
                    ],
                    providers: [
                        AuthGuard,
                        NotLoggedInAuthGuard,
                        AuthenticationService,
                        AuthorizationService,
                        RedirectorService,
                        LoginService,
                        {
                            provide: HTTP_INTERCEPTORS,
                            useClass: AuthenticatingInterceptorService,
                            multi: true
                        },
                        UserService
                    ],
                    exports: [
                        FxUserSelectorComponent,
                        FxLoginComponent,
                        IdpLoginComponent,
                        IsLoggedInDirective,
                        HasRoleDirective,
                        LogoutDirective
                    ],
                    imports: [
                        CommonModule,
                        FxTranslationModule,
                        NgbDropdownModule,
                        FontAwesomeModule
                    ]
                },] }
    ];
    return FxSecurityModule;
}());
export { FxSecurityModule };
/**
 * @record
 */
export function SecurityConfig() { }
if (false) {
    /** @type {?} */
    SecurityConfig.prototype.authorization_service_url;
    /** @type {?} */
    SecurityConfig.prototype.authorization_ui_url;
    /** @type {?} */
    SecurityConfig.prototype.app_name;
    /** @type {?} */
    SecurityConfig.prototype.app_domain;
    /** @type {?} */
    SecurityConfig.prototype.idp_base_url;
    /** @type {?} */
    SecurityConfig.prototype.client_id;
    /** @type {?} */
    SecurityConfig.prototype.login_redirect_url;
    /** @type {?} */
    SecurityConfig.prototype.logout_redirect_url;
    /** @type {?} */
    SecurityConfig.prototype.roles;
    /** @type {?} */
    SecurityConfig.prototype.boundary_name;
}
//# sourceMappingURL=data:application/json;base64,