/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { AuthenticationService } from '../services/authentication.service';
import { AuthorizationService } from '../services/authorization.service';
/** @type {?} */
var NO_PERMISSION_ROUTE = 'no-permission';
var AuthGuard = /** @class */ (function () {
    function AuthGuard(authenticationService, authorizationService, router) {
        this.authenticationService = authenticationService;
        this.authorizationService = authorizationService;
        this.router = router;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        return this.checkLogin(state.url) && this.checkRoles(route.data) && this.checkBoundaryValue(route.data, route.paramMap);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    AuthGuard.prototype.checkLogin = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (this.authenticationService.isLoggedIn) {
            return true;
        }
        this.authenticationService.redirectToIdpLogin(url);
        return false;
    };
    /**
     * @private
     * @param {?} data
     * @param {?} paramMap
     * @return {?}
     */
    AuthGuard.prototype.checkBoundaryValue = /**
     * @private
     * @param {?} data
     * @param {?} paramMap
     * @return {?}
     */
    function (data, paramMap) {
        var _this = this;
        /** @type {?} */
        var hasPermission = false;
        if (!data || !data.boundaryParamName) {
            return true;
        }
        if (this.authorizationService.hasDevopsRole()) {
            return true;
        }
        this.authenticationService.getPayload().roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            if (_this.authorizationService.hasRoleForBoundary(role.role, paramMap.get(data.boundaryParamName))) {
                hasPermission = true;
                return;
            }
        }));
        if (!hasPermission) {
            this.router.navigateByUrl(NO_PERMISSION_ROUTE);
        }
        return hasPermission;
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    AuthGuard.prototype.checkRoles = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        /** @type {?} */
        var hasPermission = false;
        if (!data || !data.roles) {
            return true;
        }
        data.roles.forEach((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            /** @type {?} */
            var requiredRoleName = role;
            /** @type {?} */
            var hasRole = _this.authorizationService.hasRole(requiredRoleName);
            if (hasRole) {
                hasPermission = true;
                return;
            }
        }));
        if (!hasPermission) {
            this.router.navigateByUrl(NO_PERMISSION_ROUTE);
        }
        return hasPermission;
    };
    AuthGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthGuard.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: AuthorizationService },
        { type: Router }
    ]; };
    return AuthGuard;
}());
export { AuthGuard };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.authenticationService;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.authorizationService;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC1ndWFyZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXNlY3VyaXR5L2d1YXJkcy9hdXRoLWd1YXJkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDMUMsT0FBTyxFQUF1RCxNQUFNLEVBQXVCLE1BQU0saUJBQWlCLENBQUE7QUFDbEgsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUE7QUFDMUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUNBQW1DLENBQUE7O0lBRWxFLG1CQUFtQixHQUFHLGVBQWU7QUFFM0M7SUFHRSxtQkFBb0IscUJBQTRDLEVBQzVDLG9CQUEwQyxFQUMxQyxNQUFjO1FBRmQsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtRQUM1Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXNCO1FBQzFDLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDbEMsQ0FBQzs7Ozs7O0lBRU0sK0JBQVc7Ozs7O0lBQWxCLFVBQW1CLEtBQTZCLEVBQUUsS0FBMEI7UUFDMUUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDekgsQ0FBQzs7Ozs7O0lBRU8sOEJBQVU7Ozs7O0lBQWxCLFVBQW1CLEdBQVc7UUFDNUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFDRCxJQUFJLENBQUMscUJBQXFCLENBQUMsa0JBQWtCLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFbEQsT0FBTyxLQUFLLENBQUE7SUFDZCxDQUFDOzs7Ozs7O0lBRU8sc0NBQWtCOzs7Ozs7SUFBMUIsVUFBMkIsSUFBVSxFQUFFLFFBQWtCO1FBQXpELGlCQXVCQzs7WUF0QkssYUFBYSxHQUFHLEtBQUs7UUFFekIsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtZQUNwQyxPQUFPLElBQUksQ0FBQTtTQUNaO1FBRUQsSUFBSSxJQUFJLENBQUMsb0JBQW9CLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDN0MsT0FBTyxJQUFJLENBQUE7U0FDWjtRQUVELElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUFLLENBQUMsT0FBTzs7OztRQUFDLFVBQUEsSUFBSTtZQUN4RCxJQUFJLEtBQUksQ0FBQyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRTtnQkFDakcsYUFBYSxHQUFHLElBQUksQ0FBQTtnQkFDcEIsT0FBTTthQUNQO1FBQ0gsQ0FBQyxFQUFDLENBQUE7UUFFRixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLENBQUE7U0FDL0M7UUFFRCxPQUFPLGFBQWEsQ0FBQTtJQUN0QixDQUFDOzs7Ozs7SUFFTyw4QkFBVTs7Ozs7SUFBbEIsVUFBbUIsSUFBVTtRQUE3QixpQkFzQkM7O1lBckJLLGFBQWEsR0FBRyxLQUFLO1FBRXpCLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3hCLE9BQU8sSUFBSSxDQUFBO1NBQ1o7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU87Ozs7UUFBQyxVQUFBLElBQUk7O2dCQUNmLGdCQUFnQixHQUFHLElBQUk7O2dCQUV2QixPQUFPLEdBQUcsS0FBSSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztZQUNuRSxJQUFJLE9BQU8sRUFBRTtnQkFDWCxhQUFhLEdBQUcsSUFBSSxDQUFBO2dCQUNwQixPQUFNO2FBQ1A7UUFDSCxDQUFDLEVBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsQ0FBQTtTQUMvQztRQUVELE9BQU8sYUFBYSxDQUFBO0lBQ3RCLENBQUM7O2dCQXBFRixVQUFVOzs7O2dCQUxGLHFCQUFxQjtnQkFDckIsb0JBQW9CO2dCQUZpQyxNQUFNOztJQTRFcEUsZ0JBQUM7Q0FBQSxBQXRFRCxJQXNFQztTQXJFWSxTQUFTOzs7Ozs7SUFFUiwwQ0FBb0Q7Ozs7O0lBQ3BELHlDQUFrRDs7Ozs7SUFDbEQsMkJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIENhbkFjdGl2YXRlLCBEYXRhLCBQYXJhbU1hcCwgUm91dGVyLCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJ1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJ1xyXG5pbXBvcnQgeyBBdXRob3JpemF0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2F1dGhvcml6YXRpb24uc2VydmljZSdcclxuXHJcbmNvbnN0IE5PX1BFUk1JU1NJT05fUk9VVEUgPSAnbm8tcGVybWlzc2lvbidcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIEF1dGhHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIGF1dGhvcml6YXRpb25TZXJ2aWNlOiBBdXRob3JpemF0aW9uU2VydmljZSxcclxuICAgICAgICAgICAgICBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jaGVja0xvZ2luKHN0YXRlLnVybCkgJiYgdGhpcy5jaGVja1JvbGVzKHJvdXRlLmRhdGEpICYmIHRoaXMuY2hlY2tCb3VuZGFyeVZhbHVlKHJvdXRlLmRhdGEsIHJvdXRlLnBhcmFtTWFwKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja0xvZ2luKHVybDogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBpZiAodGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuaXNMb2dnZWRJbikge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG4gICAgdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UucmVkaXJlY3RUb0lkcExvZ2luKHVybClcclxuXHJcbiAgICByZXR1cm4gZmFsc2VcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY2hlY2tCb3VuZGFyeVZhbHVlKGRhdGE6IERhdGEsIHBhcmFtTWFwOiBQYXJhbU1hcCk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGhhc1Blcm1pc3Npb24gPSBmYWxzZVxyXG5cclxuICAgIGlmICghZGF0YSB8fCAhZGF0YS5ib3VuZGFyeVBhcmFtTmFtZSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmF1dGhvcml6YXRpb25TZXJ2aWNlLmhhc0Rldm9wc1JvbGUoKSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmdldFBheWxvYWQoKS5yb2xlcy5mb3JFYWNoKHJvbGUgPT4ge1xyXG4gICAgICBpZiAodGhpcy5hdXRob3JpemF0aW9uU2VydmljZS5oYXNSb2xlRm9yQm91bmRhcnkocm9sZS5yb2xlLCBwYXJhbU1hcC5nZXQoZGF0YS5ib3VuZGFyeVBhcmFtTmFtZSkpKSB7XHJcbiAgICAgICAgaGFzUGVybWlzc2lvbiA9IHRydWVcclxuICAgICAgICByZXR1cm5cclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICBpZiAoIWhhc1Blcm1pc3Npb24pIHtcclxuICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGVCeVVybChOT19QRVJNSVNTSU9OX1JPVVRFKVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBoYXNQZXJtaXNzaW9uXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrUm9sZXMoZGF0YTogRGF0YSk6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGhhc1Blcm1pc3Npb24gPSBmYWxzZVxyXG5cclxuICAgIGlmICghZGF0YSB8fCAhZGF0YS5yb2xlcykge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIGRhdGEucm9sZXMuZm9yRWFjaChyb2xlID0+IHtcclxuICAgICAgY29uc3QgcmVxdWlyZWRSb2xlTmFtZSA9IHJvbGVcclxuXHJcbiAgICAgIGNvbnN0IGhhc1JvbGUgPSB0aGlzLmF1dGhvcml6YXRpb25TZXJ2aWNlLmhhc1JvbGUocmVxdWlyZWRSb2xlTmFtZSlcclxuICAgICAgaWYgKGhhc1JvbGUpIHtcclxuICAgICAgICBoYXNQZXJtaXNzaW9uID0gdHJ1ZVxyXG4gICAgICAgIHJldHVyblxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIGlmICghaGFzUGVybWlzc2lvbikge1xyXG4gICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKE5PX1BFUk1JU1NJT05fUk9VVEUpXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGhhc1Blcm1pc3Npb25cclxuICB9XHJcblxyXG59XHJcbiJdfQ==