/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector } from '@angular/core';
import { AuthenticationService } from './authentication.service';
var AuthenticatingInterceptorService = /** @class */ (function () {
    function AuthenticatingInterceptorService(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    AuthenticatingInterceptorService.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        /** @type {?} */
        var authenticationService = this.injector.get(AuthenticationService);
        /** @type {?} */
        var newRequest = request;
        if (authenticationService.isLoggedIn) {
            newRequest = request.clone({
                setHeaders: {
                    Authorization: authenticationService.getAuthTokenHeaderString()
                }
            });
        }
        else {
            newRequest = request;
        }
        return next.handle(newRequest);
    };
    AuthenticatingInterceptorService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthenticatingInterceptorService.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    return AuthenticatingInterceptorService;
}());
export { AuthenticatingInterceptorService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthenticatingInterceptorService.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpbmctaW50ZXJjZXB0b3Iuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1zZWN1cml0eS9zZXJ2aWNlcy9hdXRoZW50aWNhdGluZy1pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUdwRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQTtBQUVoRTtJQUdFLDBDQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUksQ0FBQzs7Ozs7O0lBRXBDLG9EQUFTOzs7OztJQUFoQixVQUFpQixPQUF5QixFQUFFLElBQWlCOztZQUNyRCxxQkFBcUIsR0FBMEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUM7O1lBQ3pGLFVBQVUsR0FBRyxPQUFPO1FBQ3hCLElBQUkscUJBQXFCLENBQUMsVUFBVSxFQUFFO1lBQ3BDLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUN6QixVQUFVLEVBQUU7b0JBQ1YsYUFBYSxFQUFFLHFCQUFxQixDQUFDLHdCQUF3QixFQUFFO2lCQUNoRTthQUNGLENBQUMsQ0FBQTtTQUNIO2FBQU07WUFDTCxVQUFVLEdBQUcsT0FBTyxDQUFBO1NBQ3JCO1FBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0lBQ2hDLENBQUM7O2dCQWxCRixVQUFVOzs7O2dCQUxVLFFBQVE7O0lBeUI3Qix1Q0FBQztDQUFBLEFBcEJELElBb0JDO1NBbkJZLGdDQUFnQzs7Ozs7O0lBRS9CLG9EQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwSGFuZGxlciwgSHR0cEludGVyY2VwdG9yLCBIdHRwUmVxdWVzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJ1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcydcclxuaW1wb3J0IHsgQXV0aGVudGljYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJ1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXV0aGVudGljYXRpbmdJbnRlcmNlcHRvclNlcnZpY2UgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcikgeyB9XHJcblxyXG4gIHB1YmxpYyBpbnRlcmNlcHQocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55PiwgbmV4dDogSHR0cEhhbmRsZXIpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XHJcbiAgICBjb25zdCBhdXRoZW50aWNhdGlvblNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSA9IHRoaXMuaW5qZWN0b3IuZ2V0KEF1dGhlbnRpY2F0aW9uU2VydmljZSlcclxuICAgIGxldCBuZXdSZXF1ZXN0ID0gcmVxdWVzdFxyXG4gICAgaWYgKGF1dGhlbnRpY2F0aW9uU2VydmljZS5pc0xvZ2dlZEluKSB7XHJcbiAgICAgIG5ld1JlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICBzZXRIZWFkZXJzOiB7XHJcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiBhdXRoZW50aWNhdGlvblNlcnZpY2UuZ2V0QXV0aFRva2VuSGVhZGVyU3RyaW5nKClcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXdSZXF1ZXN0ID0gcmVxdWVzdFxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKG5ld1JlcXVlc3QpXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=