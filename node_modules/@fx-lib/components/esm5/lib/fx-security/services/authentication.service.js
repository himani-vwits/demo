/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { BehaviorSubject } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import { getBase64DecodeUrlSafe, getBase64EncodeUrlSafe } from '../../shared/helper/base64.helper';
import { SECURITY_CONFIG } from '../domain/security-config';
import { LoginService } from './login.service';
import { RedirectorService } from './redirector.service';
/**
 * @record
 */
function HashParams() { }
/** @type {?} */
export var TOKEN_KEY = 'URS_TOKEN';
/** @type {?} */
export var ID_TOKEN_KEY = 'URS_ID_TOKEN';
/**
 * @record
 */
export function IdpIdentityToken() { }
if (false) {
    /** @type {?} */
    IdpIdentityToken.prototype.token;
    /** @type {?} */
    IdpIdentityToken.prototype.state;
    /** @type {?} */
    IdpIdentityToken.prototype.app;
}
var AuthenticationService = /** @class */ (function () {
    function AuthenticationService(loginService, router, redirectorService, securityConfig) {
        this.loginService = loginService;
        this.router = router;
        this.redirectorService = redirectorService;
        this.isLoggedIn = false;
        this.loginEvents = new BehaviorSubject('loggedout');
        this.initTokenFromStorage();
        this.securityConfig = securityConfig;
    }
    Object.defineProperty(AuthenticationService.prototype, "token", {
        get: /**
         * @return {?}
         */
        function () {
            return this._token || '';
        },
        set: /**
         * @param {?} token
         * @return {?}
         */
        function (token) {
            this._token = token;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} identityToken
     * @return {?}
     */
    AuthenticationService.prototype.login = /**
     * @param {?} identityToken
     * @return {?}
     */
    function (identityToken) {
        var _this = this;
        return this.loginService.login(identityToken)
            .pipe(tap((/**
         * @param {?} token
         * @return {?}
         */
        function (token) {
            _this.initLogin(token, identityToken);
            _this.loginEvents.next('loggedin');
        }), (/**
         * @return {?}
         */
        function () {
            _this.removeLoginInformation();
            _this.router.navigateByUrl('/login-error');
        })), map((/**
         * @return {?}
         */
        function () {
            return identityToken;
        })));
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.logout = /**
     * @return {?}
     */
    function () {
        // Check for ID token
        /** @type {?} */
        var idToken = localStorage.getItem(ID_TOKEN_KEY);
        this.removeLoginInformation();
        if (idToken) {
            this.redirectorService.redirectToUrl(this.buildIdpLogoutUrl(idToken));
        }
        else {
            this.router.navigateByUrl('/');
        }
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getAuthTokenHeaderString = /**
     * @return {?}
     */
    function () {
        return 'Bearer ' + this.token;
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.initTokenFromStorage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var storedToken = localStorage.getItem(TOKEN_KEY);
        if (storedToken == null) {
            return;
        }
        try {
            /** @type {?} */
            var parts = storedToken.split('.');
            /** @type {?} */
            var payload = JSON.parse(atob(parts[1]));
            /** @type {?} */
            var until = new Date(payload.exp * 1000);
            /** @type {?} */
            var now = new Date();
            if (now < until) {
                this.token = storedToken;
                this.isLoggedIn = true;
                this.loginEvents.next('loggedin');
            }
        }
        catch (ex) {
            this.removeLoginInformation();
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    AuthenticationService.prototype.loginFromUrlToken = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var identityToken = this.extractTokenFromUrl(url);
        return this.login(identityToken);
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.getPayload = /**
     * @return {?}
     */
    function () {
        if (this.isLoggedIn) {
            /** @type {?} */
            var token = this.token;
            /** @type {?} */
            var parts = token.split('.');
            if (parts.length >= 2) {
                return JSON.parse(atob(parts[1]));
            }
        }
        return { roles: [], username: '' };
    };
    /**
     * @return {?}
     */
    AuthenticationService.prototype.loginWithRedirectUrl = /**
     * @return {?}
     */
    function () {
        this.redirectToIdpLogin(this.securityConfig.login_redirect_url);
    };
    /**
     * @param {?} targetUrl
     * @return {?}
     */
    AuthenticationService.prototype.redirectToIdpLogin = /**
     * @param {?} targetUrl
     * @return {?}
     */
    function (targetUrl) {
        this.redirectorService.redirectToUrl(this.buildIdpLoginUrl(targetUrl));
    };
    /**
     * @private
     * @param {?} token
     * @param {?} identityToken
     * @return {?}
     */
    AuthenticationService.prototype.initLogin = /**
     * @private
     * @param {?} token
     * @param {?} identityToken
     * @return {?}
     */
    function (token, identityToken) {
        this.token = token;
        this.isLoggedIn = true;
        localStorage.setItem(TOKEN_KEY, token);
        localStorage.setItem(ID_TOKEN_KEY, identityToken.token);
    };
    /**
     * @private
     * @return {?}
     */
    AuthenticationService.prototype.removeLoginInformation = /**
     * @private
     * @return {?}
     */
    function () {
        this.token = undefined;
        this.isLoggedIn = false;
        localStorage.removeItem(TOKEN_KEY);
        localStorage.removeItem(ID_TOKEN_KEY);
        this.loginEvents.next('loggedout');
    };
    /**
     * @private
     * @param {?} state
     * @return {?}
     */
    AuthenticationService.prototype.buildIdpLoginUrl = /**
     * @private
     * @param {?} state
     * @return {?}
     */
    function (state) {
        return this.securityConfig.idp_base_url + 'auth'
            + '?response_type=id_token'
            + '&scope=openid'
            + '&nonce=' + this.generateNonce()
            + '&client_id=' + encodeURIComponent(this.securityConfig.client_id)
            + '&redirect_uri=' + encodeURIComponent(this.securityConfig.login_redirect_url)
            + '&state=' + encodeURIComponent(getBase64EncodeUrlSafe(state));
    };
    /**
     * @private
     * @return {?}
     */
    AuthenticationService.prototype.mathFloorRandom = /**
     * @private
     * @return {?}
     */
    function () {
        return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
    };
    /**
     * @private
     * @return {?}
     */
    AuthenticationService.prototype.generateNonce = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var nonce = '';
        for (var i = 0; i < 8; i++) {
            nonce += this.mathFloorRandom();
        }
        return nonce;
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    AuthenticationService.prototype.extractTokenFromUrl = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var hashPart = this.extractHashPart(url);
        /** @type {?} */
        var hashParams = this.extractParameters(decodeURIComponent(hashPart));
        if (hashParams && hashParams.state && hashParams.id_token) {
            return {
                state: hashParams.state,
                token: hashParams.id_token,
                app: this.securityConfig.app_name,
            };
        }
        return null;
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    AuthenticationService.prototype.extractHashPart = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var hashPosition = url.indexOf('#');
        if (hashPosition >= 0 && url.length > hashPosition) {
            return url.slice(hashPosition + 1);
        }
        else {
            return '';
        }
    };
    /**
     * @private
     * @param {?} paramString
     * @return {?}
     */
    AuthenticationService.prototype.extractParameters = /**
     * @private
     * @param {?} paramString
     * @return {?}
     */
    function (paramString) {
        return paramString.split('&')
            .reduce((/**
         * @param {?} params
         * @param {?} keyValueText
         * @return {?}
         */
        function (params, keyValueText) {
            if (keyValueText) {
                /** @type {?} */
                var keyValue = keyValueText.split('=');
                if (keyValue.length === 2) {
                    /** @type {?} */
                    var key = keyValue[0];
                    /** @type {?} */
                    var value = keyValue[1];
                    /** @type {?} */
                    var decodedValue = key === 'state' ? getBase64DecodeUrlSafe(value) : value;
                    params[key] = decodeURIComponent(decodedValue);
                }
            }
            return params;
        }), {});
    };
    /**
     * @private
     * @param {?} token
     * @return {?}
     */
    AuthenticationService.prototype.buildIdpLogoutUrl = /**
     * @private
     * @param {?} token
     * @return {?}
     */
    function (token) {
        return this.securityConfig.idp_base_url + 'logout'
            + '?id_token=' + token
            + '&post_logout_redirect_uri=' + encodeURIComponent(this.securityConfig.logout_redirect_url);
    };
    AuthenticationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthenticationService.ctorParameters = function () { return [
        { type: LoginService },
        { type: Router },
        { type: RedirectorService },
        { type: undefined, decorators: [{ type: Inject, args: [SECURITY_CONFIG,] }] }
    ]; };
    return AuthenticationService;
}());
export { AuthenticationService };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    AuthenticationService.prototype.securityConfig;
    /** @type {?} */
    AuthenticationService.prototype.isLoggedIn;
    /**
     * @type {?}
     * @protected
     */
    AuthenticationService.prototype._token;
    /** @type {?} */
    AuthenticationService.prototype.loginEvents;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.loginService;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    AuthenticationService.prototype.redirectorService;
}
//# sourceMappingURL=data:application/json;base64,