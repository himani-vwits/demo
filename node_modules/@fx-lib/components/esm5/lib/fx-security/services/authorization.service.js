/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { AuthenticationService } from './authentication.service';
import { SECURITY_CONFIG } from '../domain/security-config';
var AuthorizationService = /** @class */ (function () {
    function AuthorizationService(authenticationService, securityConfig) {
        this.authenticationService = authenticationService;
        this.securityConfig = securityConfig;
    }
    /**
     * @return {?}
     */
    AuthorizationService.prototype.hasViewRole = /**
     * @return {?}
     */
    function () {
        return this.checkMultipleRoles(this.securityConfig.roles.view);
    };
    /**
     * @param {?} boundaryValue
     * @return {?}
     */
    AuthorizationService.prototype.hasViewRoleForBoundary = /**
     * @param {?} boundaryValue
     * @return {?}
     */
    function (boundaryValue) {
        return this.checkMultipleRolesForBoundary(this.securityConfig.roles.view, boundaryValue);
    };
    /**
     * @return {?}
     */
    AuthorizationService.prototype.hasEditRole = /**
     * @return {?}
     */
    function () {
        return this.checkMultipleRoles(this.securityConfig.roles.edit);
    };
    /**
     * @param {?} boundaryValue
     * @return {?}
     */
    AuthorizationService.prototype.hasEditRoleForBoundary = /**
     * @param {?} boundaryValue
     * @return {?}
     */
    function (boundaryValue) {
        return this.checkMultipleRolesForBoundary(this.securityConfig.roles.edit, boundaryValue);
    };
    /**
     * @return {?}
     */
    AuthorizationService.prototype.hasDevopsRole = /**
     * @return {?}
     */
    function () {
        return this.checkMultipleRoles(this.securityConfig.roles.devops);
    };
    /**
     * @param {?} roleToCheck
     * @return {?}
     */
    AuthorizationService.prototype.hasRole = /**
     * @param {?} roleToCheck
     * @return {?}
     */
    function (roleToCheck) {
        /** @type {?} */
        var payload = this.authenticationService.getPayload();
        return payload.roles.some((/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            return role.role === roleToCheck;
        }));
    };
    /**
     * @param {?} roleToCheck
     * @param {?} boundaryValue
     * @return {?}
     */
    AuthorizationService.prototype.hasRoleForBoundary = /**
     * @param {?} roleToCheck
     * @param {?} boundaryValue
     * @return {?}
     */
    function (roleToCheck, boundaryValue) {
        /** @type {?} */
        var payload = this.authenticationService.getPayload();
        /** @type {?} */
        var foundRole = payload.roles.find((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r.role === roleToCheck; }));
        if (!foundRole) {
            return false;
        }
        /** @type {?} */
        var devopsRole = this.securityConfig.roles.devops.find((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r === foundRole.role; }));
        if (devopsRole) {
            return true;
        }
        /** @type {?} */
        var boundaries = foundRole.boundaries[this.securityConfig.boundary_name];
        return boundaries.some((/**
         * @param {?} boundary
         * @return {?}
         */
        function (boundary) { return boundary === boundaryValue; }));
    };
    /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    AuthorizationService.prototype.checkMultipleRoles = /**
     * @private
     * @param {?} roles
     * @return {?}
     */
    function (roles) {
        var _this = this;
        return roles.some((/**
         * @param {?} role
         * @return {?}
         */
        function (role) { return _this.hasRole(role); }));
    };
    /**
     * @private
     * @param {?} roles
     * @param {?} boundaryValue
     * @return {?}
     */
    AuthorizationService.prototype.checkMultipleRolesForBoundary = /**
     * @private
     * @param {?} roles
     * @param {?} boundaryValue
     * @return {?}
     */
    function (roles, boundaryValue) {
        var _this = this;
        return roles.some((/**
         * @param {?} role
         * @return {?}
         */
        function (role) { return _this.hasRoleForBoundary(role, boundaryValue); }));
    };
    AuthorizationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthorizationService.ctorParameters = function () { return [
        { type: AuthenticationService },
        { type: undefined, decorators: [{ type: Inject, args: [SECURITY_CONFIG,] }] }
    ]; };
    return AuthorizationService;
}());
export { AuthorizationService };
if (false) {
    /** @type {?} */
    AuthorizationService.prototype.securityConfig;
    /**
     * @type {?}
     * @private
     */
    AuthorizationService.prototype.authenticationService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aG9yaXphdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXNlY3VyaXR5L3NlcnZpY2VzL2F1dGhvcml6YXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFFbEQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMEJBQTBCLENBQUE7QUFDaEUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDJCQUEyQixDQUFBO0FBRzNEO0lBS0UsOEJBQW9CLHFCQUE0QyxFQUEyQixjQUE4QjtRQUFyRywwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO1FBQzlELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFBO0lBQ3RDLENBQUM7Ozs7SUFFTSwwQ0FBVzs7O0lBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDaEUsQ0FBQzs7Ozs7SUFFTSxxREFBc0I7Ozs7SUFBN0IsVUFBOEIsYUFBcUI7UUFDakQsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBQzFGLENBQUM7Ozs7SUFFTSwwQ0FBVzs7O0lBQWxCO1FBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDaEUsQ0FBQzs7Ozs7SUFFTSxxREFBc0I7Ozs7SUFBN0IsVUFBOEIsYUFBcUI7UUFDakQsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFBO0lBQzFGLENBQUM7Ozs7SUFFTSw0Q0FBYTs7O0lBQXBCO1FBQ0UsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDbEUsQ0FBQzs7Ozs7SUFFTSxzQ0FBTzs7OztJQUFkLFVBQWUsV0FBbUI7O1lBQzFCLE9BQU8sR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFO1FBQ3ZELE9BQU8sT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQyxJQUFVO1lBQ25DLE9BQUEsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXO1FBQXpCLENBQXlCLEVBQzFCLENBQUE7SUFDSCxDQUFDOzs7Ozs7SUFFTSxpREFBa0I7Ozs7O0lBQXpCLFVBQTBCLFdBQW1CLEVBQUUsYUFBcUI7O1lBQzVELE9BQU8sR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsVUFBVSxFQUFFOztZQUNqRCxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBdEIsQ0FBc0IsRUFBQztRQUVqRSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTyxLQUFLLENBQUE7U0FDYjs7WUFFSyxVQUFVLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsS0FBSyxTQUFTLENBQUMsSUFBSSxFQUFwQixDQUFvQixFQUFDO1FBQ25GLElBQUksVUFBVSxFQUFFO1lBQ2QsT0FBTyxJQUFJLENBQUE7U0FDWjs7WUFFSyxVQUFVLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsQ0FBQztRQUMxRSxPQUFPLFVBQVUsQ0FBQyxJQUFJOzs7O1FBQUMsVUFBQyxRQUFnQixJQUFLLE9BQUEsUUFBUSxLQUFLLGFBQWEsRUFBMUIsQ0FBMEIsRUFBQyxDQUFBO0lBQzFFLENBQUM7Ozs7OztJQUVPLGlEQUFrQjs7Ozs7SUFBMUIsVUFBMkIsS0FBWTtRQUF2QyxpQkFFQztRQURDLE9BQU8sS0FBSyxDQUFDLElBQUk7Ozs7UUFBQyxVQUFBLElBQUksSUFBSSxPQUFBLEtBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQWxCLENBQWtCLEVBQUMsQ0FBQTtJQUMvQyxDQUFDOzs7Ozs7O0lBRU8sNERBQTZCOzs7Ozs7SUFBckMsVUFBc0MsS0FBWSxFQUFFLGFBQXFCO1FBQXpFLGlCQUVDO1FBREMsT0FBTyxLQUFLLENBQUMsSUFBSTs7OztRQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsS0FBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsRUFBNUMsQ0FBNEMsRUFBQyxDQUFBO0lBQ3pFLENBQUM7O2dCQTNERixVQUFVOzs7O2dCQUpGLHFCQUFxQjtnREFTdUMsTUFBTSxTQUFDLGVBQWU7O0lBd0QzRiwyQkFBQztDQUFBLEFBN0RELElBNkRDO1NBNURZLG9CQUFvQjs7O0lBRS9CLDhDQUFxQzs7Ozs7SUFFekIscURBQW9EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSdcclxuaW1wb3J0IHsgU2VjdXJpdHlDb25maWcgfSBmcm9tICcuLi9meC1zZWN1cml0eS5tb2R1bGUnXHJcbmltcG9ydCB7IEF1dGhlbnRpY2F0aW9uU2VydmljZSB9IGZyb20gJy4vYXV0aGVudGljYXRpb24uc2VydmljZSdcclxuaW1wb3J0IHsgU0VDVVJJVFlfQ09ORklHIH0gZnJvbSAnLi4vZG9tYWluL3NlY3VyaXR5LWNvbmZpZydcclxuaW1wb3J0IHsgUm9sZSB9IGZyb20gJy4uL2RvbWFpbi9yb2xlJ1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXV0aG9yaXphdGlvblNlcnZpY2Uge1xyXG5cclxuICBwdWJsaWMgc2VjdXJpdHlDb25maWc6IFNlY3VyaXR5Q29uZmlnXHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aGVudGljYXRpb25TZXJ2aWNlOiBBdXRoZW50aWNhdGlvblNlcnZpY2UsIEBJbmplY3QoU0VDVVJJVFlfQ09ORklHKSBzZWN1cml0eUNvbmZpZzogU2VjdXJpdHlDb25maWcpIHtcclxuICAgIHRoaXMuc2VjdXJpdHlDb25maWcgPSBzZWN1cml0eUNvbmZpZ1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc1ZpZXdSb2xlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tNdWx0aXBsZVJvbGVzKHRoaXMuc2VjdXJpdHlDb25maWcucm9sZXMudmlldylcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNWaWV3Um9sZUZvckJvdW5kYXJ5KGJvdW5kYXJ5VmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tNdWx0aXBsZVJvbGVzRm9yQm91bmRhcnkodGhpcy5zZWN1cml0eUNvbmZpZy5yb2xlcy52aWV3LCBib3VuZGFyeVZhbHVlKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc0VkaXRSb2xlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tNdWx0aXBsZVJvbGVzKHRoaXMuc2VjdXJpdHlDb25maWcucm9sZXMuZWRpdClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBoYXNFZGl0Um9sZUZvckJvdW5kYXJ5KGJvdW5kYXJ5VmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY2hlY2tNdWx0aXBsZVJvbGVzRm9yQm91bmRhcnkodGhpcy5zZWN1cml0eUNvbmZpZy5yb2xlcy5lZGl0LCBib3VuZGFyeVZhbHVlKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGhhc0Rldm9wc1JvbGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5jaGVja011bHRpcGxlUm9sZXModGhpcy5zZWN1cml0eUNvbmZpZy5yb2xlcy5kZXZvcHMpXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFzUm9sZShyb2xlVG9DaGVjazogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBwYXlsb2FkID0gdGhpcy5hdXRoZW50aWNhdGlvblNlcnZpY2UuZ2V0UGF5bG9hZCgpXHJcbiAgICByZXR1cm4gcGF5bG9hZC5yb2xlcy5zb21lKChyb2xlOiBSb2xlKSA9PlxyXG4gICAgICByb2xlLnJvbGUgPT09IHJvbGVUb0NoZWNrXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaGFzUm9sZUZvckJvdW5kYXJ5KHJvbGVUb0NoZWNrOiBzdHJpbmcsIGJvdW5kYXJ5VmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgY29uc3QgcGF5bG9hZCA9IHRoaXMuYXV0aGVudGljYXRpb25TZXJ2aWNlLmdldFBheWxvYWQoKVxyXG4gICAgY29uc3QgZm91bmRSb2xlID0gcGF5bG9hZC5yb2xlcy5maW5kKHIgPT4gci5yb2xlID09PSByb2xlVG9DaGVjaylcclxuXHJcbiAgICBpZiAoIWZvdW5kUm9sZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkZXZvcHNSb2xlID0gdGhpcy5zZWN1cml0eUNvbmZpZy5yb2xlcy5kZXZvcHMuZmluZChyID0+IHIgPT09IGZvdW5kUm9sZS5yb2xlKVxyXG4gICAgaWYgKGRldm9wc1JvbGUpIHtcclxuICAgICAgcmV0dXJuIHRydWVcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBib3VuZGFyaWVzID0gZm91bmRSb2xlLmJvdW5kYXJpZXNbdGhpcy5zZWN1cml0eUNvbmZpZy5ib3VuZGFyeV9uYW1lXVxyXG4gICAgcmV0dXJuIGJvdW5kYXJpZXMuc29tZSgoYm91bmRhcnk6IHN0cmluZykgPT4gYm91bmRhcnkgPT09IGJvdW5kYXJ5VmFsdWUpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGNoZWNrTXVsdGlwbGVSb2xlcyhyb2xlczogYW55W10pOiBib29sZWFuIHtcclxuICAgIHJldHVybiByb2xlcy5zb21lKHJvbGUgPT4gdGhpcy5oYXNSb2xlKHJvbGUpKVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBjaGVja011bHRpcGxlUm9sZXNGb3JCb3VuZGFyeShyb2xlczogYW55W10sIGJvdW5kYXJ5VmFsdWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHJvbGVzLnNvbWUocm9sZSA9PiB0aGlzLmhhc1JvbGVGb3JCb3VuZGFyeShyb2xlLCBib3VuZGFyeVZhbHVlKSlcclxuICB9XHJcblxyXG59XHJcbiJdfQ==