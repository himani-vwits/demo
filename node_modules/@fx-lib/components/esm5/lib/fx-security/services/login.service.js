/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, map } from 'rxjs/operators';
import { SECURITY_CONFIG } from '../domain/security-config';
var LoginService = /** @class */ (function () {
    function LoginService(http, securityConfig) {
        this.http = http;
        this.ursUrl = 'api/v1/auth';
        this.securityConfig = securityConfig;
    }
    /**
     * @param {?} idToken
     * @return {?}
     */
    LoginService.prototype.login = /**
     * @param {?} idToken
     * @return {?}
     */
    function (idToken) {
        var _this = this;
        /** @type {?} */
        var url = this.securityConfig.authorization_service_url + this.ursUrl;
        return this.http
            .post(url, idToken, { observe: 'response', responseType: 'text' })
            .pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            return response.body;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return _this.handleError(error);
        })));
    };
    /**
     * @private
     * @param {?} error
     * @return {?}
     */
    LoginService.prototype.handleError = /**
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var errorMessage = error.message ? error.message : error.toString();
        console.error(errorMessage);
        return throwError(errorMessage);
    };
    LoginService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoginService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: undefined, decorators: [{ type: Inject, args: [SECURITY_CONFIG,] }] }
    ]; };
    return LoginService;
}());
export { LoginService };
if (false) {
    /** @type {?} */
    LoginService.prototype.securityConfig;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.ursUrl;
    /**
     * @type {?}
     * @private
     */
    LoginService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC1zZWN1cml0eS9zZXJ2aWNlcy9sb2dpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUVsRCxPQUFPLEVBQUUsVUFBVSxFQUFtQyxNQUFNLHNCQUFzQixDQUFBO0FBRWxGLE9BQU8sRUFBYyxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUE7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQTtBQUNoRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFFM0Q7SUFNRSxzQkFBb0IsSUFBZ0IsRUFDVCxjQUE4QjtRQURyQyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBRjVCLFdBQU0sR0FBRyxhQUFhLENBQUE7UUFLNUIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUE7SUFDdEMsQ0FBQzs7Ozs7SUFFTSw0QkFBSzs7OztJQUFaLFVBQWEsT0FBeUI7UUFBdEMsaUJBYUM7O1lBWk8sR0FBRyxHQUFXLElBQUksQ0FBQyxjQUFjLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLE1BQU07UUFFL0UsT0FBTyxJQUFJLENBQUMsSUFBSTthQUNiLElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLENBQUM7YUFDakUsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxVQUFDLFFBQTJCO1lBQzlCLE9BQUEsUUFBUSxDQUFDLElBQUk7UUFBYixDQUFhLEVBQ2QsRUFDRCxVQUFVOzs7O1FBQUMsVUFBQyxLQUF3QjtZQUNsQyxPQUFBLEtBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQXZCLENBQXVCLEVBQ3hCLENBQ0YsQ0FBQTtJQUNMLENBQUM7Ozs7OztJQUVPLGtDQUFXOzs7OztJQUFuQixVQUFvQixLQUF3Qjs7WUFDcEMsWUFBWSxHQUFXLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7UUFDN0UsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUUzQixPQUFPLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQTtJQUNqQyxDQUFDOztnQkFoQ0YsVUFBVTs7OztnQkFORixVQUFVO2dEQWFkLE1BQU0sU0FBQyxlQUFlOztJQTBCM0IsbUJBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWhDWSxZQUFZOzs7SUFDdkIsc0NBQXFDOzs7OztJQUVyQyw4QkFBOEI7Ozs7O0lBRWxCLDRCQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IFNlY3VyaXR5Q29uZmlnIH0gZnJvbSAnLi4vZngtc2VjdXJpdHkubW9kdWxlJ1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwRXJyb3JSZXNwb25zZSwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnXHJcbmltcG9ydCB7IElkcElkZW50aXR5VG9rZW4gfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uLnNlcnZpY2UnXHJcbmltcG9ydCB7IE9ic2VydmFibGUsIHRocm93RXJyb3IgfSBmcm9tICdyeGpzJ1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycydcclxuaW1wb3J0IHsgU0VDVVJJVFlfQ09ORklHIH0gZnJvbSAnLi4vZG9tYWluL3NlY3VyaXR5LWNvbmZpZydcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIExvZ2luU2VydmljZSB7XHJcbiAgcHVibGljIHNlY3VyaXR5Q29uZmlnOiBTZWN1cml0eUNvbmZpZ1xyXG5cclxuICBwcml2YXRlIHVyc1VybCA9ICdhcGkvdjEvYXV0aCdcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxyXG4gICAgQEluamVjdChTRUNVUklUWV9DT05GSUcpIHNlY3VyaXR5Q29uZmlnOiBTZWN1cml0eUNvbmZpZykge1xyXG5cclxuICAgIHRoaXMuc2VjdXJpdHlDb25maWcgPSBzZWN1cml0eUNvbmZpZ1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxvZ2luKGlkVG9rZW46IElkcElkZW50aXR5VG9rZW4pOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xyXG4gICAgY29uc3QgdXJsOiBzdHJpbmcgPSB0aGlzLnNlY3VyaXR5Q29uZmlnLmF1dGhvcml6YXRpb25fc2VydmljZV91cmwgKyB0aGlzLnVyc1VybFxyXG5cclxuICAgIHJldHVybiB0aGlzLmh0dHBcclxuICAgICAgLnBvc3QodXJsLCBpZFRva2VuLCB7IG9ic2VydmU6ICdyZXNwb25zZScsIHJlc3BvbnNlVHlwZTogJ3RleHQnIH0pXHJcbiAgICAgIC5waXBlKFxyXG4gICAgICAgIG1hcCgocmVzcG9uc2U6IEh0dHBSZXNwb25zZTxhbnk+KSA9PlxyXG4gICAgICAgICAgcmVzcG9uc2UuYm9keVxyXG4gICAgICAgICksXHJcbiAgICAgICAgY2F0Y2hFcnJvcigoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKSA9PlxyXG4gICAgICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvcilcclxuICAgICAgICApXHJcbiAgICAgIClcclxuICB9XHJcblxyXG4gIHByaXZhdGUgaGFuZGxlRXJyb3IoZXJyb3I6IEh0dHBFcnJvclJlc3BvbnNlKTogT2JzZXJ2YWJsZTxuZXZlcj4ge1xyXG4gICAgY29uc3QgZXJyb3JNZXNzYWdlOiBzdHJpbmcgPSBlcnJvci5tZXNzYWdlID8gZXJyb3IubWVzc2FnZSA6IGVycm9yLnRvU3RyaW5nKClcclxuICAgIGNvbnNvbGUuZXJyb3IoZXJyb3JNZXNzYWdlKVxyXG5cclxuICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yTWVzc2FnZSlcclxuICB9XHJcbn1cclxuIl19