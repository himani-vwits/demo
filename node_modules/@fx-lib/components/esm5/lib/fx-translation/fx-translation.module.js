/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { LOCALE_ID, NgModule } from '@angular/core';
import { CommonModule, registerLocaleData } from '@angular/common';
import { FxTranslationComponent } from './components/fx-translation/fx-translation.component';
import { NgbModule } from '@ng-bootstrap/ng-bootstrap';
import { BrowserModule } from '@angular/platform-browser';
import { TranslateLoader, TranslateModule, TranslateService } from '@ngx-translate/core';
import { HttpClient } from '@angular/common/http';
import { TranslateHttpLoader } from '@ngx-translate/http-loader';
import localeDe from '@angular/common/locales/de';
import { FxLanguageSelectorComponent } from './components/fx-language-selector/fx-language-selector.component';
/** @type {?} */
export var FX_LANGUAGE = 'FX_LANGUAGE';
registerLocaleData(localeDe);
/**
 * @param {?} http
 * @return {?}
 */
export function HttpLoaderFactory(http) {
    return new TranslateHttpLoader(http, './assets/i18n/', '.json');
}
/**
 * @param {?} translate
 * @return {?}
 */
export function CurrentLanguageFactory(translate) {
    return translate.currentLang;
}
var FxTranslationModule = /** @class */ (function () {
    function FxTranslationModule(translate) {
        translate.setDefaultLang('de');
        /** @type {?} */
        var langFromLocalStorage = localStorage.getItem(FX_LANGUAGE);
        if (langFromLocalStorage) {
            translate.use(langFromLocalStorage);
        }
        else {
            /** @type {?} */
            var browserLanguage = FxTranslationModule.isLanguageSupported(translate.getBrowserLang()) ? translate.getBrowserLang() : 'de';
            translate.use(browserLanguage);
            localStorage.setItem(FX_LANGUAGE, browserLanguage);
        }
    }
    /**
     * @param {?} browserLanguage
     * @return {?}
     */
    FxTranslationModule.isLanguageSupported = /**
     * @param {?} browserLanguage
     * @return {?}
     */
    function (browserLanguage) {
        return ['en', 'de'].indexOf(browserLanguage) >= 0;
    };
    FxTranslationModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [FxTranslationComponent,
                        FxLanguageSelectorComponent
                    ],
                    exports: [
                        TranslateModule,
                        FxTranslationComponent,
                        FxLanguageSelectorComponent
                    ],
                    imports: [
                        BrowserModule,
                        CommonModule,
                        NgbModule,
                        TranslateModule.forRoot({
                            loader: {
                                provide: TranslateLoader,
                                useFactory: HttpLoaderFactory,
                                deps: [HttpClient]
                            }
                        })
                    ],
                    providers: [{ provide: LOCALE_ID, useFactory: CurrentLanguageFactory, deps: [TranslateService] }
                    ],
                    bootstrap: [FxTranslationComponent, FxLanguageSelectorComponent]
                },] }
    ];
    /** @nocollapse */
    FxTranslationModule.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return FxTranslationModule;
}());
export { FxTranslationModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtdHJhbnNsYXRpb24ubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXRyYW5zbGF0aW9uL2Z4LXRyYW5zbGF0aW9uLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUE7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGlCQUFpQixDQUFBO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHNEQUFzRCxDQUFBO0FBQzdGLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQTtBQUN0RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMkJBQTJCLENBQUE7QUFDekQsT0FBTyxFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQTtBQUN4RixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUE7QUFDakQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sNEJBQTRCLENBQUE7QUFDaEUsT0FBTyxRQUFRLE1BQU0sNEJBQTRCLENBQUE7QUFDakQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sa0VBQWtFLENBQUE7O0FBRTlHLE1BQU0sS0FBTyxXQUFXLEdBQUcsYUFBYTtBQUV4QyxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTs7Ozs7QUFFNUIsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQWdCO0lBQ2hELE9BQU8sSUFBSSxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUE7QUFDakUsQ0FBQzs7Ozs7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsU0FBMkI7SUFDaEUsT0FBTyxTQUFTLENBQUMsV0FBVyxDQUFBO0FBQzlCLENBQUM7QUFFRDtJQTZCRSw2QkFBWSxTQUEyQjtRQUNyQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFBOztZQUN4QixvQkFBb0IsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQztRQUM5RCxJQUFJLG9CQUFvQixFQUFFO1lBQ3hCLFNBQVMsQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtTQUNwQzthQUFNOztnQkFDQyxlQUFlLEdBQUcsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSTtZQUMvSCxTQUFTLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQzlCLFlBQVksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLGVBQWUsQ0FBQyxDQUFBO1NBQ25EO0lBQ0gsQ0FBQzs7Ozs7SUFiYSx1Q0FBbUI7Ozs7SUFBakMsVUFBa0MsZUFBdUI7UUFDdkQsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxDQUFBO0lBQ25ELENBQUM7O2dCQTVCRixRQUFRLFNBQUM7b0JBQ1IsWUFBWSxFQUFFLENBQUMsc0JBQXNCO3dCQUN2QiwyQkFBMkI7cUJBQ3hDO29CQUNELE9BQU8sRUFBRTt3QkFDUCxlQUFlO3dCQUNmLHNCQUFzQjt3QkFDdEIsMkJBQTJCO3FCQUM1QjtvQkFDRCxPQUFPLEVBQUU7d0JBQ1AsYUFBYTt3QkFDYixZQUFZO3dCQUNaLFNBQVM7d0JBQ1QsZUFBZSxDQUFDLE9BQU8sQ0FBQzs0QkFDdEIsTUFBTSxFQUFFO2dDQUNOLE9BQU8sRUFBRSxlQUFlO2dDQUN4QixVQUFVLEVBQUUsaUJBQWlCO2dDQUM3QixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7NkJBQ25CO3lCQUNGLENBQUM7cUJBQUM7b0JBQ0gsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFDO3FCQUM3RjtvQkFDRCxTQUFTLEVBQUUsQ0FBQyxzQkFBc0IsRUFBRSwyQkFBMkIsQ0FBQztpQkFDbkU7Ozs7Z0JBekMwQyxnQkFBZ0I7O0lBMEQzRCwwQkFBQztDQUFBLEFBeENELElBd0NDO1NBZlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTE9DQUxFX0lELCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSwgcmVnaXN0ZXJMb2NhbGVEYXRhIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJ1xyXG5pbXBvcnQgeyBGeFRyYW5zbGF0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2Z4LXRyYW5zbGF0aW9uL2Z4LXRyYW5zbGF0aW9uLmNvbXBvbmVudCdcclxuaW1wb3J0IHsgTmdiTW9kdWxlIH0gZnJvbSAnQG5nLWJvb3RzdHJhcC9uZy1ib290c3RyYXAnXHJcbmltcG9ydCB7IEJyb3dzZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJ1xyXG5pbXBvcnQgeyBUcmFuc2xhdGVMb2FkZXIsIFRyYW5zbGF0ZU1vZHVsZSwgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnXHJcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCdcclxuaW1wb3J0IHsgVHJhbnNsYXRlSHR0cExvYWRlciB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2h0dHAtbG9hZGVyJ1xyXG5pbXBvcnQgbG9jYWxlRGUgZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2xvY2FsZXMvZGUnXHJcbmltcG9ydCB7IEZ4TGFuZ3VhZ2VTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9meC1sYW5ndWFnZS1zZWxlY3Rvci9meC1sYW5ndWFnZS1zZWxlY3Rvci5jb21wb25lbnQnXHJcblxyXG5leHBvcnQgY29uc3QgRlhfTEFOR1VBR0UgPSAnRlhfTEFOR1VBR0UnXHJcblxyXG5yZWdpc3RlckxvY2FsZURhdGEobG9jYWxlRGUpXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gSHR0cExvYWRlckZhY3RvcnkoaHR0cDogSHR0cENsaWVudCk6IFRyYW5zbGF0ZUh0dHBMb2FkZXIge1xyXG4gIHJldHVybiBuZXcgVHJhbnNsYXRlSHR0cExvYWRlcihodHRwLCAnLi9hc3NldHMvaTE4bi8nLCAnLmpzb24nKVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQ3VycmVudExhbmd1YWdlRmFjdG9yeSh0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UpOiBzdHJpbmcge1xyXG4gIHJldHVybiB0cmFuc2xhdGUuY3VycmVudExhbmdcclxufVxyXG5cclxuQE5nTW9kdWxlKHtcclxuICBkZWNsYXJhdGlvbnM6IFtGeFRyYW5zbGF0aW9uQ29tcG9uZW50LFxyXG4gICAgICAgICAgICAgICAgRnhMYW5ndWFnZVNlbGVjdG9yQ29tcG9uZW50XHJcbiAgXSxcclxuICBleHBvcnRzOiBbXHJcbiAgICBUcmFuc2xhdGVNb2R1bGUsXHJcbiAgICBGeFRyYW5zbGF0aW9uQ29tcG9uZW50LFxyXG4gICAgRnhMYW5ndWFnZVNlbGVjdG9yQ29tcG9uZW50XHJcbiAgXSxcclxuICBpbXBvcnRzOiBbXHJcbiAgICBCcm93c2VyTW9kdWxlLFxyXG4gICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgTmdiTW9kdWxlLFxyXG4gICAgVHJhbnNsYXRlTW9kdWxlLmZvclJvb3Qoe1xyXG4gICAgICBsb2FkZXI6IHtcclxuICAgICAgICBwcm92aWRlOiBUcmFuc2xhdGVMb2FkZXIsXHJcbiAgICAgICAgdXNlRmFjdG9yeTogSHR0cExvYWRlckZhY3RvcnksXHJcbiAgICAgICAgZGVwczogW0h0dHBDbGllbnRdXHJcbiAgICAgIH1cclxuICAgIH0pXSxcclxuICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBMT0NBTEVfSUQsIHVzZUZhY3Rvcnk6IEN1cnJlbnRMYW5ndWFnZUZhY3RvcnksIGRlcHM6IFtUcmFuc2xhdGVTZXJ2aWNlXX1cclxuICAgIF0sXHJcbiAgICBib290c3RyYXA6IFtGeFRyYW5zbGF0aW9uQ29tcG9uZW50LCBGeExhbmd1YWdlU2VsZWN0b3JDb21wb25lbnRdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRnhUcmFuc2xhdGlvbk1vZHVsZSB7XHJcbiAgcHVibGljIHN0YXRpYyBpc0xhbmd1YWdlU3VwcG9ydGVkKGJyb3dzZXJMYW5ndWFnZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gWydlbicsICdkZSddLmluZGV4T2YoYnJvd3Nlckxhbmd1YWdlKSA+PSAwXHJcbiAgfVxyXG4gIGNvbnN0cnVjdG9yKHRyYW5zbGF0ZTogVHJhbnNsYXRlU2VydmljZSkge1xyXG4gICAgdHJhbnNsYXRlLnNldERlZmF1bHRMYW5nKCdkZScpXHJcbiAgICBjb25zdCBsYW5nRnJvbUxvY2FsU3RvcmFnZSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKEZYX0xBTkdVQUdFKVxyXG4gICAgaWYgKGxhbmdGcm9tTG9jYWxTdG9yYWdlKSB7XHJcbiAgICAgIHRyYW5zbGF0ZS51c2UobGFuZ0Zyb21Mb2NhbFN0b3JhZ2UpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBicm93c2VyTGFuZ3VhZ2UgPSBGeFRyYW5zbGF0aW9uTW9kdWxlLmlzTGFuZ3VhZ2VTdXBwb3J0ZWQodHJhbnNsYXRlLmdldEJyb3dzZXJMYW5nKCkpID8gdHJhbnNsYXRlLmdldEJyb3dzZXJMYW5nKCkgOiAnZGUnXHJcbiAgICAgIHRyYW5zbGF0ZS51c2UoYnJvd3Nlckxhbmd1YWdlKVxyXG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShGWF9MQU5HVUFHRSwgYnJvd3Nlckxhbmd1YWdlKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuXHJcbiJdfQ==