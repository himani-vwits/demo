/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of, timer } from 'rxjs';
var FxUserNotificationLocalDevelopmentService = /** @class */ (function () {
    function FxUserNotificationLocalDevelopmentService() {
        this.notifications = [];
        this.idCounterForMessages = 0;
        this.startTimer();
    }
    /**
     * @return {?}
     */
    FxUserNotificationLocalDevelopmentService.prototype.getNotifications = /**
     * @return {?}
     */
    function () {
        return of(this.notifications);
    };
    /**
     * @return {?}
     */
    FxUserNotificationLocalDevelopmentService.prototype.postUserReadLog = /**
     * @return {?}
     */
    function () {
        this.notifications.forEach((/**
         * @param {?} message
         * @return {?}
         */
        function (message) { return message.read = true; }));
        return of({});
    };
    /**
     * @private
     * @return {?}
     */
    FxUserNotificationLocalDevelopmentService.prototype.startTimer = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // this timer is on purpose not stopped or unsubscribed as it simulates a server that is generating messages,
        // it will not be stopped by the client.
        timer(0, 5000).subscribe((/**
         * @return {?}
         */
        function () {
            _this.notifications.push(_this.generateNewMessage());
        }));
    };
    /**
     * @private
     * @return {?}
     */
    FxUserNotificationLocalDevelopmentService.prototype.generateNewMessage = /**
     * @private
     * @return {?}
     */
    function () {
        this.idCounterForMessages++;
        /** @type {?} */
        var severity = this.getRandomSeverity();
        /** @type {?} */
        var messageText = Math.random() > 0.5
            ? "This is " + severity + " message " + this.idCounterForMessages.toString() + " locally generated."
            : "This is " + severity + " message " + this.idCounterForMessages.toString() + " locally generated. With a text which is longer than expected. This way a collapsible message can be demonstrated.";
        return {
            messageHeadline: "Dummy " + severity + " Message " + this.idCounterForMessages.toString(),
            updatedByUser: 'dummy',
            severity: severity,
            read: false,
            messageText: messageText,
            id: this.idCounterForMessages.toString(),
            audience: undefined,
            updateTimestamp: new Date()
        };
    };
    /**
     * @private
     * @return {?}
     */
    FxUserNotificationLocalDevelopmentService.prototype.getRandomSeverity = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rnd = Math.random();
        if (rnd > 0.66) {
            return 'INFO';
        }
        else if (rnd > 0.33) {
            return 'WARNING';
        }
        else {
            return 'ERROR';
        }
    };
    FxUserNotificationLocalDevelopmentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FxUserNotificationLocalDevelopmentService.ctorParameters = function () { return []; };
    return FxUserNotificationLocalDevelopmentService;
}());
export { FxUserNotificationLocalDevelopmentService };
if (false) {
    /** @type {?} */
    FxUserNotificationLocalDevelopmentService.prototype.notifications;
    /**
     * @type {?}
     * @private
     */
    FxUserNotificationLocalDevelopmentService.prototype.idCounterForMessages;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtdXNlci1ub3RpZmljYXRpb24tbG9jYWwtZGV2ZWxvcG1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9meC11c2VyLW5vdGlmaWNhdGlvbi9zZXJ2aWNlcy9meC11c2VyLW5vdGlmaWNhdGlvbi1sb2NhbC1kZXZlbG9wbWVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFBO0FBQzFDLE9BQU8sRUFBYyxFQUFFLEVBQUUsS0FBSyxFQUFFLE1BQU0sTUFBTSxDQUFBO0FBSTVDO0lBWUU7UUFKTyxrQkFBYSxHQUE4QixFQUFFLENBQUE7UUFFNUMseUJBQW9CLEdBQUcsQ0FBQyxDQUFBO1FBRzlCLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNuQixDQUFDOzs7O0lBRU0sb0VBQWdCOzs7SUFBdkI7UUFDRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDL0IsQ0FBQzs7OztJQUVNLG1FQUFlOzs7SUFBdEI7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLE9BQU8sSUFBSyxPQUFBLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxFQUFuQixDQUFtQixFQUFDLENBQUE7UUFDNUQsT0FBTyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUE7SUFDZixDQUFDOzs7OztJQUVPLDhEQUFVOzs7O0lBQWxCO1FBQUEsaUJBTUM7UUFMQyw2R0FBNkc7UUFDN0csd0NBQXdDO1FBQ3hDLEtBQUssQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUzs7O1FBQUM7WUFDdkIsS0FBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLGtCQUFrQixFQUFFLENBQUMsQ0FBQTtRQUNwRCxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7Ozs7O0lBRU8sc0VBQWtCOzs7O0lBQTFCO1FBQ0UsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUE7O1lBRXJCLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEVBQUU7O1lBQ25DLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRztZQUNyQyxDQUFDLENBQUMsYUFBVyxRQUFRLGlCQUFZLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsd0JBQXFCO1lBQzFGLENBQUMsQ0FBQyxhQUFXLFFBQVEsaUJBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBRSx1SEFBb0g7UUFFM0wsT0FBTztZQUNMLGVBQWUsRUFBRSxXQUFTLFFBQVEsaUJBQVksSUFBSSxDQUFDLG9CQUFvQixDQUFDLFFBQVEsRUFBSTtZQUNwRixhQUFhLEVBQUUsT0FBTztZQUN0QixRQUFRLEVBQUUsUUFBUTtZQUNsQixJQUFJLEVBQUUsS0FBSztZQUNYLFdBQVcsRUFBRSxXQUFXO1lBQ3hCLEVBQUUsRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsUUFBUSxFQUFFO1lBQ3hDLFFBQVEsRUFBRSxTQUFTO1lBQ25CLGVBQWUsRUFBRSxJQUFJLElBQUksRUFBRTtTQUM1QixDQUFBO0lBQ0gsQ0FBQzs7Ozs7SUFFTyxxRUFBaUI7Ozs7SUFBekI7O1lBQ1EsR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDekIsSUFBSSxHQUFHLEdBQUcsSUFBSSxFQUFFO1lBQ2QsT0FBTyxNQUFNLENBQUE7U0FDZDthQUFNLElBQUksR0FBRyxHQUFHLElBQUksRUFBRTtZQUNyQixPQUFPLFNBQVMsQ0FBQTtTQUNqQjthQUFNO1lBQ0wsT0FBTyxPQUFPLENBQUE7U0FDbEI7SUFDQSxDQUFDOztnQkE5REYsVUFBVTs7OztJQStEWCxnREFBQztDQUFBLEFBL0RELElBK0RDO1NBekRZLHlDQUF5Qzs7O0lBRXBELGtFQUFvRDs7Ozs7SUFFcEQseUVBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mLCB0aW1lciB9IGZyb20gJ3J4anMnXHJcbmltcG9ydCB7IEZ4VXNlck5vdGlmaWNhdGlvbiB9IGZyb20gJy4uL2RvbWFpbi9meC11c2VyLW5vdGlmaWNhdGlvbidcclxuaW1wb3J0IHsgSUZ4VXNlck5vdGlmaWNhdGlvbkxvY2FsRGV2ZWxvcG1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9pLWZ4LXVzZXItbm90aWZpY2F0aW9uLnNlcnZpY2UnXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbi8qKlxyXG4gKiBBIGltcGxlbWVudGF0aW9uIG9mIElGeFVzZXJOb3RpZmljYXRpb25Mb2NhbERldmVsb3BtZW50U2VydmljZSBqdXN0IHdpdGhvdXQgc2VydmVyLCBpdCBnZW5lcmF0ZXMgYWxsIGRhdGEgb2ZmbGluZS5cclxuICogPGI+UHVycG9zZTo8L2I+XHJcbiAqIEVhc2Ugb2YgZGV2ZWxvcG1lbnQgYW5kIGRlbW9uc3RyYXRpb24gaW4gYSBzaG93Y2FzZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBGeFVzZXJOb3RpZmljYXRpb25Mb2NhbERldmVsb3BtZW50U2VydmljZSAgaW1wbGVtZW50cyBJRnhVc2VyTm90aWZpY2F0aW9uTG9jYWxEZXZlbG9wbWVudFNlcnZpY2Uge1xyXG5cclxuICBwdWJsaWMgbm90aWZpY2F0aW9uczogQXJyYXk8RnhVc2VyTm90aWZpY2F0aW9uPiA9IFtdXHJcblxyXG4gIHByaXZhdGUgaWRDb3VudGVyRm9yTWVzc2FnZXMgPSAwXHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zdGFydFRpbWVyKClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXROb3RpZmljYXRpb25zKCk6IE9ic2VydmFibGU8QXJyYXk8RnhVc2VyTm90aWZpY2F0aW9uPj4ge1xyXG4gICAgcmV0dXJuIG9mKHRoaXMubm90aWZpY2F0aW9ucylcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwb3N0VXNlclJlYWRMb2coKTogT2JzZXJ2YWJsZTxPYmplY3Q+IHtcclxuICAgIHRoaXMubm90aWZpY2F0aW9ucy5mb3JFYWNoKChtZXNzYWdlKSA9PiBtZXNzYWdlLnJlYWQgPSB0cnVlKVxyXG4gICAgcmV0dXJuIG9mKHt9KVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBzdGFydFRpbWVyKCk6IHZvaWQge1xyXG4gICAgLy8gdGhpcyB0aW1lciBpcyBvbiBwdXJwb3NlIG5vdCBzdG9wcGVkIG9yIHVuc3Vic2NyaWJlZCBhcyBpdCBzaW11bGF0ZXMgYSBzZXJ2ZXIgdGhhdCBpcyBnZW5lcmF0aW5nIG1lc3NhZ2VzLFxyXG4gICAgLy8gaXQgd2lsbCBub3QgYmUgc3RvcHBlZCBieSB0aGUgY2xpZW50LlxyXG4gICAgdGltZXIoMCwgNTAwMCkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgdGhpcy5ub3RpZmljYXRpb25zLnB1c2godGhpcy5nZW5lcmF0ZU5ld01lc3NhZ2UoKSlcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdlbmVyYXRlTmV3TWVzc2FnZSgpOiBGeFVzZXJOb3RpZmljYXRpb24ge1xyXG4gICAgdGhpcy5pZENvdW50ZXJGb3JNZXNzYWdlcysrXHJcblxyXG4gICAgY29uc3Qgc2V2ZXJpdHkgPSB0aGlzLmdldFJhbmRvbVNldmVyaXR5KClcclxuICAgIGNvbnN0IG1lc3NhZ2VUZXh0ID0gTWF0aC5yYW5kb20oKSA+IDAuNVxyXG4gICAgICA/IGBUaGlzIGlzICR7c2V2ZXJpdHl9IG1lc3NhZ2UgJHt0aGlzLmlkQ291bnRlckZvck1lc3NhZ2VzLnRvU3RyaW5nKCl9IGxvY2FsbHkgZ2VuZXJhdGVkLmBcclxuICAgICAgOiBgVGhpcyBpcyAke3NldmVyaXR5fSBtZXNzYWdlICR7dGhpcy5pZENvdW50ZXJGb3JNZXNzYWdlcy50b1N0cmluZygpfSBsb2NhbGx5IGdlbmVyYXRlZC4gV2l0aCBhIHRleHQgd2hpY2ggaXMgbG9uZ2VyIHRoYW4gZXhwZWN0ZWQuIFRoaXMgd2F5IGEgY29sbGFwc2libGUgbWVzc2FnZSBjYW4gYmUgZGVtb25zdHJhdGVkLmBcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBtZXNzYWdlSGVhZGxpbmU6IGBEdW1teSAke3NldmVyaXR5fSBNZXNzYWdlICR7dGhpcy5pZENvdW50ZXJGb3JNZXNzYWdlcy50b1N0cmluZygpfWAsXHJcbiAgICAgIHVwZGF0ZWRCeVVzZXI6ICdkdW1teScsXHJcbiAgICAgIHNldmVyaXR5OiBzZXZlcml0eSxcclxuICAgICAgcmVhZDogZmFsc2UsXHJcbiAgICAgIG1lc3NhZ2VUZXh0OiBtZXNzYWdlVGV4dCxcclxuICAgICAgaWQ6IHRoaXMuaWRDb3VudGVyRm9yTWVzc2FnZXMudG9TdHJpbmcoKSxcclxuICAgICAgYXVkaWVuY2U6IHVuZGVmaW5lZCxcclxuICAgICAgdXBkYXRlVGltZXN0YW1wOiBuZXcgRGF0ZSgpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFJhbmRvbVNldmVyaXR5KCk6ICdJTkZPJyB8ICdXQVJOSU5HJyB8ICdFUlJPUicge1xyXG4gICAgY29uc3Qgcm5kID0gTWF0aC5yYW5kb20oKVxyXG4gICAgaWYgKHJuZCA+IDAuNjYpIHtcclxuICAgICAgcmV0dXJuICdJTkZPJ1xyXG4gICAgfSBlbHNlIGlmIChybmQgPiAwLjMzKSB7XHJcbiAgICAgIHJldHVybiAnV0FSTklORydcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAnRVJST1InXHJcbiB9XHJcbiAgfVxyXG59XHJcblxyXG4iXX0=