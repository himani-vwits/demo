/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { NgbDatepickerI18n } from '@ng-bootstrap/ng-bootstrap';
import { TranslateService } from '@ngx-translate/core';
/** @type {?} */
var I18N_VALUES = {
    de: {
        weekdays: ['Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa', 'So'],
        months_long: ['Januar', 'Februar', 'März', 'April', 'Mai', 'Juni', 'Juli', 'August', 'September', 'Oktober', 'November', 'Dezember'],
        months_short: ['Jan', 'Feb', 'Mär', 'Apr', 'Mai', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dez'],
    },
    en: {
        weekdays: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],
        months_long: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],
        months_short: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dez'],
    }
};
var I18n = /** @class */ (function () {
    function I18n(translateService) {
        var _this = this;
        this.translateService = translateService;
        this.language = 'en';
        translateService.onLangChange.subscribe((/**
         * @param {?} langChangeEvent
         * @return {?}
         */
        function (langChangeEvent) {
            _this.language = langChangeEvent.lang;
        }));
    }
    I18n.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    I18n.ctorParameters = function () { return [
        { type: TranslateService }
    ]; };
    return I18n;
}());
export { I18n };
if (false) {
    /** @type {?} */
    I18n.prototype.language;
    /**
     * @type {?}
     * @private
     */
    I18n.prototype.translateService;
}
var FxWeekSelectorI18n = /** @class */ (function (_super) {
    tslib_1.__extends(FxWeekSelectorI18n, _super);
    function FxWeekSelectorI18n(i18n) {
        var _this = _super.call(this) || this;
        _this.i18n = i18n;
        return _this;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    FxWeekSelectorI18n.prototype.getDayAriaLabel = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return date.year + "-" + date.month + "-" + date.day;
    };
    /**
     * @param {?} month
     * @return {?}
     */
    FxWeekSelectorI18n.prototype.getMonthFullName = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return I18N_VALUES[this.i18n.language].months_long[month - 1];
    };
    /**
     * @param {?} month
     * @return {?}
     */
    FxWeekSelectorI18n.prototype.getMonthShortName = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        return this.getMonthFullName(month);
    };
    /**
     * @param {?} weekday
     * @return {?}
     */
    FxWeekSelectorI18n.prototype.getWeekdayShortName = /**
     * @param {?} weekday
     * @return {?}
     */
    function (weekday) {
        return I18N_VALUES[this.i18n.language].weekdays[weekday - 1];
    };
    FxWeekSelectorI18n.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FxWeekSelectorI18n.ctorParameters = function () { return [
        { type: I18n }
    ]; };
    return FxWeekSelectorI18n;
}(NgbDatepickerI18n));
export { FxWeekSelectorI18n };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FxWeekSelectorI18n.prototype.i18n;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZngtd2Vlay1zZWxlY3Rvci1pMThuLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL2Z4LXdlZWstc2VsZWN0b3IvZngtd2Vlay1zZWxlY3Rvci1pMThuLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUMxQyxPQUFPLEVBQUUsaUJBQWlCLEVBQWlCLE1BQU0sNEJBQTRCLENBQUE7QUFDN0UsT0FBTyxFQUFtQixnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFBOztJQUdqRSxXQUFXLEdBQUc7SUFDbEIsRUFBRSxFQUFFO1FBQ0YsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ3BELFdBQVcsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDO1FBQ3BJLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0tBQ25HO0lBQ0QsRUFBRSxFQUFFO1FBQ0YsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1FBQ3BELFdBQVcsRUFBRSxDQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDO1FBQ3ZJLFlBQVksRUFBRSxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDO0tBQ25HO0NBQ0Y7QUFFRDtJQUlFLGNBQW9CLGdCQUFrQztRQUF0RCxpQkFJQztRQUptQixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBRi9DLGFBQVEsR0FBRyxJQUFJLENBQUE7UUFHcEIsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLFNBQVM7Ozs7UUFBRSxVQUFDLGVBQWdDO1lBQ3hFLEtBQUksQ0FBQyxRQUFRLEdBQUcsZUFBZSxDQUFDLElBQUksQ0FBQTtRQUN0QyxDQUFDLEVBQUMsQ0FBQTtJQUNKLENBQUM7O2dCQVJGLFVBQVU7Ozs7Z0JBaEJlLGdCQUFnQjs7SUF5QjFDLFdBQUM7Q0FBQSxBQVRELElBU0M7U0FSWSxJQUFJOzs7SUFDZix3QkFBc0I7Ozs7O0lBRVYsZ0NBQTBDOztBQU94RDtJQUN3Qyw4Q0FBaUI7SUFFdkQsNEJBQW9CLElBQVU7UUFBOUIsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLFVBQUksR0FBSixJQUFJLENBQU07O0lBRTlCLENBQUM7Ozs7O0lBRU0sNENBQWU7Ozs7SUFBdEIsVUFBdUIsSUFBbUI7UUFDeEMsT0FBVSxJQUFJLENBQUMsSUFBSSxTQUFJLElBQUksQ0FBQyxLQUFLLFNBQUksSUFBSSxDQUFDLEdBQUssQ0FBQTtJQUNqRCxDQUFDOzs7OztJQUVNLDZDQUFnQjs7OztJQUF2QixVQUF3QixLQUFhO1FBQ25DLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQTtJQUMvRCxDQUFDOzs7OztJQUVNLDhDQUFpQjs7OztJQUF4QixVQUF5QixLQUFhO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3JDLENBQUM7Ozs7O0lBRU0sZ0RBQW1COzs7O0lBQTFCLFVBQTJCLE9BQWU7UUFDeEMsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFBO0lBQzlELENBQUM7O2dCQXJCRixVQUFVOzs7O2dCQUdpQixJQUFJOztJQW9CaEMseUJBQUM7Q0FBQSxBQXZCRCxDQUN3QyxpQkFBaUIsR0FzQnhEO1NBdEJZLGtCQUFrQjs7Ozs7O0lBRWpCLGtDQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJ1xyXG5pbXBvcnQgeyBOZ2JEYXRlcGlja2VySTE4biwgTmdiRGF0ZVN0cnVjdCB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJ1xyXG5pbXBvcnQgeyBMYW5nQ2hhbmdlRXZlbnQsIFRyYW5zbGF0ZVNlcnZpY2UgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJ1xyXG5cclxuXHJcbmNvbnN0IEkxOE5fVkFMVUVTID0ge1xyXG4gIGRlOiB7XHJcbiAgICB3ZWVrZGF5czogWydNbycsICdEaScsICdNaScsICdEbycsICdGcicsICdTYScsICdTbyddLFxyXG4gICAgbW9udGhzX2xvbmc6IFsnSmFudWFyJywgJ0ZlYnJ1YXInLCAnTcOkcnonLCAnQXByaWwnLCAnTWFpJywgJ0p1bmknLCAnSnVsaScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09rdG9iZXInLCAnTm92ZW1iZXInLCAnRGV6ZW1iZXInXSxcclxuICAgIG1vbnRoc19zaG9ydDogWydKYW4nLCAnRmViJywgJ03DpHInLCAnQXByJywgJ01haScsICdKdW4nLCAnSnVsJywgJ0F1ZycsICdTZXAnLCAnT2t0JywgJ05vdicsICdEZXonXSxcclxuICB9LFxyXG4gIGVuOiB7XHJcbiAgICB3ZWVrZGF5czogWydNbycsICdUdScsICdXZScsICdUaCcsICdGcicsICdTYScsICdTdSddLFxyXG4gICAgbW9udGhzX2xvbmc6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddLFxyXG4gICAgbW9udGhzX3Nob3J0OiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGV6J10sXHJcbiAgfVxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBJMThuIHtcclxuICBwdWJsaWMgbGFuZ3VhZ2UgPSAnZW4nXHJcblxyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdHJhbnNsYXRlU2VydmljZTogVHJhbnNsYXRlU2VydmljZSkge1xyXG4gICAgdHJhbnNsYXRlU2VydmljZS5vbkxhbmdDaGFuZ2Uuc3Vic2NyaWJlKCAobGFuZ0NoYW5nZUV2ZW50OiBMYW5nQ2hhbmdlRXZlbnQpID0+IHtcclxuICAgICAgdGhpcy5sYW5ndWFnZSA9IGxhbmdDaGFuZ2VFdmVudC5sYW5nXHJcbiAgICB9KVxyXG4gIH1cclxufVxyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRnhXZWVrU2VsZWN0b3JJMThuIGV4dGVuZHMgTmdiRGF0ZXBpY2tlckkxOG4ge1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGkxOG46IEkxOG4pIHtcclxuICAgIHN1cGVyKClcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXREYXlBcmlhTGFiZWwoZGF0ZTogTmdiRGF0ZVN0cnVjdCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7ZGF0ZS55ZWFyfS0ke2RhdGUubW9udGh9LSR7ZGF0ZS5kYXl9YFxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldE1vbnRoRnVsbE5hbWUobW9udGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gSTE4Tl9WQUxVRVNbdGhpcy5pMThuLmxhbmd1YWdlXS5tb250aHNfbG9uZ1ttb250aCAtIDFdXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TW9udGhTaG9ydE5hbWUobW9udGg6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRNb250aEZ1bGxOYW1lKG1vbnRoKVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldFdlZWtkYXlTaG9ydE5hbWUod2Vla2RheTogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBJMThOX1ZBTFVFU1t0aGlzLmkxOG4ubGFuZ3VhZ2VdLndlZWtkYXlzW3dlZWtkYXkgLSAxXVxyXG4gIH1cclxuXHJcbn1cclxuIl19