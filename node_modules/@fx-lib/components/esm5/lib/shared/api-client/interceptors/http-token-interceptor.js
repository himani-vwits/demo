/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { AuthenticationService } from '../../../fx-security/services/authentication.service';
var HttpTokenInterceptor = /** @class */ (function () {
    function HttpTokenInterceptor(authService) {
        this.authService = authService;
    }
    /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    HttpTokenInterceptor.prototype.intercept = /**
     * @param {?} request
     * @param {?} next
     * @return {?}
     */
    function (request, next) {
        /** @type {?} */
        var bearerToken = this.authService.getAuthTokenHeaderString();
        /** @type {?} */
        var isLoggedIn = this.authService.isLoggedIn;
        /** @type {?} */
        var newRequest = request;
        if (isLoggedIn && bearerToken && request.url.indexOf('.apps.emea.vwapps.io') > -1) {
            /** @type {?} */
            var url = newRequest.url;
            url = this.replaceHttpOrPrefixUrlWithHttps(url);
            newRequest = request.clone({
                setHeaders: {
                    Authorization: bearerToken,
                },
                url: url,
            });
        }
        return next.handle(newRequest);
    };
    /**
     * @private
     * @param {?} originalUrl
     * @return {?}
     */
    HttpTokenInterceptor.prototype.replaceHttpOrPrefixUrlWithHttps = /**
     * @private
     * @param {?} originalUrl
     * @return {?}
     */
    function (originalUrl) {
        /** @type {?} */
        var url = originalUrl;
        if (!url.startsWith('https')) {
            if (url.startsWith('http:')) {
                url = url.replace('http:', 'https:');
            }
            else if (url.startsWith('//')) {
                url = 'https:' + url;
            }
            else {
                url = 'https://' + url;
            }
        }
        return url;
    };
    HttpTokenInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    HttpTokenInterceptor.ctorParameters = function () { return [
        { type: AuthenticationService }
    ]; };
    return HttpTokenInterceptor;
}());
export { HttpTokenInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    HttpTokenInterceptor.prototype.authService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC10b2tlbi1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvYXBpLWNsaWVudC9pbnRlcmNlcHRvcnMvaHR0cC10b2tlbi1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUUxQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQTtBQUU1RjtJQUVFLDhCQUFvQixXQUFrQztRQUFsQyxnQkFBVyxHQUFYLFdBQVcsQ0FBdUI7SUFDdEQsQ0FBQzs7Ozs7O0lBRU0sd0NBQVM7Ozs7O0lBQWhCLFVBQWlCLE9BQXlCLEVBQUUsSUFBaUI7O1lBQ3JELFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLHdCQUF3QixFQUFFOztZQUN6RCxVQUFVLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVOztZQUMxQyxVQUFVLEdBQUcsT0FBTztRQUN4QixJQUFJLFVBQVUsSUFBSSxXQUFXLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsc0JBQXNCLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTs7Z0JBQzdFLEdBQUcsR0FBRyxVQUFVLENBQUMsR0FBRztZQUN4QixHQUFHLEdBQUcsSUFBSSxDQUFDLCtCQUErQixDQUFDLEdBQUcsQ0FBQyxDQUFBO1lBQy9DLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUN6QixVQUFVLEVBQUU7b0JBQ1YsYUFBYSxFQUFFLFdBQVc7aUJBQzNCO2dCQUNELEdBQUcsRUFBRSxHQUFHO2FBQ1QsQ0FBQyxDQUFBO1NBQ0g7UUFDRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDaEMsQ0FBQzs7Ozs7O0lBRU8sOERBQStCOzs7OztJQUF2QyxVQUF3QyxXQUFtQjs7WUFDckQsR0FBRyxHQUFHLFdBQVc7UUFDckIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDNUIsSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUMzQixHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUE7YUFDckM7aUJBQU0sSUFBSSxHQUFHLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUMvQixHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQTthQUNyQjtpQkFBTTtnQkFDTCxHQUFHLEdBQUcsVUFBVSxHQUFHLEdBQUcsQ0FBQTthQUN2QjtTQUNGO1FBQ0QsT0FBTyxHQUFHLENBQUE7SUFDWixDQUFDOztnQkFsQ0YsVUFBVTs7OztnQkFGRixxQkFBcUI7O0lBcUM5QiwyQkFBQztDQUFBLEFBbkNELElBbUNDO1NBbENZLG9CQUFvQjs7Ozs7O0lBQ25CLDJDQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBFdmVudCwgSHR0cEhhbmRsZXIsIEh0dHBJbnRlcmNlcHRvciwgSHR0cFJlcXVlc3QgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCdcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJ1xyXG5pbXBvcnQgeyBBdXRoZW50aWNhdGlvblNlcnZpY2UgfSBmcm9tICcuLi8uLi8uLi9meC1zZWN1cml0eS9zZXJ2aWNlcy9hdXRoZW50aWNhdGlvbi5zZXJ2aWNlJ1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgSHR0cFRva2VuSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgYXV0aFNlcnZpY2U6IEF1dGhlbnRpY2F0aW9uU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcclxuICAgIGNvbnN0IGJlYXJlclRva2VuID0gdGhpcy5hdXRoU2VydmljZS5nZXRBdXRoVG9rZW5IZWFkZXJTdHJpbmcoKVxyXG4gICAgY29uc3QgaXNMb2dnZWRJbiA9IHRoaXMuYXV0aFNlcnZpY2UuaXNMb2dnZWRJblxyXG4gICAgbGV0IG5ld1JlcXVlc3QgPSByZXF1ZXN0XHJcbiAgICBpZiAoaXNMb2dnZWRJbiAmJiBiZWFyZXJUb2tlbiAmJiByZXF1ZXN0LnVybC5pbmRleE9mKCcuYXBwcy5lbWVhLnZ3YXBwcy5pbycpID4gLTEpIHtcclxuICAgICAgbGV0IHVybCA9IG5ld1JlcXVlc3QudXJsXHJcbiAgICAgIHVybCA9IHRoaXMucmVwbGFjZUh0dHBPclByZWZpeFVybFdpdGhIdHRwcyh1cmwpXHJcbiAgICAgIG5ld1JlcXVlc3QgPSByZXF1ZXN0LmNsb25lKHtcclxuICAgICAgICBzZXRIZWFkZXJzOiB7XHJcbiAgICAgICAgICBBdXRob3JpemF0aW9uOiBiZWFyZXJUb2tlbixcclxuICAgICAgICB9LFxyXG4gICAgICAgIHVybDogdXJsLFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKG5ld1JlcXVlc3QpXHJcbiAgfVxyXG5cclxuICBwcml2YXRlIHJlcGxhY2VIdHRwT3JQcmVmaXhVcmxXaXRoSHR0cHMob3JpZ2luYWxVcmw6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgICBsZXQgdXJsID0gb3JpZ2luYWxVcmxcclxuICAgIGlmICghdXJsLnN0YXJ0c1dpdGgoJ2h0dHBzJykpIHtcclxuICAgICAgaWYgKHVybC5zdGFydHNXaXRoKCdodHRwOicpKSB7XHJcbiAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoJ2h0dHA6JywgJ2h0dHBzOicpXHJcbiAgICAgIH0gZWxzZSBpZiAodXJsLnN0YXJ0c1dpdGgoJy8vJykpIHtcclxuICAgICAgICB1cmwgPSAnaHR0cHM6JyArIHVybFxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHVybCA9ICdodHRwczovLycgKyB1cmxcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVybFxyXG4gIH1cclxufVxyXG4iXX0=