/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Pipe } from '@angular/core';
import { TranslatePipe } from '@ngx-translate/core';
var TranslateWithPluralizationPipe = /** @class */ (function (_super) {
    tslib_1.__extends(TranslateWithPluralizationPipe, _super);
    function TranslateWithPluralizationPipe() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    TranslateWithPluralizationPipe.prototype.transform = /**
     * @param {?} query
     * @param {...?} args
     * @return {?}
     */
    function (query) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        /** @type {?} */
        var count = args[0]['count'];
        if (count !== null && count !== undefined) {
            if (count.toString() === '1') {
                query += '.singular';
            }
            else {
                query += '.plural';
            }
        }
        return _super.prototype.transform.call(this, query, args[0]);
    };
    TranslateWithPluralizationPipe.decorators = [
        { type: Pipe, args: [{ name: 'translateWithPluralization' },] }
    ];
    return TranslateWithPluralizationPipe;
}(TranslatePipe));
export { TranslateWithPluralizationPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhbnNsYXRlLXdpdGgtcGx1cmFsaXphdGlvbi5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZ4LWxpYi9jb21wb25lbnRzLyIsInNvdXJjZXMiOlsibGliL3NoYXJlZC9waXBlcy90cmFuc2xhdGUtd2l0aC1wbHVyYWxpemF0aW9uLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQTtBQUNuRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0scUJBQXFCLENBQUE7QUFFbkQ7SUFDb0QsMERBQWE7SUFEakU7O0lBZUEsQ0FBQzs7Ozs7O0lBWlEsa0RBQVM7Ozs7O0lBQWhCLFVBQWlCLEtBQVU7UUFBRSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLDZCQUFjOzs7WUFDbkMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7UUFDOUIsSUFBSSxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDekMsSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssR0FBRyxFQUFFO2dCQUM1QixLQUFLLElBQUksV0FBVyxDQUFBO2FBQ3JCO2lCQUFNO2dCQUNMLEtBQUssSUFBSSxTQUFTLENBQUE7YUFDbkI7U0FDRjtRQUNELE9BQU8saUJBQU0sU0FBUyxZQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUN4QyxDQUFDOztnQkFiRixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsNEJBQTRCLEVBQUM7O0lBZTFDLHFDQUFDO0NBQUEsQUFmRCxDQUNvRCxhQUFhLEdBY2hFO1NBZFksOEJBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IFRyYW5zbGF0ZVBpcGUgfSBmcm9tICdAbmd4LXRyYW5zbGF0ZS9jb3JlJ1xyXG5cclxuQFBpcGUoe25hbWU6ICd0cmFuc2xhdGVXaXRoUGx1cmFsaXphdGlvbid9KVxyXG5leHBvcnQgY2xhc3MgVHJhbnNsYXRlV2l0aFBsdXJhbGl6YXRpb25QaXBlIGV4dGVuZHMgVHJhbnNsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICBwdWJsaWMgdHJhbnNmb3JtKHF1ZXJ5OiBhbnksIC4uLmFyZ3M6IGFueVtdKTogYW55IHtcclxuICAgIGNvbnN0IGNvdW50ID0gYXJnc1swXVsnY291bnQnXVxyXG4gICAgaWYgKGNvdW50ICE9PSBudWxsICYmIGNvdW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgaWYgKGNvdW50LnRvU3RyaW5nKCkgPT09ICcxJykge1xyXG4gICAgICAgIHF1ZXJ5ICs9ICcuc2luZ3VsYXInXHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcXVlcnkgKz0gJy5wbHVyYWwnXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBzdXBlci50cmFuc2Zvcm0ocXVlcnksIGFyZ3NbMF0pXHJcbiAgfVxyXG5cclxufVxyXG4iXX0=