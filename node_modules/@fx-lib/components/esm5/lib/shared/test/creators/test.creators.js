/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @template T
 * @param {?} clazz
 * @return {?}
 */
export function getAllFunctionNames(clazz) {
    if (typeof clazz === 'function') {
        clazz = clazz.prototype;
    }
    /** @type {?} */
    var foundedFunctionNames = Reflect.ownKeys(clazz);
    /** @type {?} */
    var parentClass = Object.getPrototypeOf(clazz);
    if (!!parentClass && parentClass.constructor.name !== 'Object') {
        foundedFunctionNames = tslib_1.__spread(foundedFunctionNames, getAllFunctionNames(parentClass));
    }
    return foundedFunctionNames;
}
/** @type {?} */
var createSpyObjWithFunctionArray = (/**
 * @template K, T
 * @param {?} originalFunctions
 * @return {?}
 */
function (originalFunctions) {
    var e_1, _a, _b, _c;
    /** @type {?} */
    var spyObject = {};
    try {
        for (var originalFunctions_1 = tslib_1.__values(originalFunctions), originalFunctions_1_1 = originalFunctions_1.next(); !originalFunctions_1_1.done; originalFunctions_1_1 = originalFunctions_1.next()) {
            var originalFunction = originalFunctions_1_1.value;
            if (!!((/** @type {?} */ (originalFunction))).originalFnName) {
                /** @type {?} */
                var jestFunction = (/** @type {?} */ (originalFunction));
                spyObject = tslib_1.__assign({}, spyObject, (_b = {}, _b[jestFunction.originalFnName] = !!jestFunction.mockFunction ? jest.fn(jestFunction.mockFunction) : jest.fn(), _b));
            }
            else {
                spyObject = tslib_1.__assign({}, spyObject, (_c = {}, _c[originalFunction] = jest.fn(), _c));
            }
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (originalFunctions_1_1 && !originalFunctions_1_1.done && (_a = originalFunctions_1.return)) _a.call(originalFunctions_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return (/** @type {?} */ (spyObject));
});
var ɵ0 = createSpyObjWithFunctionArray;
/** @type {?} */
export var createSpyObjFromClass = (/**
 * @template K, T
 * @param {?} clazz
 * @param {...?} originalFunctions
 * @return {?}
 */
function (clazz) {
    var originalFunctions = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        originalFunctions[_i - 1] = arguments[_i];
    }
    /** @type {?} */
    var functionNames = getAllFunctionNames(clazz).sort();
    if (functionNames && functionNames.length > 0) {
        /** @type {?} */
        var functions = (/** @type {?} */ (functionNames.filter((/**
         * @param {?} functionName
         * @return {?}
         */
        function (functionName) { return functionName !== 'constructor'; }))));
        if (originalFunctions && originalFunctions.length > 0) {
            functions = tslib_1.__spread(functions.filter((/**
             * @param {?} functionName
             * @return {?}
             */
            function (functionName) { return originalFunctions.find((/**
             * @param {?} original
             * @return {?}
             */
            function (original) { return original.originalFnName === functionName; })) === undefined; })), originalFunctions);
        }
        return createSpyObjWithFunctionArray(functions);
    }
    return null;
});
/** @type {?} */
export var createSpyObj = (/**
 * @template K, T
 * @param {...?} originalFunctions
 * @return {?}
 */
function () {
    var originalFunctions = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        originalFunctions[_i] = arguments[_i];
    }
    return createSpyObjWithFunctionArray(originalFunctions);
});
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVzdC5jcmVhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmeC1saWIvY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbImxpYi9zaGFyZWQvdGVzdC9jcmVhdG9ycy90ZXN0LmNyZWF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFJQSxNQUFNLFVBQVUsbUJBQW1CLENBQXNCLEtBQVE7SUFDL0QsSUFBSSxPQUFPLEtBQUssS0FBSyxVQUFVLEVBQUU7UUFDL0IsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUE7S0FDeEI7O1FBQ0csb0JBQW9CLEdBQWtCLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDOztRQUMxRCxXQUFXLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDaEQsSUFBSSxDQUFDLENBQUMsV0FBVyxJQUFJLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM5RCxvQkFBb0Isb0JBQU8sb0JBQW9CLEVBQUssbUJBQW1CLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQTtLQUN0RjtJQUNELE9BQU8sb0JBQW9CLENBQUE7QUFDN0IsQ0FBQzs7SUFFSyw2QkFBNkI7Ozs7O0FBQUcsVUFBeUIsaUJBQXlDOzs7UUFDbEcsU0FBUyxHQUFHLEVBQUU7O1FBRWxCLEtBQStCLElBQUEsc0JBQUEsaUJBQUEsaUJBQWlCLENBQUEsb0RBQUEsbUZBQUU7WUFBN0MsSUFBTSxnQkFBZ0IsOEJBQUE7WUFDekIsSUFBSSxDQUFDLENBQUMsQ0FBQyxtQkFBQSxnQkFBZ0IsRUFBZ0IsQ0FBQyxDQUFDLGNBQWMsRUFBRTs7b0JBQ2pELFlBQVksR0FBRyxtQkFBQSxnQkFBZ0IsRUFBZ0I7Z0JBQ3JELFNBQVMsd0JBQ0osU0FBUyxlQUVYLFlBQVksQ0FBQyxjQUFjLElBQUcsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQzVHLENBQUE7YUFDRjtpQkFBTTtnQkFDTCxTQUFTLHdCQUNKLFNBQVMsZUFFWCxnQkFBZ0IsSUFBRyxJQUFJLENBQUMsRUFBRSxFQUFFLE1BQzlCLENBQUE7YUFDRjtTQUNGOzs7Ozs7Ozs7SUFDRCxPQUFPLG1CQUFBLFNBQVMsRUFBTyxDQUFBO0FBQ3pCLENBQUMsQ0FBQTs7O0FBRUQsTUFBTSxLQUFPLHFCQUFxQjs7Ozs7O0FBQUcsVUFBeUIsS0FBUTtJQUFFLDJCQUFvQztTQUFwQyxVQUFvQyxFQUFwQyxxQkFBb0MsRUFBcEMsSUFBb0M7UUFBcEMsMENBQW9DOzs7UUFDcEcsYUFBYSxHQUFHLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksRUFBRTtJQUN2RCxJQUFJLGFBQWEsSUFBSSxhQUFhLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTs7WUFDekMsU0FBUyxHQUEyQixtQkFBQSxhQUFhLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsWUFBWSxJQUFJLE9BQUEsWUFBWSxLQUFLLGFBQWEsRUFBOUIsQ0FBOEIsRUFBQyxFQUFZO1FBQ3hILElBQUksaUJBQWlCLElBQUksaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNyRCxTQUFTLG9CQUVGLFNBQVMsQ0FBQyxNQUFNOzs7O1lBQUMsVUFBQSxZQUFZLElBQUksT0FBQSxpQkFBaUIsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxRQUFRLElBQUksT0FBQSxRQUFRLENBQUMsY0FBYyxLQUFLLFlBQVksRUFBeEMsQ0FBd0MsRUFBQyxLQUFLLFNBQVMsRUFBMUYsQ0FBMEYsRUFBQyxFQUM1SCxpQkFBaUIsQ0FDckIsQ0FBQTtTQUNKO1FBRUQsT0FBTyw2QkFBNkIsQ0FBTyxTQUFTLENBQUMsQ0FBQTtLQUN0RDtJQUNELE9BQU8sSUFBSSxDQUFBO0FBQ2IsQ0FBQyxDQUFBOztBQUVELE1BQU0sS0FBTyxZQUFZOzs7OztBQUFHO0lBQXlCLDJCQUE0QztTQUE1QyxVQUE0QyxFQUE1QyxxQkFBNEMsRUFBNUMsSUFBNEM7UUFBNUMsc0NBQTRDOztJQUMvRixPQUFPLDZCQUE2QixDQUFPLGlCQUFpQixDQUFDLENBQUE7QUFDL0QsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXHJcbmltcG9ydCB7IEplc3RPcmlnaW5hbEZ1bmN0aW9uIH0gZnJvbSAnLi4vLi4vLi4vc2hhcmVkL3R5cGVzL2plc3QudHlwZXMnXHJcbmltcG9ydCB7IEplc3RFeHRlbmRlZCwgSmVzdFNweU9iamVjdCB9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMvamVzdC1leHRlbmRlZCdcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBbGxGdW5jdGlvbk5hbWVzPFQgZXh0ZW5kcyBUeXBlPGFueT4+KGNsYXp6OiBUKTogUHJvcGVydHlLZXlbXSB7XHJcbiAgaWYgKHR5cGVvZiBjbGF6eiA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgY2xhenogPSBjbGF6ei5wcm90b3R5cGVcclxuICB9XHJcbiAgbGV0IGZvdW5kZWRGdW5jdGlvbk5hbWVzOiBQcm9wZXJ0eUtleVtdID0gUmVmbGVjdC5vd25LZXlzKGNsYXp6KVxyXG4gIGNvbnN0IHBhcmVudENsYXNzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKGNsYXp6KVxyXG4gIGlmICghIXBhcmVudENsYXNzICYmIHBhcmVudENsYXNzLmNvbnN0cnVjdG9yLm5hbWUgIT09ICdPYmplY3QnKSB7XHJcbiAgICBmb3VuZGVkRnVuY3Rpb25OYW1lcyA9IFsuLi5mb3VuZGVkRnVuY3Rpb25OYW1lcywgLi4uZ2V0QWxsRnVuY3Rpb25OYW1lcyhwYXJlbnRDbGFzcyldXHJcbiAgfVxyXG4gIHJldHVybiBmb3VuZGVkRnVuY3Rpb25OYW1lc1xyXG59XHJcblxyXG5jb25zdCBjcmVhdGVTcHlPYmpXaXRoRnVuY3Rpb25BcnJheSA9IDxLLCBUIGV4dGVuZHMgVHlwZTxhbnk+PihvcmlnaW5hbEZ1bmN0aW9uczogSmVzdE9yaWdpbmFsRnVuY3Rpb25bXSk6IEplc3RTcHlPYmplY3Q8Sz4gPT4ge1xyXG4gIGxldCBzcHlPYmplY3QgPSB7fVxyXG5cclxuICBmb3IgKGNvbnN0IG9yaWdpbmFsRnVuY3Rpb24gb2Ygb3JpZ2luYWxGdW5jdGlvbnMpIHtcclxuICAgIGlmICghIShvcmlnaW5hbEZ1bmN0aW9uIGFzIEplc3RFeHRlbmRlZCkub3JpZ2luYWxGbk5hbWUpIHtcclxuICAgICAgY29uc3QgamVzdEZ1bmN0aW9uID0gb3JpZ2luYWxGdW5jdGlvbiBhcyBKZXN0RXh0ZW5kZWRcclxuICAgICAgc3B5T2JqZWN0ID0ge1xyXG4gICAgICAgIC4uLnNweU9iamVjdCxcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgW2plc3RGdW5jdGlvbi5vcmlnaW5hbEZuTmFtZV06ICEhamVzdEZ1bmN0aW9uLm1vY2tGdW5jdGlvbiA/IGplc3QuZm4oamVzdEZ1bmN0aW9uLm1vY2tGdW5jdGlvbikgOiBqZXN0LmZuKCksXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHNweU9iamVjdCA9IHtcclxuICAgICAgICAuLi5zcHlPYmplY3QsXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIFtvcmlnaW5hbEZ1bmN0aW9uXTogamVzdC5mbigpLFxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBzcHlPYmplY3QgYXMgYW55XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVTcHlPYmpGcm9tQ2xhc3MgPSA8SywgVCBleHRlbmRzIFR5cGU8YW55Pj4oY2xheno6IFQsIC4uLm9yaWdpbmFsRnVuY3Rpb25zOiBKZXN0RXh0ZW5kZWRbXSk6IEplc3RTcHlPYmplY3Q8Sz4gPT4ge1xyXG4gIGNvbnN0IGZ1bmN0aW9uTmFtZXMgPSBnZXRBbGxGdW5jdGlvbk5hbWVzKGNsYXp6KS5zb3J0KClcclxuICBpZiAoZnVuY3Rpb25OYW1lcyAmJiBmdW5jdGlvbk5hbWVzLmxlbmd0aCA+IDApIHtcclxuICAgIGxldCBmdW5jdGlvbnM6IEplc3RPcmlnaW5hbEZ1bmN0aW9uW10gPSBmdW5jdGlvbk5hbWVzLmZpbHRlcihmdW5jdGlvbk5hbWUgPT4gZnVuY3Rpb25OYW1lICE9PSAnY29uc3RydWN0b3InKSBhcyBzdHJpbmdbXVxyXG4gICAgaWYgKG9yaWdpbmFsRnVuY3Rpb25zICYmIG9yaWdpbmFsRnVuY3Rpb25zLmxlbmd0aCA+IDApIHtcclxuICAgICAgZnVuY3Rpb25zID1cclxuICAgICAgICBbXHJcbiAgICAgICAgICAuLi5mdW5jdGlvbnMuZmlsdGVyKGZ1bmN0aW9uTmFtZSA9PiBvcmlnaW5hbEZ1bmN0aW9ucy5maW5kKG9yaWdpbmFsID0+IG9yaWdpbmFsLm9yaWdpbmFsRm5OYW1lID09PSBmdW5jdGlvbk5hbWUpID09PSB1bmRlZmluZWQpLFxyXG4gICAgICAgICAgLi4ub3JpZ2luYWxGdW5jdGlvbnMsXHJcbiAgICAgICAgXVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjcmVhdGVTcHlPYmpXaXRoRnVuY3Rpb25BcnJheTxLLCBUPihmdW5jdGlvbnMpXHJcbiAgfVxyXG4gIHJldHVybiBudWxsXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVTcHlPYmogPSA8SywgVCBleHRlbmRzIFR5cGU8YW55Pj4oLi4ub3JpZ2luYWxGdW5jdGlvbnM6IEplc3RPcmlnaW5hbEZ1bmN0aW9uW10pOiBKZXN0U3B5T2JqZWN0PEs+ID0+IHtcclxuICByZXR1cm4gY3JlYXRlU3B5T2JqV2l0aEZ1bmN0aW9uQXJyYXk8SywgVD4ob3JpZ2luYWxGdW5jdGlvbnMpXHJcbn1cclxuIl19