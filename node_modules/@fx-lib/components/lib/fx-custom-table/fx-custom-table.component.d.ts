import { ElementRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { DataTableColumnDirective, DatatableComponent, SortType } from '@swimlane/ngx-datatable';
import { ClipboardService } from 'ngx-clipboard';
import { ContextMenuComponent } from 'ngx-contextmenu';
import { NgxUiLoaderService } from 'ngx-ui-loader';
import { PositionType, SpinnerType } from 'ngx-ui-loader/lib/utils/types';
import { Subject } from 'rxjs';
import { FxNotificationService } from '../fx-notification/fx-notification.service';
import { DatatableColumn, DatatableColumnBorder, DatatableColumnTooltip } from '../shared/interfaces/datatable-column';
import { DatatableRowDetail } from '../shared/interfaces/datatable-row-detail';
import { PageInfo } from '../shared/interfaces/page-info';
import { ScrollInfo } from '../shared/interfaces/scroll-info';
import { SortInfo } from '../shared/interfaces/sort-info';
export declare class FxCustomTableComponent implements OnInit, OnChanges, OnDestroy {
    private clipboardService;
    private elRef;
    private ngxUiLoaderService;
    private notificationService;
    private translate;
    defaultCellTemplate: TemplateRef<any>;
    defaultHeaderTemplate: TemplateRef<any>;
    datatable: DatatableComponent;
    debugContextMenu: ContextMenuComponent;
    selectableContextMenu: ContextMenuComponent;
    loading: number | boolean;
    columnMode: string;
    showLoader: boolean;
    loadingId: string;
    hasProgressBar: boolean;
    foregroundColor: string;
    overlayColor: string;
    loadingType: SpinnerType;
    loadingPosition: PositionType;
    loaderSize: number;
    columns: DatatableColumn[];
    messagesEmptyMessage: string;
    messagesTotalMessage: string;
    messagesSelectedMessage: string;
    count: number;
    offset: number;
    limit: number | undefined;
    headerHeight: number | 'auto';
    rows: any[];
    externalPagingLoadedPage: number;
    footerHeight: number;
    rowHeight: number;
    rowClassCallback: (row: any) => {
        [key: string]: boolean;
    };
    rowHeightCallback: (row: any, index: any) => number;
    externalPaging: boolean;
    externalSorting: boolean;
    sorts: any[];
    sortType: SortType;
    scrollbarH: boolean;
    scrollbarV: boolean;
    preloadNextPage: boolean;
    preloadPrevPage: boolean;
    rowDetail: DatatableRowDetail;
    isDebugContextMenuVisible: boolean;
    loadingPageDebounceTimeInMilliseconds: number;
    pageCallback: EventEmitter<PageInfo>;
    sortCallback: EventEmitter<SortInfo>;
    scrollCallback: EventEmitter<ScrollInfo>;
    selectRowCallback: EventEmitter<{
        row: any;
        column: any;
    }>;
    tableRows: any[];
    originalColumns: DatatableColumn[];
    loadedEntries: number;
    pageInfo: PageInfo;
    fetchDataDebouncer: Subject<PageInfo>;
    private loadingPages;
    private subscriptions;
    constructor(clipboardService: ClipboardService, elRef: ElementRef, ngxUiLoaderService: NgxUiLoaderService, notificationService: FxNotificationService, translate: TranslateService);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    getFilteredColumns(originalColumns: DatatableColumn[], expectedFoldState?: boolean): DatatableColumn[];
    selectRow(row: any, column: DatatableColumn): void;
    getStaticTooltip(tooltip: DatatableColumnTooltip | DatatableColumnTooltip[], row?: any): string | undefined;
    getRowTooltip(noTextOverflow: boolean, dataColumn: DatatableColumn, row: any, value: any): string;
    isTooltipDisabled(divElement: HTMLDivElement, row: any, dataColumn: DatatableColumn): boolean;
    getBorderClass(border: DatatableColumnBorder): string[];
    getCellStyleClasses(baseClass: string | ((data: any) => string | any), data: any): string[];
    getCellClasses(dataColumn: DatatableColumn): string;
    getHeaderClasses(dataColumn: DatatableColumn): string;
    trimString(value: any): string | any;
    goToFirstPage(): void;
    emitScrollCallback(scrollInfo: ScrollInfo): void;
    emitPageCallback(pageInfo: PageInfo, indexes: {
        first: number;
        last: number;
    }): void;
    copyLoadedValuesToClipboard(columnData: DataTableColumnDirective): void;
    copyValueToClipboard(value: string): void;
    evaluateFormat(format: any, value: any): any;
    handleColumnFolding(datatableColumn: DatatableColumn): void;
    handleInitialColumnFolding(): void;
    private setFoldStateForColumns;
    private getNewData;
    private getNextPage;
    private isAllDataFilled;
    private handleLoading;
}
