import { Observable, Subject } from 'rxjs';
export interface ITranslateServiceMock {
    onTranslationChange: Observable<any>;
    onLangChange: Observable<any>;
    onDefaultLangChange: Observable<any>;
    get(key: string | Array<string>, param?: Object): Observable<any>;
    instant(key: string): any;
    getBrowserLang(): string;
    getBrowserCultureLang(): string;
    getTranslation(lang: string): Observable<any>;
}
export interface ITranslateServiceMockConfig {
    browserCulterLang?: string;
    currentLang?: string;
    translation?: {
        [key: string]: any;
    };
    translations?: {
        [key: string]: any;
    };
}
export declare class TranslateServiceMockImpl implements ITranslateServiceMock {
    private _config;
    onDefaultLangChange: Observable<any>;
    onLangChange: Subject<any>;
    onTranslationChange: Observable<any>;
    readonly currentLang: string;
    constructor(_config: ITranslateServiceMockConfig);
    get(key: string | Array<string>, param?: Object): Observable<any>;
    switchLanguage(language: any): void;
    getBrowserCultureLang(): string;
    getBrowserLang(): string;
    getTranslation(lang: string): Observable<any>;
    instant(key: string): any;
}
export declare const translateServiceMock: TranslateServiceMockImpl;
export declare function createTranslateServiceMock(config: ITranslateServiceMockConfig): ITranslateServiceMock;
