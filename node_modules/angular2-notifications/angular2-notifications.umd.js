(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('rxjs'), require('@angular/animations'), require('@angular/platform-browser')) :
	typeof define === 'function' && define.amd ? define(['exports', '@angular/core', '@angular/common', 'rxjs', '@angular/animations', '@angular/platform-browser'], factory) :
	(factory((global['angular2-notifications'] = {}),global.core,global.common,global.rxjs,global.animations,global.platformBrowser));
}(this, (function (exports,core,common,rxjs,animations,platformBrowser) { 'use strict';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_ICONS = {
    alert: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#ffffff\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            <path d=\"M22 5.72l-4.6-3.86-1.29 1.53 4.6 3.86L22 5.72zM7.88 3.39L6.6 1.86 2 5.71l1.29 1.53 4.59-3.85zM12.5 8H11v6l4.75 2.85.75-1.23-4-2.37V8zM12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9c4.97 0 9-4.03 9-9s-4.03-9-9-9zm0 16c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\"/>\n        </svg>\n    ",
    error: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#ffffff\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n            <path d=\"M11 15h2v2h-2zm0-8h2v6h-2zm.99-5C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/>\n        </svg>\n    ",
    info: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#ffffff\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            <path d=\"M11 17h2v-6h-2v6zm1-15C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zM11 9h2V7h-2v2z\"/>\n        </svg>\n    ",
    success: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#ffffff\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n            <path d=\"M9 16.2L4.8 12l-1.4 1.4L9 19 21 7l-1.4-1.4L9 16.2z\"/>\n        </svg>\n    ",
    warn: "\n        <svg class=\"simple-notification-svg\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"#ffffff\" width=\"64\" viewBox=\"0 0 64 64\" height=\"64\">\n          <circle cx=\"32.086\" cy=\"50.142\" r=\"2.256\"/>\n          <path d=\"M30.08 25.012V42.32c0 1.107.897 2.005 2.006 2.005s2.006-.897 2.006-2.005V25.012c0-1.107-.897-2.006-2.006-2.006s-2.006.898-2.006 2.006z\"/>\n          <path d=\"M63.766 59.234L33.856 3.082c-.697-1.308-2.844-1.308-3.54 0L.407 59.234c-.331.622-.312 1.372.051 1.975.362.605 1.015.975 1.72.975h59.816c.705 0 1.357-.369 1.721-.975.361-.603.381-1.353.051-1.975zM5.519 58.172L32.086 8.291l26.568 49.881H5.519z\"/>\n        </svg>\n    "
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
var NotificationType = {
    Success: 'success',
    Error: 'error',
    Alert: 'alert',
    Info: 'info',
    Warn: 'warn',
    Bare: 'bare',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NotificationsService = /** @class */ (function () {
    function NotificationsService(globalOptions) {
        this.globalOptions = globalOptions;
        this.emitter = new rxjs.Subject();
        this.icons = DEFAULT_ICONS;
    }
    /**
     * @param {?} notification
     * @param {?} to
     * @return {?}
     */
    NotificationsService.prototype.set = /**
     * @param {?} notification
     * @param {?} to
     * @return {?}
     */
    function (notification, to) {
        notification.id = notification.override && notification.override.id ? notification.override.id : Math.random().toString(36).substring(3);
        notification.click = new core.EventEmitter();
        notification.clickIcon = new core.EventEmitter();
        notification.timeoutEnd = new core.EventEmitter();
        this.emitter.next({ command: 'set', notification: notification, add: to });
        return notification;
    };
    
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.success = /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        return this.set({ title: title, content: content || '', type: NotificationType.Success, icon: this.icons.success, override: override }, true);
    };
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.error = /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        return this.set({ title: title, content: content || '', type: NotificationType.Error, icon: this.icons.error, override: override }, true);
    };
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.alert = /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        return this.set({ title: title, content: content || '', type: NotificationType.Alert, icon: this.icons.alert, override: override }, true);
    };
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.info = /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        return this.set({ title: title, content: content || '', type: NotificationType.Info, icon: this.icons.info, override: override }, true);
    };
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.warn = /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        return this.set({ title: title, content: content || '', type: NotificationType.Warn, icon: this.icons.warn, override: override }, true);
    };
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.bare = /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} override
     * @return {?}
     */
    function (title, content, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        return this.set({ title: title, content: content || '', type: NotificationType.Bare, icon: 'bare', override: override }, true);
    };
    // With type method
    // With type method
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} type
     * @param {?=} override
     * @return {?}
     */
    NotificationsService.prototype.create = 
    // With type method
    /**
     * @param {?=} title
     * @param {?=} content
     * @param {?=} type
     * @param {?=} override
     * @return {?}
     */
    function (title, content, type, override) {
        if (title === void 0) { title = ''; }
        if (content === void 0) { content = ''; }
        if (type === void 0) { type = NotificationType.Success; }
        return this.set({ title: title, content: content, type: type, icon: ((/** @type {?} */ (this.icons)))[type], override: override }, true);
    };
    // HTML Notification method
    // HTML Notification method
    /**
     * @param {?} html
     * @param {?=} type
     * @param {?=} override
     * @param {?=} icon
     * @return {?}
     */
    NotificationsService.prototype.html = 
    // HTML Notification method
    /**
     * @param {?} html
     * @param {?=} type
     * @param {?=} override
     * @param {?=} icon
     * @return {?}
     */
    function (html, type, override, icon) {
        if (type === void 0) { type = NotificationType.Success; }
        if (icon === void 0) { icon = 'bare'; }
        return this.set({ html: html, type: type, icon: ((/** @type {?} */ (this.icons)))[icon], override: override }, true);
    };
    // Remove all notifications method
    // Remove all notifications method
    /**
     * @param {?=} id
     * @return {?}
     */
    NotificationsService.prototype.remove = 
    // Remove all notifications method
    /**
     * @param {?=} id
     * @return {?}
     */
    function (id) {
        if (id) {
            this.emitter.next({ command: 'clean', id: id });
        }
        else {
            this.emitter.next({ command: 'cleanAll' });
        }
    };
    NotificationsService.decorators = [
        { type: core.Injectable }
    ];
    /** @nocollapse */
    NotificationsService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: core.Inject, args: ['options',] }] }
    ]; };
    return NotificationsService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
var NotificationAnimationType = {
    Fade: 'fade',
    FromTop: 'fromTop',
    FromRight: 'fromRight',
    FromBottom: 'fromBottom',
    FromLeft: 'fromLeft',
    Scale: 'scale',
    Rotate: 'rotate',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var SimpleNotificationsComponent = /** @class */ (function () {
    function SimpleNotificationsComponent(service, cdr) {
        this.service = service;
        this.cdr = cdr;
        this.onCreate = new core.EventEmitter();
        this.onDestroy = new core.EventEmitter();
        this.notifications = [];
        this.position = ['bottom', 'right'];
        // Received values
        this.lastOnBottom = true;
        this.maxStack = 8;
        this.preventLastDuplicates = false;
        this.preventDuplicates = false;
        // Sent values
        this.timeOut = 0;
        this.maxLength = 0;
        this.clickToClose = true;
        this.clickIconToClose = false;
        this.showProgressBar = true;
        this.pauseOnHover = true;
        this.theClass = '';
        this.rtl = false;
        this.animate = NotificationAnimationType.FromRight;
        this._usingComponentOptions = false;
    }
    Object.defineProperty(SimpleNotificationsComponent.prototype, "options", {
        set: /**
         * @param {?} opt
         * @return {?}
         */
        function (opt) {
            this._usingComponentOptions = true;
            this.attachChanges(opt);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /**
         * Only attach global options if config
         * options were never sent through input
         */
        if (!this._usingComponentOptions) {
            this.attachChanges(this.service.globalOptions);
        }
        this.listener = this.service.emitter
            .subscribe(function (item) {
            switch (item.command) {
                case 'cleanAll':
                    _this.notifications = [];
                    break;
                case 'clean':
                    _this.cleanSingle((/** @type {?} */ (item.id)));
                    break;
                case 'set':
                    if (item.add) {
                        _this.add((/** @type {?} */ (item.notification)));
                    }
                    else {
                        _this.defaultBehavior(item);
                    }
                    break;
                default:
                    _this.defaultBehavior(item);
                    break;
            }
            if (!_this.cdr['destroyed']) {
                _this.cdr.detectChanges();
            }
        });
    };
    /**
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.listener) {
            this.listener.unsubscribe();
        }
        this.cdr.detach();
    };
    // Default behavior on event
    // Default behavior on event
    /**
     * @param {?} value
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.defaultBehavior = 
    // Default behavior on event
    /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.notifications.splice(this.notifications.indexOf(value.notification), 1);
        this.onDestroy.emit(this.buildEmit(value.notification, false));
    };
    // Add the new notification to the notification array
    // Add the new notification to the notification array
    /**
     * @param {?} item
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.add = 
    // Add the new notification to the notification array
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.createdOn = new Date();
        /** @type {?} */
        var toBlock = this.preventLastDuplicates || this.preventDuplicates ? this.block(item) : false;
        // Save this as the last created notification
        this.lastNotificationCreated = item;
        // Override icon if set
        if (item.override && item.override.icons && item.override.icons[item.type]) {
            item.icon = item.override.icons[item.type];
        }
        if (!toBlock) {
            // Check if the notification should be added at the start or the end of the array
            if (this.lastOnBottom) {
                if (this.notifications.length >= this.maxStack) {
                    this.notifications.splice(0, 1);
                }
                this.notifications.push(item);
            }
            else {
                if (this.notifications.length >= this.maxStack) {
                    this.notifications.splice(this.notifications.length - 1, 1);
                }
                this.notifications.splice(0, 0, item);
            }
            this.onCreate.emit(this.buildEmit(item, true));
        }
    };
    // Check if notifications should be prevented
    // Check if notifications should be prevented
    /**
     * @param {?} item
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.block = 
    // Check if notifications should be prevented
    /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var toCheck = item.html ? this.checkHtml : this.checkStandard;
        if (this.preventDuplicates && this.notifications.length > 0) {
            for (var i = 0; i < this.notifications.length; i++) {
                if (toCheck(this.notifications[i], item)) {
                    return true;
                }
            }
        }
        if (this.preventLastDuplicates) {
            /** @type {?} */
            var comp = void 0;
            if (this.preventLastDuplicates === 'visible' && this.notifications.length > 0) {
                if (this.lastOnBottom) {
                    comp = this.notifications[this.notifications.length - 1];
                }
                else {
                    comp = this.notifications[0];
                }
            }
            else if (this.preventLastDuplicates === 'all' && this.lastNotificationCreated) {
                comp = this.lastNotificationCreated;
            }
            else {
                return false;
            }
            return toCheck(comp, item);
        }
        return false;
    };
    /**
     * @param {?} checker
     * @param {?} item
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.checkStandard = /**
     * @param {?} checker
     * @param {?} item
     * @return {?}
     */
    function (checker, item) {
        return checker.type === item.type && checker.title === item.title && checker.content === item.content;
    };
    /**
     * @param {?} checker
     * @param {?} item
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.checkHtml = /**
     * @param {?} checker
     * @param {?} item
     * @return {?}
     */
    function (checker, item) {
        return checker.html ? checker.type === item.type && checker.title === item.title && checker.content === item.content && checker.html === item.html : false;
    };
    // Attach all the changes received in the options object
    // Attach all the changes received in the options object
    /**
     * @param {?} options
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.attachChanges = 
    // Attach all the changes received in the options object
    /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        for (var key in options) {
            if (this.hasOwnProperty(key)) {
                ((/** @type {?} */ (this)))[key] = options[key];
            }
            else if (key === 'icons') {
                this.service.icons = options[key];
            }
        }
    };
    /**
     * @param {?} notification
     * @param {?} to
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.buildEmit = /**
     * @param {?} notification
     * @param {?} to
     * @return {?}
     */
    function (notification, to) {
        /** @type {?} */
        var toEmit = {
            createdOn: notification.createdOn,
            type: notification.type,
            icon: notification.icon,
            id: notification.id
        };
        if (notification.html) {
            toEmit.html = notification.html;
        }
        else {
            toEmit.title = notification.title;
            toEmit.content = notification.content;
        }
        if (!to) {
            toEmit.destroyedOn = new Date();
        }
        return toEmit;
    };
    /**
     * @param {?} id
     * @return {?}
     */
    SimpleNotificationsComponent.prototype.cleanSingle = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var indexOfDelete = 0;
        /** @type {?} */
        var doDelete = false;
        /** @type {?} */
        var noti;
        this.notifications.forEach(function (notification, idx) {
            if (notification.id === id) {
                indexOfDelete = idx;
                noti = notification;
                doDelete = true;
            }
        });
        if (doDelete) {
            this.notifications.splice(indexOfDelete, 1);
            this.onDestroy.emit(this.buildEmit(noti, false));
        }
    };
    SimpleNotificationsComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'simple-notifications',
                    encapsulation: core.ViewEncapsulation.None,
                    template: "<div class=\"simple-notification-wrapper\" [ngClass]=\"position\">\r\n    <simple-notification\r\n            *ngFor=\"let a of notifications; let i = index\"\r\n            [item]=\"a\"\r\n            [timeOut]=\"timeOut\"\r\n            [clickToClose]=\"clickToClose\"\r\n            [clickIconToClose]=\"clickIconToClose\"\r\n            [maxLength]=\"maxLength\"\r\n            [showProgressBar]=\"showProgressBar\"\r\n            [pauseOnHover]=\"pauseOnHover\"\r\n            [theClass]=\"theClass\"\r\n            [rtl]=\"rtl\"\r\n            [animate]=\"animate\"\r\n            [position]=\"i\">\r\n    </simple-notification>\r\n</div>",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [".simple-notification-wrapper {\r\n    position: fixed;\r\n    width: 300px;\r\n    z-index: 1000;\r\n}\r\n\r\n.simple-notification-wrapper.left {\r\n    left: 20px;\r\n}\r\n\r\n.simple-notification-wrapper.top {\r\n    top: 20px;\r\n}\r\n\r\n.simple-notification-wrapper.right {\r\n    right: 20px;\r\n}\r\n\r\n.simple-notification-wrapper.bottom {\r\n    bottom: 20px;\r\n}\r\n\r\n.simple-notification-wrapper.center {\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n}\r\n\r\n.simple-notification-wrapper.middle {\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n}\r\n\r\n.simple-notification-wrapper.middle.center {\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n@media (max-width: 340px) {\r\n    .simple-notification-wrapper {\r\n        width: auto;\r\n        left: 20px;\r\n        right: 20px;\r\n    }\r\n}"]
                }] }
    ];
    /** @nocollapse */
    SimpleNotificationsComponent.ctorParameters = function () { return [
        { type: NotificationsService },
        { type: core.ChangeDetectorRef }
    ]; };
    SimpleNotificationsComponent.propDecorators = {
        options: [{ type: core.Input }],
        onCreate: [{ type: core.Output }],
        onDestroy: [{ type: core.Output }]
    };
    return SimpleNotificationsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
var NotificationComponent = /** @class */ (function () {
    function NotificationComponent(notificationService, domSanitizer, cdr, zone) {
        var _this = this;
        this.notificationService = notificationService;
        this.domSanitizer = domSanitizer;
        this.cdr = cdr;
        this.zone = zone;
        this.titleIsTemplate = false;
        this.contentIsTemplate = false;
        this.htmlIsTemplate = false;
        this.progressWidth = 0;
        this.stopTime = false;
        this.framesPerSecond = 40;
        this.instance = function () {
            /** @type {?} */
            var now = new Date().getTime();
            if (_this.endTime < now) {
                _this.remove();
                (/** @type {?} */ (_this.item.timeoutEnd)).emit();
            }
            else if (!_this.stopTime) {
                if (_this.showProgressBar) {
                    _this.progressWidth = Math.min((now - _this.startTime + _this.sleepTime /* We add this.sleepTime just to have 100% before close */) * 100 / _this.timeOut, 100);
                }
                _this.timer = setTimeout(_this.instance, _this.sleepTime);
            }
            _this.zone.run(function () {
                if (!_this.cdr['destroyed']) {
                    _this.cdr.detectChanges();
                }
            });
        };
    }
    /**
     * @return {?}
     */
    NotificationComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.item.override) {
            this.attachOverrides();
        }
        if (this.animate) {
            this.item.state = this.animate;
        }
        if (this.timeOut !== 0) {
            this.startTimeOut();
        }
        this.contentType(this.item.title, 'title');
        this.contentType(this.item.content, 'content');
        this.contentType(this.item.html, 'html');
        this.safeSvg = this.domSanitizer.bypassSecurityTrustHtml(this.icon || this.item.icon);
        this.safeInputHtml = this.domSanitizer.bypassSecurityTrustHtml(this.item.html);
    };
    /**
     * @return {?}
     */
    NotificationComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        clearTimeout(this.timer);
        this.cdr.detach();
    };
    /**
     * @return {?}
     */
    NotificationComponent.prototype.startTimeOut = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.sleepTime = 1000 / this.framesPerSecond /* ms */;
        this.startTime = new Date().getTime();
        this.endTime = this.startTime + this.timeOut;
        this.zone.runOutsideAngular(function () { return _this.timer = setTimeout(_this.instance, _this.sleepTime); });
    };
    /**
     * @return {?}
     */
    NotificationComponent.prototype.onEnter = /**
     * @return {?}
     */
    function () {
        if (this.pauseOnHover) {
            this.stopTime = true;
        }
    };
    /**
     * @return {?}
     */
    NotificationComponent.prototype.onLeave = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.pauseOnHover) {
            this.stopTime = false;
            this.zone.runOutsideAngular(function () { return setTimeout(_this.instance, _this.sleepTime); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NotificationComponent.prototype.onClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        (/** @type {?} */ (this.item.click)).emit(event);
        if (this.clickToClose) {
            this.remove();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NotificationComponent.prototype.onClickIcon = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        (/** @type {?} */ (this.item.clickIcon)).emit(event);
        if (this.clickIconToClose) {
            this.remove();
        }
    };
    // Attach all the overrides
    // Attach all the overrides
    /**
     * @return {?}
     */
    NotificationComponent.prototype.attachOverrides = 
    // Attach all the overrides
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        Object.keys(this.item.override).forEach(function (a) {
            if (_this.hasOwnProperty(a)) {
                ((/** @type {?} */ (_this)))[a] = _this.item.override[a];
            }
        });
    };
    /**
     * @return {?}
     */
    NotificationComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.animate) {
            this.item.state = this.animate + 'Out';
            setTimeout(function () {
                _this.notificationService.set(_this.item, false);
            }, 310);
        }
        else {
            this.notificationService.set(this.item, false);
        }
    };
    /**
     * @param {?} item
     * @param {?} key
     * @return {?}
     */
    NotificationComponent.prototype.contentType = /**
     * @param {?} item
     * @param {?} key
     * @return {?}
     */
    function (item, key) {
        if (item instanceof core.TemplateRef) {
            this[key] = item;
        }
        else {
            this[key] = this.domSanitizer.bypassSecurityTrustHtml(item);
        }
        this[key + 'IsTemplate'] = item instanceof core.TemplateRef;
    };
    NotificationComponent.decorators = [
        { type: core.Component, args: [{
                    selector: 'simple-notification',
                    encapsulation: core.ViewEncapsulation.None,
                    animations: [
                        animations.trigger('enterLeave', [
                            // Fade
                            animations.state('fade', animations.style({ opacity: 1 })),
                            animations.transition('* => fade', [
                                animations.style({ opacity: 0 }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('fadeOut', animations.style({ opacity: 0 })),
                            animations.transition('fade => fadeOut', [
                                animations.style({ opacity: 1 }),
                                animations.animate('300ms ease-in-out')
                            ]),
                            // Enter from top
                            animations.state('fromTop', animations.style({ opacity: 1, transform: 'translateY(0)' })),
                            animations.transition('* => fromTop', [
                                animations.style({ opacity: 0, transform: 'translateY(-5%)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('fromTopOut', animations.style({ opacity: 0, transform: 'translateY(5%)' })),
                            animations.transition('fromTop => fromTopOut', [
                                animations.style({ opacity: 1, transform: 'translateY(0)' }),
                                animations.animate('300ms ease-in-out')
                            ]),
                            // Enter from right
                            animations.state('fromRight', animations.style({ opacity: 1, transform: 'translateX(0)' })),
                            animations.transition('* => fromRight', [
                                animations.style({ opacity: 0, transform: 'translateX(5%)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('fromRightOut', animations.style({ opacity: 0, transform: 'translateX(-5%)' })),
                            animations.transition('fromRight => fromRightOut', [
                                animations.style({ opacity: 1, transform: 'translateX(0)' }),
                                animations.animate('300ms ease-in-out')
                            ]),
                            // Enter from bottom
                            animations.state('fromBottom', animations.style({ opacity: 1, transform: 'translateY(0)' })),
                            animations.transition('* => fromBottom', [
                                animations.style({ opacity: 0, transform: 'translateY(5%)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('fromBottomOut', animations.style({ opacity: 0, transform: 'translateY(-5%)' })),
                            animations.transition('fromBottom => fromBottomOut', [
                                animations.style({ opacity: 1, transform: 'translateY(0)' }),
                                animations.animate('300ms ease-in-out')
                            ]),
                            // Enter from left
                            animations.state('fromLeft', animations.style({ opacity: 1, transform: 'translateX(0)' })),
                            animations.transition('* => fromLeft', [
                                animations.style({ opacity: 0, transform: 'translateX(-5%)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('fromLeftOut', animations.style({ opacity: 0, transform: 'translateX(5%)' })),
                            animations.transition('fromLeft => fromLeftOut', [
                                animations.style({ opacity: 1, transform: 'translateX(0)' }),
                                animations.animate('300ms ease-in-out')
                            ]),
                            // Rotate
                            animations.state('scale', animations.style({ opacity: 1, transform: 'scale(1)' })),
                            animations.transition('* => scale', [
                                animations.style({ opacity: 0, transform: 'scale(0)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('scaleOut', animations.style({ opacity: 0, transform: 'scale(0)' })),
                            animations.transition('scale => scaleOut', [
                                animations.style({ opacity: 1, transform: 'scale(1)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            // Scale
                            animations.state('rotate', animations.style({ opacity: 1, transform: 'rotate(0deg)' })),
                            animations.transition('* => rotate', [
                                animations.style({ opacity: 0, transform: 'rotate(5deg)' }),
                                animations.animate('400ms ease-in-out')
                            ]),
                            animations.state('rotateOut', animations.style({ opacity: 0, transform: 'rotate(-5deg)' })),
                            animations.transition('rotate => rotateOut', [
                                animations.style({ opacity: 1, transform: 'rotate(0deg)' }),
                                animations.animate('400ms ease-in-out')
                            ])
                        ])
                    ],
                    template: "<div class=\"simple-notification\"\r\n     [@enterLeave]=\"item.state\"\r\n     (click)=\"onClick($event)\"\r\n     [class]=\"theClass\"\r\n     [ngClass]=\"{\r\n            'alert': item.type === 'alert',\r\n            'error': item.type === 'error',\r\n            'warn': item.type === 'warn',\r\n            'success': item.type === 'success',\r\n            'info': item.type === 'info',\r\n            'bare': item.type === 'bare',\r\n            'rtl-mode': rtl,\r\n            'has-icon': item.icon !== 'bare'\r\n        }\"\r\n     (mouseenter)=\"onEnter()\"\r\n     (mouseleave)=\"onLeave()\">\r\n\r\n    <div *ngIf=\"!item.html\">\r\n\r\n        <div class=\"sn-title\" *ngIf=\"titleIsTemplate; else regularTitle\">\r\n            <ng-container *ngTemplateOutlet=\"title\"></ng-container>\r\n        </div>\r\n\r\n        <ng-template #regularTitle>\r\n            <div class=\"sn-title\" [innerHTML]=\"title\"></div>\r\n        </ng-template>\r\n\r\n        <div class=\"sn-content\" *ngIf=\"contentIsTemplate else regularContent\">\r\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n        </div>\r\n\r\n        <ng-template #regularContent>\r\n            <div class=\"sn-content\" [innerHTML]=\"content\"></div>\r\n        </ng-template>\r\n\r\n        <div class=\"icon\" *ngIf=\"item.icon !== 'bare'\" [innerHTML]=\"safeSvg\"></div>\r\n    </div>\r\n    <div *ngIf=\"item.html\">\r\n        <div class=\"sn-html\" *ngIf=\"htmlIsTemplate; else regularHtml\">\r\n            <ng-container *ngTemplateOutlet=\"item.html\"></ng-container>\r\n        </div>\r\n\r\n        <ng-template #regularHtml>\r\n            <div class=\"sn-content\" [innerHTML]=\"safeInputHtml\"></div>\r\n        </ng-template>\r\n\r\n        <div class=\"icon\" [class.icon-hover]=\"clickIconToClose\" *ngIf=\"item.icon\" [innerHTML]=\"safeSvg\" (click)=\"onClickIcon($event)\"></div>\r\n    </div>\r\n\r\n    <div class=\"sn-progress-loader\" *ngIf=\"showProgressBar\">\r\n        <span [ngStyle]=\"{'width': progressWidth + '%'}\"></span>\r\n    </div>\r\n\r\n</div>\r\n",
                    changeDetection: core.ChangeDetectionStrategy.OnPush,
                    styles: [".simple-notification {\r\n    width: 100%;\r\n    padding: 10px 20px;\r\n    box-sizing: border-box;\r\n    position: relative;\r\n    float: left;\r\n    margin-bottom: 10px;\r\n    color: #fff;\r\n    cursor: pointer;\r\n    transition: all 0.5s;\r\n    min-height: 70px;\r\n}\r\n\r\n.simple-notification .sn-title,\r\n.simple-notification .sn-content,\r\n.simple-notification .sn-html {\r\n    margin: 0;\r\n}\r\n\r\n.simple-notification .sn-title {\r\n    line-height: 30px;\r\n    font-size: 20px;\r\n}\r\n\r\n.simple-notification .sn-content {\r\n    font-size: 16px;\r\n    line-height: 20px;\r\n}\r\n\r\n.simple-notification.has-icon .sn-title,\r\n.simple-notification.has-icon .sn-content,\r\n.simple-notification.has-icon .sn-html {\r\n    padding: 0 50px 0 0;\r\n}\r\n\r\n.simple-notification .icon {\r\n    position: absolute;\r\n    box-sizing: border-box;\r\n    top: 0;\r\n    right: 0;\r\n    width: 70px;\r\n    height: 70px;\r\n    padding: 10px;\r\n}\r\n\r\n.simple-notification .icon.icon-hover:hover {\r\n    opacity: 0.5;\r\n}\r\n\r\n.simple-notification .icon svg {\r\n    fill: #fff;\r\n    width: 100%;\r\n    height: 100%;\r\n}\r\n\r\n.simple-notification .icon svg g {\r\n    fill: #fff;\r\n}\r\n\r\n.simple-notification.rtl-mode.has-icon .sn-title,\r\n.simple-notification.rtl-mode.has-icon .sn-content,\r\n.simple-notification.rtl-mode.has-icon .sn-html {\r\n    padding: 0 0 0 50px;\r\n}\r\n\r\n.simple-notification.rtl-mode {\r\n    direction: rtl;\r\n}\r\n\r\n.simple-notification.rtl-mode .sn-content {\r\n    padding: 0 0 0 50px;\r\n}\r\n\r\n.simple-notification.rtl-mode svg {\r\n    left: 0;\r\n    right: auto;\r\n}\r\n\r\n.simple-notification.error { background: #F44336; }\r\n.simple-notification.success { background: #8BC34A; }\r\n.simple-notification.alert { background: #ffdb5b; }\r\n.simple-notification.info { background: #03A9F4; }\r\n.simple-notification.warn { background: #ffdb5b; }\r\n\r\n.simple-notification .sn-progress-loader {\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 5px;\r\n}\r\n\r\n.simple-notification .sn-progress-loader span {\r\n    float: left;\r\n    height: 100%;\r\n}\r\n\r\n.simple-notification.success .sn-progress-loader span { background: #689F38; }\r\n.simple-notification.error .sn-progress-loader span { background: #D32F2F; }\r\n.simple-notification.alert .sn-progress-loader span { background: #edc242; }\r\n.simple-notification.info .sn-progress-loader span { background: #0288D1; }\r\n.simple-notification.warn .sn-progress-loader span { background: #edc242; }\r\n.simple-notification.bare .sn-progress-loader span { background: #ccc; }\r\n\r\n.simple-notification.warn div .sn-title,\r\n.simple-notification.warn div .sn-content,\r\n.simple-notification.warn div .sn-html { color: #444; }"]
                }] }
    ];
    /** @nocollapse */
    NotificationComponent.ctorParameters = function () { return [
        { type: NotificationsService },
        { type: platformBrowser.DomSanitizer },
        { type: core.ChangeDetectorRef },
        { type: core.NgZone }
    ]; };
    NotificationComponent.propDecorators = {
        timeOut: [{ type: core.Input }],
        showProgressBar: [{ type: core.Input }],
        pauseOnHover: [{ type: core.Input }],
        clickToClose: [{ type: core.Input }],
        clickIconToClose: [{ type: core.Input }],
        maxLength: [{ type: core.Input }],
        theClass: [{ type: core.Input }],
        rtl: [{ type: core.Input }],
        animate: [{ type: core.Input }],
        position: [{ type: core.Input }],
        item: [{ type: core.Input }]
    };
    return NotificationComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var DEFAULT_OPTIONS = {
    position: ['bottom', 'right'],
    timeOut: 0,
    showProgressBar: true,
    pauseOnHover: true,
    lastOnBottom: true,
    clickToClose: true,
    clickIconToClose: false,
    maxLength: 0,
    maxStack: 8,
    preventDuplicates: false,
    preventLastDuplicates: false,
    theClass: '',
    rtl: false,
    animate: NotificationAnimationType.FromRight,
    icons: DEFAULT_ICONS
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */

/**
 * @record
 */

var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
var OPTIONS = new core.InjectionToken('options');
/**
 * @param {?} options
 * @return {?}
 */
function optionsFactory(options) {
    return __assign({}, DEFAULT_OPTIONS, options);
}
var SimpleNotificationsModule = /** @class */ (function () {
    function SimpleNotificationsModule() {
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    SimpleNotificationsModule.forRoot = /**
     * @param {?=} options
     * @return {?}
     */
    function (options) {
        if (options === void 0) { options = {}; }
        return {
            ngModule: SimpleNotificationsModule,
            providers: [
                NotificationsService,
                {
                    provide: OPTIONS,
                    useValue: options
                },
                {
                    provide: 'options',
                    useFactory: optionsFactory,
                    deps: [OPTIONS]
                }
            ]
        };
    };
    SimpleNotificationsModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [
                        common.CommonModule
                    ],
                    declarations: [
                        SimpleNotificationsComponent,
                        NotificationComponent
                    ],
                    exports: [SimpleNotificationsComponent]
                },] }
    ];
    return SimpleNotificationsModule;
}());

exports.OPTIONS = OPTIONS;
exports.optionsFactory = optionsFactory;
exports.SimpleNotificationsModule = SimpleNotificationsModule;
exports.NotificationComponent = NotificationComponent;
exports.SimpleNotificationsComponent = SimpleNotificationsComponent;
exports.NotificationsService = NotificationsService;
exports.NotificationType = NotificationType;
exports.NotificationAnimationType = NotificationAnimationType;

Object.defineProperty(exports, '__esModule', { value: true });

})));
